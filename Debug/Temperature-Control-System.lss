
Temperature-Control-System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  000047a0  00004834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800184  00800184  00004958  2**0
                  ALLOC
  3 .stab         000038f4  00000000  00000000  00004958  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001716  00000000  00000000  0000824c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009962  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d485  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e65c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000eb12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f480  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__vector_3>
      10:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__vector_4>
      14:	0c 94 49 22 	jmp	0x4492	; 0x4492 <__vector_5>
      18:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__vector_10>
      2c:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 22 	call	0x455e	; 0x455e <main>
      8a:	0c 94 ce 23 	jmp	0x479c	; 0x479c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 66 23 	jmp	0x46cc	; 0x46cc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 82 23 	jmp	0x4704	; 0x4704 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8e 23 	jmp	0x471c	; 0x471c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8e 23 	jmp	0x471c	; 0x471c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 66 23 	jmp	0x46cc	; 0x46cc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 82 23 	jmp	0x4704	; 0x4704 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 23 	jmp	0x46dc	; 0x46dc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e7       	ldi	r22, 0x7C	; 124
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8a 23 	jmp	0x4714	; 0x4714 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8e 23 	jmp	0x471c	; 0x471c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8e 23 	jmp	0x471c	; 0x471c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8e 23 	jmp	0x471c	; 0x471c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 76 23 	jmp	0x46ec	; 0x46ec <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6e 23 	jmp	0x46dc	; 0x46dc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 8a 23 	jmp	0x4714	; 0x4714 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 57       	subi	r30, 0x7C	; 124
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:
static u8 ADC_u8ChainConversionIndex;			/*Global variable to carry the current conversion index*/
static u8 ADC_u8BusyState= IDLE;
static u8 ADC_u8ISRSource;

void ADC_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if VRS == AREF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif VRS == AVCC
	SET_BIT(ADMUX,ADMUX_REFS0);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24
	/*Select Resolution*/
#if Resolution == _8_Bits
	SET_BIT(ADMUX,ADMUX_ADLAR);

#elif  Resolution == _10_Bits
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24
#else
#error "Wrong Resolution configuration option"
#endif

	/*Set Prescaler*/
	ADMUX &= 0b11111000;
     e60:	a7 e2       	ldi	r26, 0x27	; 39
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e7 e2       	ldi	r30, 0x27	; 39
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	ADMUX |= PrescalerSelections;
     e6e:	a7 e2       	ldi	r26, 0x27	; 39
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e7 e2       	ldi	r30, 0x27	; 39
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	87 60       	ori	r24, 0x07	; 7
     e7a:	8c 93       	st	X, r24

	/*Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	8c 93       	st	X, r24


}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <ADC_u8GetChannelReading>:

u16 ADC_u8GetChannelReading(u8 Copy_u8Channel)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	/*Clear the MUX bits in ADMUX register*/
	ADMUX &= 0b11100000;
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 7e       	andi	r24, 0xE0	; 224
     ea8:	8c 93       	st	X, r24

	/*Set the required channel into MUX bits*/
	ADMUX |= Copy_u8Channel;
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	90 81       	ld	r25, Z
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	89 2b       	or	r24, r25
     eb8:	8c 93       	st	X, r24

	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     eba:	a6 e2       	ldi	r26, 0x26	; 38
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e6 e2       	ldi	r30, 0x26	; 38
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	8c 93       	st	X, r24

	/*Polling (busy waiting) until the conversion complete flag is set*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 95       	swap	r24
     ed0:	8f 70       	andi	r24, 0x0F	; 15
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	a9 f3       	breq	.-22     	; 0xec8 <ADC_u8GetChannelReading+0x38>

	/*Clear the conversion complete flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     ede:	a6 e2       	ldi	r26, 0x26	; 38
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 61       	ori	r24, 0x10	; 16
     eea:	8c 93       	st	X, r24
	/*Return the reading*/
#if Resolution == _8_Bits
	return ADCH;

#elif Resolution == _10_Bits
	return ADC;
     eec:	e4 e2       	ldi	r30, 0x24	; 36
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01

#endif
}
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <ADC_u8StartConversionSynch>:


u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u8* Copy_pu8Reading)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	28 97       	sbiw	r28, 0x08	; 8
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	8e 83       	std	Y+6, r24	; 0x06
     f12:	78 87       	std	Y+8, r23	; 0x08
     f14:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     f16:	1a 82       	std	Y+2, r1	; 0x02
     f18:	1b 82       	std	Y+3, r1	; 0x03
     f1a:	1c 82       	std	Y+4, r1	; 0x04
     f1c:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     f1e:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
     f20:	80 91 8e 01 	lds	r24, 0x018E
     f24:	88 23       	and	r24, r24
     f26:	09 f0       	breq	.+2      	; 0xf2a <ADC_u8StartConversionSynch+0x2e>
     f28:	5c c0       	rjmp	.+184    	; 0xfe2 <ADC_u8StartConversionSynch+0xe6>
	{
		/*ADC is now busy*/
		ADC_u8BusyState= BUSY;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 8e 01 	sts	0x018E, r24

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &= 0b11100000;
     f30:	a7 e2       	ldi	r26, 0x27	; 39
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e7 e2       	ldi	r30, 0x27	; 39
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 7e       	andi	r24, 0xE0	; 224
     f3c:	8c 93       	st	X, r24

		/*Set the required channel into the MUX bits*/
		ADMUX|= Copy_u8Channel;
     f3e:	a7 e2       	ldi	r26, 0x27	; 39
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e2       	ldi	r30, 0x27	; 39
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	90 81       	ld	r25, Z
     f48:	8e 81       	ldd	r24, Y+6	; 0x06
     f4a:	89 2b       	or	r24, r25
     f4c:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     f4e:	a6 e2       	ldi	r26, 0x26	; 38
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e6 e2       	ldi	r30, 0x26	; 38
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	8c 93       	st	X, r24
     f5c:	0b c0       	rjmp	.+22     	; 0xf74 <ADC_u8StartConversionSynch+0x78>

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)  && (Local_u32Counter != ADC_u32TIMEOUT ) )
		{
			Local_u32Counter++;
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	ac 81       	ldd	r26, Y+4	; 0x04
     f64:	bd 81       	ldd	r27, Y+5	; 0x05
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	a1 1d       	adc	r26, r1
     f6a:	b1 1d       	adc	r27, r1
     f6c:	8a 83       	std	Y+2, r24	; 0x02
     f6e:	9b 83       	std	Y+3, r25	; 0x03
     f70:	ac 83       	std	Y+4, r26	; 0x04
     f72:	bd 83       	std	Y+5, r27	; 0x05

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0)  && (Local_u32Counter != ADC_u32TIMEOUT ) )
     f74:	e6 e2       	ldi	r30, 0x26	; 38
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	82 95       	swap	r24
     f7c:	8f 70       	andi	r24, 0x0F	; 15
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	81 70       	andi	r24, 0x01	; 1
     f84:	90 70       	andi	r25, 0x00	; 0
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	61 f4       	brne	.+24     	; 0xfa2 <ADC_u8StartConversionSynch+0xa6>
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	ac 81       	ldd	r26, Y+4	; 0x04
     f90:	bd 81       	ldd	r27, Y+5	; 0x05
     f92:	80 35       	cpi	r24, 0x50	; 80
     f94:	23 ec       	ldi	r18, 0xC3	; 195
     f96:	92 07       	cpc	r25, r18
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	a2 07       	cpc	r26, r18
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	b2 07       	cpc	r27, r18
     fa0:	f1 f6       	brne	.-68     	; 0xf5e <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter== ADC_u32TIMEOUT)
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	ac 81       	ldd	r26, Y+4	; 0x04
     fa8:	bd 81       	ldd	r27, Y+5	; 0x05
     faa:	80 35       	cpi	r24, 0x50	; 80
     fac:	23 ec       	ldi	r18, 0xC3	; 195
     fae:	92 07       	cpc	r25, r18
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	a2 07       	cpc	r26, r18
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	b2 07       	cpc	r27, r18
     fb8:	19 f4       	brne	.+6      	; 0xfc0 <ADC_u8StartConversionSynch+0xc4>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	13 c0       	rjmp	.+38     	; 0xfe6 <ADC_u8StartConversionSynch+0xea>
		}
		else
		{
			/* Loop is broken because flag is raised */
			/*clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     fc0:	a6 e2       	ldi	r26, 0x26	; 38
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e6 e2       	ldi	r30, 0x26	; 38
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	80 61       	ori	r24, 0x10	; 16
     fcc:	8c 93       	st	X, r24
			/*Return the reading*/
#if Resolution == _8_Bits
			*Copy_pu8Reading = ADCH;

#elif Resolution == _10_Bits
			*Copy_pu8Reading =  ADC;
     fce:	e4 e2       	ldi	r30, 0x24	; 36
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	ef 81       	ldd	r30, Y+7	; 0x07
     fd8:	f8 85       	ldd	r31, Y+8	; 0x08
     fda:	80 83       	st	Z, r24

#endif

			/*ADC is finished, return it to IDLE*/
			ADC_u8BusyState= IDLE;
     fdc:	10 92 8e 01 	sts	0x018E, r1
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <ADC_u8StartConversionSynch+0xea>
		}
	}
	else
	{
		Local_u8ErrorState= BUSY;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe8:	28 96       	adiw	r28, 0x08	; 8
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u8* Copy_pu8Reading, void(*Copy_pvNotificationFunc)(void))
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <ADC_u8StartConversionAsynch+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <ADC_u8StartConversionAsynch+0x8>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <ADC_u8StartConversionAsynch+0xa>
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	7c 83       	std	Y+4, r23	; 0x04
    100c:	6b 83       	std	Y+3, r22	; 0x03
    100e:	5e 83       	std	Y+6, r21	; 0x06
    1010:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_uErrorState=OK;
    1012:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState== IDLE)
    1014:	80 91 8e 01 	lds	r24, 0x018E
    1018:	88 23       	and	r24, r24
    101a:	d1 f5       	brne	.+116    	; 0x1090 <ADC_u8StartConversionAsynch+0x96>
	{
		if((Copy_pu8Reading == NULL) || (Copy_pvNotificationFunc == NULL))
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	21 f0       	breq	.+8      	; 0x102c <ADC_u8StartConversionAsynch+0x32>
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	19 f4       	brne	.+6      	; 0x1032 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_uErrorState= NULL_POINTER;
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	31 c0       	rjmp	.+98     	; 0x1094 <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			/*make ADC busy in order not to work until being idle*/
			ADC_u8BusyState= BUSY;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 8e 01 	sts	0x018E, r24

			/*Make ISR Source : Chain Asynchronous*/
			ADC_u8ISRSource = SingleChannelAsynch;
    1038:	10 92 90 01 	sts	0x0190, r1


			/*Initialize the reading variable globally*/
			ADC_pu8Reading = Copy_pu8Reading;
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	90 93 85 01 	sts	0x0185, r25
    1044:	80 93 84 01 	sts	0x0184, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc= Copy_pvNotificationFunc;
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	90 93 87 01 	sts	0x0187, r25
    1050:	80 93 86 01 	sts	0x0186, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= 0b11100000;
    1054:	a7 e2       	ldi	r26, 0x27	; 39
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e7 e2       	ldi	r30, 0x27	; 39
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 7e       	andi	r24, 0xE0	; 224
    1060:	8c 93       	st	X, r24

			/*Set the required channel into the MUX bits*/
			ADMUX|= Copy_u8Channel;
    1062:	a7 e2       	ldi	r26, 0x27	; 39
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e2       	ldi	r30, 0x27	; 39
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	90 81       	ld	r25, Z
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	89 2b       	or	r24, r25
    1070:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    1072:	a6 e2       	ldi	r26, 0x26	; 38
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e6 e2       	ldi	r30, 0x26	; 38
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	8c 93       	st	X, r24

			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    1080:	a6 e2       	ldi	r26, 0x26	; 38
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e2       	ldi	r30, 0x26	; 38
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	88 60       	ori	r24, 0x08	; 8
    108c:	8c 93       	st	X, r24
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else
	{
		Local_uErrorState= BUSY;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_uErrorState;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
}
    1096:	26 96       	adiw	r28, 0x06	; 6
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <ADC_u8StartChainAsynch>:

u8 ADC_u8StartChainAsynch(Chain_t * Copy_Chain)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <ADC_u8StartChainAsynch+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <ADC_u8StartChainAsynch+0x8>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	9b 83       	std	Y+3, r25	; 0x03
    10b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    10b8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Chain == NULL)
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	29 f4       	brne	.+10     	; 0x10cc <ADC_u8StartChainAsynch+0x24>
	{
		return Local_u8ErrorState = NULL_POINTER;
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	8c 83       	std	Y+4, r24	; 0x04
    10ca:	5a c0       	rjmp	.+180    	; 0x1180 <ADC_u8StartChainAsynch+0xd8>
	}
	else
	{
		if(ADC_u8BusyState == IDLE)
    10cc:	80 91 8e 01 	lds	r24, 0x018E
    10d0:	88 23       	and	r24, r24
    10d2:	21 f4       	brne	.+8      	; 0x10dc <ADC_u8StartChainAsynch+0x34>
		{
			ADC_u8BusyState = BUSY;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 93 8e 01 	sts	0x018E, r24
    10da:	50 c0       	rjmp	.+160    	; 0x117c <ADC_u8StartChainAsynch+0xd4>
		}
		else
		{
			/*ADC is now busy*/
			Local_u8ErrorState = BUSY;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01

			/*MakIe ISR Source: Single channel asynchronous*/
			ADC_u8ISRSource = ChainAsynch;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 90 01 	sts	0x0190, r24

			/*Initialize Chain channel Array*/
			ADC_pu8ChainChannelArr = Copy_Chain->Channel;
    10e6:	ea 81       	ldd	r30, Y+2	; 0x02
    10e8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ea:	80 81       	ld	r24, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	90 93 89 01 	sts	0x0189, r25
    10f2:	80 93 88 01 	sts	0x0188, r24

			/*Initialize Result Array*/
			ADC_pu16ChainResultArr = Copy_Chain->Result;
    10f6:	ea 81       	ldd	r30, Y+2	; 0x02
    10f8:	fb 81       	ldd	r31, Y+3	; 0x03
    10fa:	82 81       	ldd	r24, Z+2	; 0x02
    10fc:	93 81       	ldd	r25, Z+3	; 0x03
    10fe:	90 93 8d 01 	sts	0x018D, r25
    1102:	80 93 8c 01 	sts	0x018C, r24

			/*Initialize Chain Size*/
			ADC_pu8Size = Copy_Chain->Size;
    1106:	ea 81       	ldd	r30, Y+2	; 0x02
    1108:	fb 81       	ldd	r31, Y+3	; 0x03
    110a:	84 81       	ldd	r24, Z+4	; 0x04
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	90 93 8b 01 	sts	0x018B, r25
    1114:	80 93 8a 01 	sts	0x018A, r24

			/*Initialize Notification function*/
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotificationFunc;
    1118:	ea 81       	ldd	r30, Y+2	; 0x02
    111a:	fb 81       	ldd	r31, Y+3	; 0x03
    111c:	85 81       	ldd	r24, Z+5	; 0x05
    111e:	96 81       	ldd	r25, Z+6	; 0x06
    1120:	90 93 87 01 	sts	0x0187, r25
    1124:	80 93 86 01 	sts	0x0186, r24

			/*Initialize current conversion Index*/
			ADC_u8ChainConversionIndex = 0;
    1128:	10 92 8f 01 	sts	0x018F, r1

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= 0b11100000;
    112c:	a7 e2       	ldi	r26, 0x27	; 39
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e7 e2       	ldi	r30, 0x27	; 39
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 7e       	andi	r24, 0xE0	; 224
    1138:	8c 93       	st	X, r24

			/*Set the first Channel into the MUX bits*/
			ADMUX|= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
    113a:	a7 e2       	ldi	r26, 0x27	; 39
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e7 e2       	ldi	r30, 0x27	; 39
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	40 81       	ld	r20, Z
    1144:	20 91 88 01 	lds	r18, 0x0188
    1148:	30 91 89 01 	lds	r19, 0x0189
    114c:	80 91 8f 01 	lds	r24, 0x018F
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	f9 01       	movw	r30, r18
    1156:	e8 0f       	add	r30, r24
    1158:	f9 1f       	adc	r31, r25
    115a:	80 81       	ld	r24, Z
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    1160:	a6 e2       	ldi	r26, 0x26	; 38
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e6 e2       	ldi	r30, 0x26	; 38
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	80 64       	ori	r24, 0x40	; 64
    116c:	8c 93       	st	X, r24

			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    116e:	a6 e2       	ldi	r26, 0x26	; 38
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e6 e2       	ldi	r30, 0x26	; 38
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	88 60       	ori	r24, 0x08	; 8
    117a:	8c 93       	st	X, r24
		}

	}

	return Local_u8ErrorState;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	8c 83       	std	Y+4, r24	; 0x04
    1180:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <__vector_16>:

void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == SingleChannelAsynch)
    11ba:	80 91 90 01 	lds	r24, 0x0190
    11be:	88 23       	and	r24, r24
    11c0:	c1 f4       	brne	.+48     	; 0x11f2 <__vector_16+0x62>
		/*Read ADC result*/
#if Resolution == _8_Bits
		*ADC_pu8Reading = ADCH;

#elif Resolution == _10_Bits
		*ADC_pu8Reading =  ADC;
    11c2:	a0 91 84 01 	lds	r26, 0x0184
    11c6:	b0 91 85 01 	lds	r27, 0x0185
    11ca:	e4 e2       	ldi	r30, 0x24	; 36
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	8c 93       	st	X, r24

#endif

		/*Make ADC state be IDLE because it finished*/
		ADC_u8BusyState=IDLE;
    11d4:	10 92 8e 01 	sts	0x018E, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
    11d8:	e0 91 86 01 	lds	r30, 0x0186
    11dc:	f0 91 87 01 	lds	r31, 0x0187
    11e0:	09 95       	icall

		/*Disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    11e2:	a6 e2       	ldi	r26, 0x26	; 38
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e6 e2       	ldi	r30, 0x26	; 38
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	87 7f       	andi	r24, 0xF7	; 247
    11ee:	8c 93       	st	X, r24
    11f0:	5a c0       	rjmp	.+180    	; 0x12a6 <__vector_16+0x116>
	}
	else if(ADC_u8ISRSource == ChainAsynch)
    11f2:	80 91 90 01 	lds	r24, 0x0190
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__vector_16+0x6c>
    11fa:	55 c0       	rjmp	.+170    	; 0x12a6 <__vector_16+0x116>
		/*read the current conversion*/
#if Resolution == _8_Bits
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADCH;

#elif Resolution == _10_Bits
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADC;
    11fc:	20 91 8c 01 	lds	r18, 0x018C
    1200:	30 91 8d 01 	lds	r19, 0x018D
    1204:	80 91 8f 01 	lds	r24, 0x018F
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	d9 01       	movw	r26, r18
    1212:	a8 0f       	add	r26, r24
    1214:	b9 1f       	adc	r27, r25
    1216:	e4 e2       	ldi	r30, 0x24	; 36
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	9c 93       	st	X, r25
    1222:	8e 93       	st	-X, r24
#endif

		/*Increment Chain index*/
		ADC_u8ChainConversionIndex++;
    1224:	80 91 8f 01 	lds	r24, 0x018F
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	80 93 8f 01 	sts	0x018F, r24

		/*check chain is finished or not*/
		if(ADC_u8ChainConversionIndex == ADC_pu8Size)
    122e:	80 91 8f 01 	lds	r24, 0x018F
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9c 01       	movw	r18, r24
    1238:	80 91 8a 01 	lds	r24, 0x018A
    123c:	90 91 8b 01 	lds	r25, 0x018B
    1240:	28 17       	cp	r18, r24
    1242:	39 07       	cpc	r19, r25
    1244:	79 f4       	brne	.+30     	; 0x1264 <__vector_16+0xd4>
		{
			/*Chain is finished*/
			/*ADC is now IDLE*/
			ADC_u8BusyState = IDLE;
    1246:	10 92 8e 01 	sts	0x018E, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
    124a:	e0 91 86 01 	lds	r30, 0x0186
    124e:	f0 91 87 01 	lds	r31, 0x0187
    1252:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1254:	a6 e2       	ldi	r26, 0x26	; 38
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e6 e2       	ldi	r30, 0x26	; 38
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	87 7f       	andi	r24, 0xF7	; 247
    1260:	8c 93       	st	X, r24
    1262:	21 c0       	rjmp	.+66     	; 0x12a6 <__vector_16+0x116>
		}
		else
		{
			/*Chain is not finished*/
			/*Set new required channel*/
			ADMUX &= 0b11100000;
    1264:	a7 e2       	ldi	r26, 0x27	; 39
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e7 e2       	ldi	r30, 0x27	; 39
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 7e       	andi	r24, 0xE0	; 224
    1270:	8c 93       	st	X, r24
			ADMUX|= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
    1272:	a7 e2       	ldi	r26, 0x27	; 39
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e7 e2       	ldi	r30, 0x27	; 39
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	40 81       	ld	r20, Z
    127c:	20 91 88 01 	lds	r18, 0x0188
    1280:	30 91 89 01 	lds	r19, 0x0189
    1284:	80 91 8f 01 	lds	r24, 0x018F
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	f9 01       	movw	r30, r18
    128e:	e8 0f       	add	r30, r24
    1290:	f9 1f       	adc	r31, r25
    1292:	80 81       	ld	r24, Z
    1294:	84 2b       	or	r24, r20
    1296:	8c 93       	st	X, r24

			/*Start new conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    1298:	a6 e2       	ldi	r26, 0x26	; 38
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e6 e2       	ldi	r30, 0x26	; 38
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	80 64       	ori	r24, 0x40	; 64
    12a4:	8c 93       	st	X, r24
		}

	}

}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <CLCD_voidSendCommand>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	c3 56       	subi	r28, 0x63	; 99
    12da:	d0 40       	sbci	r29, 0x00	; 0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	fe 01       	movw	r30, r28
    12e8:	ed 59       	subi	r30, 0x9D	; 157
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_LOW); /* Instruction Mode RS=0 */
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    1302:	fe 01       	movw	r30, r28
    1304:	e1 5a       	subi	r30, 0xA1	; 161
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 e8       	ldi	r26, 0x80	; 128
    130e:	bf e3       	ldi	r27, 0x3F	; 63
    1310:	80 83       	st	Z, r24
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	a2 83       	std	Z+2, r26	; 0x02
    1316:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1318:	8e 01       	movw	r16, r28
    131a:	05 5a       	subi	r16, 0xA5	; 165
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	e1 5a       	subi	r30, 0xA1	; 161
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a ef       	ldi	r20, 0xFA	; 250
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	f8 01       	movw	r30, r16
    133e:	80 83       	st	Z, r24
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	a2 83       	std	Z+2, r26	; 0x02
    1344:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1346:	fe 01       	movw	r30, r28
    1348:	e5 5a       	subi	r30, 0xA5	; 165
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f e3       	ldi	r21, 0x3F	; 63
    135c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1360:	88 23       	and	r24, r24
    1362:	44 f4       	brge	.+16     	; 0x1374 <CLCD_voidSendCommand+0xa8>
		__ticks = 1;
    1364:	fe 01       	movw	r30, r28
    1366:	e7 5a       	subi	r30, 0xA7	; 167
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
    1372:	64 c0       	rjmp	.+200    	; 0x143c <CLCD_voidSendCommand+0x170>
	else if (__tmp > 65535)
    1374:	fe 01       	movw	r30, r28
    1376:	e5 5a       	subi	r30, 0xA5	; 165
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	3f ef       	ldi	r19, 0xFF	; 255
    1386:	4f e7       	ldi	r20, 0x7F	; 127
    1388:	57 e4       	ldi	r21, 0x47	; 71
    138a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    138e:	18 16       	cp	r1, r24
    1390:	0c f0       	brlt	.+2      	; 0x1394 <CLCD_voidSendCommand+0xc8>
    1392:	43 c0       	rjmp	.+134    	; 0x141a <CLCD_voidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1394:	fe 01       	movw	r30, r28
    1396:	e1 5a       	subi	r30, 0xA1	; 161
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8e 01       	movw	r16, r28
    13b4:	07 5a       	subi	r16, 0xA7	; 167
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	f8 01       	movw	r30, r16
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	80 83       	st	Z, r24
    13ca:	1f c0       	rjmp	.+62     	; 0x140a <CLCD_voidSendCommand+0x13e>
    13cc:	fe 01       	movw	r30, r28
    13ce:	e9 5a       	subi	r30, 0xA9	; 169
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	88 ec       	ldi	r24, 0xC8	; 200
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13da:	fe 01       	movw	r30, r28
    13dc:	e9 5a       	subi	r30, 0xA9	; 169
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <CLCD_voidSendCommand+0x118>
    13e8:	fe 01       	movw	r30, r28
    13ea:	e9 5a       	subi	r30, 0xA9	; 169
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	de 01       	movw	r26, r28
    13f4:	a7 5a       	subi	r26, 0xA7	; 167
    13f6:	bf 4f       	sbci	r27, 0xFF	; 255
    13f8:	fe 01       	movw	r30, r28
    13fa:	e7 5a       	subi	r30, 0xA7	; 167
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	11 96       	adiw	r26, 0x01	; 1
    1406:	9c 93       	st	X, r25
    1408:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140a:	fe 01       	movw	r30, r28
    140c:	e7 5a       	subi	r30, 0xA7	; 167
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	d1 f6       	brne	.-76     	; 0x13cc <CLCD_voidSendCommand+0x100>
    1418:	27 c0       	rjmp	.+78     	; 0x1468 <CLCD_voidSendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141a:	8e 01       	movw	r16, r28
    141c:	07 5a       	subi	r16, 0xA7	; 167
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
    1420:	fe 01       	movw	r30, r28
    1422:	e5 5a       	subi	r30, 0xA5	; 165
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	f8 01       	movw	r30, r16
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	de 01       	movw	r26, r28
    143e:	ab 5a       	subi	r26, 0xAB	; 171
    1440:	bf 4f       	sbci	r27, 0xFF	; 255
    1442:	fe 01       	movw	r30, r28
    1444:	e7 5a       	subi	r30, 0xA7	; 167
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	8d 93       	st	X+, r24
    144e:	9c 93       	st	X, r25
    1450:	fe 01       	movw	r30, r28
    1452:	eb 5a       	subi	r30, 0xAB	; 171
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <CLCD_voidSendCommand+0x18e>
    145e:	fe 01       	movw	r30, r28
    1460:	eb 5a       	subi	r30, 0xAB	; 171
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	62 e0       	ldi	r22, 0x02	; 2
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    1472:	fe 01       	movw	r30, r28
    1474:	ef 5a       	subi	r30, 0xAF	; 175
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 e8       	ldi	r26, 0x80	; 128
    147e:	bf e3       	ldi	r27, 0x3F	; 63
    1480:	80 83       	st	Z, r24
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	a2 83       	std	Z+2, r26	; 0x02
    1486:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1488:	8e 01       	movw	r16, r28
    148a:	03 5b       	subi	r16, 0xB3	; 179
    148c:	1f 4f       	sbci	r17, 0xFF	; 255
    148e:	fe 01       	movw	r30, r28
    1490:	ef 5a       	subi	r30, 0xAF	; 175
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	4a ef       	ldi	r20, 0xFA	; 250
    14a2:	54 e4       	ldi	r21, 0x44	; 68
    14a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	f8 01       	movw	r30, r16
    14ae:	80 83       	st	Z, r24
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	a2 83       	std	Z+2, r26	; 0x02
    14b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14b6:	fe 01       	movw	r30, r28
    14b8:	e3 5b       	subi	r30, 0xB3	; 179
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	60 81       	ld	r22, Z
    14be:	71 81       	ldd	r23, Z+1	; 0x01
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	93 81       	ldd	r25, Z+3	; 0x03
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e8       	ldi	r20, 0x80	; 128
    14ca:	5f e3       	ldi	r21, 0x3F	; 63
    14cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	44 f4       	brge	.+16     	; 0x14e4 <CLCD_voidSendCommand+0x218>
		__ticks = 1;
    14d4:	fe 01       	movw	r30, r28
    14d6:	e5 5b       	subi	r30, 0xB5	; 181
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	91 83       	std	Z+1, r25	; 0x01
    14e0:	80 83       	st	Z, r24
    14e2:	64 c0       	rjmp	.+200    	; 0x15ac <CLCD_voidSendCommand+0x2e0>
	else if (__tmp > 65535)
    14e4:	fe 01       	movw	r30, r28
    14e6:	e3 5b       	subi	r30, 0xB3	; 179
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	82 81       	ldd	r24, Z+2	; 0x02
    14f0:	93 81       	ldd	r25, Z+3	; 0x03
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	3f ef       	ldi	r19, 0xFF	; 255
    14f6:	4f e7       	ldi	r20, 0x7F	; 127
    14f8:	57 e4       	ldi	r21, 0x47	; 71
    14fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fe:	18 16       	cp	r1, r24
    1500:	0c f0       	brlt	.+2      	; 0x1504 <CLCD_voidSendCommand+0x238>
    1502:	43 c0       	rjmp	.+134    	; 0x158a <CLCD_voidSendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1504:	fe 01       	movw	r30, r28
    1506:	ef 5a       	subi	r30, 0xAF	; 175
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	8e 01       	movw	r16, r28
    1524:	05 5b       	subi	r16, 0xB5	; 181
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	f8 01       	movw	r30, r16
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    153a:	1f c0       	rjmp	.+62     	; 0x157a <CLCD_voidSendCommand+0x2ae>
    153c:	fe 01       	movw	r30, r28
    153e:	e7 5b       	subi	r30, 0xB7	; 183
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	88 ec       	ldi	r24, 0xC8	; 200
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	fe 01       	movw	r30, r28
    154c:	e7 5b       	subi	r30, 0xB7	; 183
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <CLCD_voidSendCommand+0x288>
    1558:	fe 01       	movw	r30, r28
    155a:	e7 5b       	subi	r30, 0xB7	; 183
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	de 01       	movw	r26, r28
    1564:	a5 5b       	subi	r26, 0xB5	; 181
    1566:	bf 4f       	sbci	r27, 0xFF	; 255
    1568:	fe 01       	movw	r30, r28
    156a:	e5 5b       	subi	r30, 0xB5	; 181
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	11 96       	adiw	r26, 0x01	; 1
    1576:	9c 93       	st	X, r25
    1578:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157a:	fe 01       	movw	r30, r28
    157c:	e5 5b       	subi	r30, 0xB5	; 181
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	80 81       	ld	r24, Z
    1582:	91 81       	ldd	r25, Z+1	; 0x01
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	d1 f6       	brne	.-76     	; 0x153c <CLCD_voidSendCommand+0x270>
    1588:	27 c0       	rjmp	.+78     	; 0x15d8 <CLCD_voidSendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	8e 01       	movw	r16, r28
    158c:	05 5b       	subi	r16, 0xB5	; 181
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	fe 01       	movw	r30, r28
    1592:	e3 5b       	subi	r30, 0xB3	; 179
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	f8 01       	movw	r30, r16
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	80 83       	st	Z, r24
    15ac:	de 01       	movw	r26, r28
    15ae:	a9 5b       	subi	r26, 0xB9	; 185
    15b0:	bf 4f       	sbci	r27, 0xFF	; 255
    15b2:	fe 01       	movw	r30, r28
    15b4:	e5 5b       	subi	r30, 0xB5	; 181
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	8d 93       	st	X+, r24
    15be:	9c 93       	st	X, r25
    15c0:	fe 01       	movw	r30, r28
    15c2:	e9 5b       	subi	r30, 0xB9	; 185
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <CLCD_voidSendCommand+0x2fe>
    15ce:	fe 01       	movw	r30, r28
    15d0:	e9 5b       	subi	r30, 0xB9	; 185
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */



#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 4));
    15d8:	fe 01       	movw	r30, r28
    15da:	ed 59       	subi	r30, 0x9D	; 157
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	80 81       	ld	r24, Z
    15e0:	82 95       	swap	r24
    15e2:	8f 70       	andi	r24, 0x0F	; 15
    15e4:	98 2f       	mov	r25, r24
    15e6:	91 70       	andi	r25, 0x01	; 1
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	64 e0       	ldi	r22, 0x04	; 4
    15ec:	49 2f       	mov	r20, r25
    15ee:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 5));
    15f2:	fe 01       	movw	r30, r28
    15f4:	ed 59       	subi	r30, 0x9D	; 157
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	82 95       	swap	r24
    15fc:	86 95       	lsr	r24
    15fe:	87 70       	andi	r24, 0x07	; 7
    1600:	98 2f       	mov	r25, r24
    1602:	91 70       	andi	r25, 0x01	; 1
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	65 e0       	ldi	r22, 0x05	; 5
    1608:	49 2f       	mov	r20, r25
    160a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 6));
    160e:	fe 01       	movw	r30, r28
    1610:	ed 59       	subi	r30, 0x9D	; 157
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	80 81       	ld	r24, Z
    1616:	82 95       	swap	r24
    1618:	86 95       	lsr	r24
    161a:	86 95       	lsr	r24
    161c:	83 70       	andi	r24, 0x03	; 3
    161e:	98 2f       	mov	r25, r24
    1620:	91 70       	andi	r25, 0x01	; 1
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	66 e0       	ldi	r22, 0x06	; 6
    1626:	49 2f       	mov	r20, r25
    1628:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 7));
    162c:	fe 01       	movw	r30, r28
    162e:	ed 59       	subi	r30, 0x9D	; 157
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	80 81       	ld	r24, Z
    1634:	98 2f       	mov	r25, r24
    1636:	99 1f       	adc	r25, r25
    1638:	99 27       	eor	r25, r25
    163a:	99 1f       	adc	r25, r25
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	67 e0       	ldi	r22, 0x07	; 7
    1640:	49 2f       	mov	r20, r25
    1642:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    1646:	fe 01       	movw	r30, r28
    1648:	ed 5b       	subi	r30, 0xBD	; 189
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a0 e8       	ldi	r26, 0x80	; 128
    1652:	bf e3       	ldi	r27, 0x3F	; 63
    1654:	80 83       	st	Z, r24
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	a2 83       	std	Z+2, r26	; 0x02
    165a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165c:	8e 01       	movw	r16, r28
    165e:	01 5c       	subi	r16, 0xC1	; 193
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	fe 01       	movw	r30, r28
    1664:	ed 5b       	subi	r30, 0xBD	; 189
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a ef       	ldi	r20, 0xFA	; 250
    1676:	54 e4       	ldi	r21, 0x44	; 68
    1678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	f8 01       	movw	r30, r16
    1682:	80 83       	st	Z, r24
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	a2 83       	std	Z+2, r26	; 0x02
    1688:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    168a:	fe 01       	movw	r30, r28
    168c:	ff 96       	adiw	r30, 0x3f	; 63
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16a2:	88 23       	and	r24, r24
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <CLCD_voidSendCommand+0x3e4>
		__ticks = 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9e af       	std	Y+62, r25	; 0x3e
    16ac:	8d af       	std	Y+61, r24	; 0x3d
    16ae:	46 c0       	rjmp	.+140    	; 0x173c <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    16b0:	fe 01       	movw	r30, r28
    16b2:	ff 96       	adiw	r30, 0x3f	; 63
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	3f ef       	ldi	r19, 0xFF	; 255
    16c0:	4f e7       	ldi	r20, 0x7F	; 127
    16c2:	57 e4       	ldi	r21, 0x47	; 71
    16c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	64 f5       	brge	.+88     	; 0x1724 <CLCD_voidSendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16cc:	fe 01       	movw	r30, r28
    16ce:	ed 5b       	subi	r30, 0xBD	; 189
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	9e af       	std	Y+62, r25	; 0x3e
    16f8:	8d af       	std	Y+61, r24	; 0x3d
    16fa:	0f c0       	rjmp	.+30     	; 0x171a <CLCD_voidSendCommand+0x44e>
    16fc:	88 ec       	ldi	r24, 0xC8	; 200
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9c af       	std	Y+60, r25	; 0x3c
    1702:	8b af       	std	Y+59, r24	; 0x3b
    1704:	8b ad       	ldd	r24, Y+59	; 0x3b
    1706:	9c ad       	ldd	r25, Y+60	; 0x3c
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <CLCD_voidSendCommand+0x43c>
    170c:	9c af       	std	Y+60, r25	; 0x3c
    170e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1710:	8d ad       	ldd	r24, Y+61	; 0x3d
    1712:	9e ad       	ldd	r25, Y+62	; 0x3e
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	9e af       	std	Y+62, r25	; 0x3e
    1718:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	8d ad       	ldd	r24, Y+61	; 0x3d
    171c:	9e ad       	ldd	r25, Y+62	; 0x3e
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	69 f7       	brne	.-38     	; 0x16fc <CLCD_voidSendCommand+0x430>
    1722:	16 c0       	rjmp	.+44     	; 0x1750 <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1724:	fe 01       	movw	r30, r28
    1726:	ff 96       	adiw	r30, 0x3f	; 63
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9e af       	std	Y+62, r25	; 0x3e
    173a:	8d af       	std	Y+61, r24	; 0x3d
    173c:	8d ad       	ldd	r24, Y+61	; 0x3d
    173e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1740:	9a af       	std	Y+58, r25	; 0x3a
    1742:	89 af       	std	Y+57, r24	; 0x39
    1744:	89 ad       	ldd	r24, Y+57	; 0x39
    1746:	9a ad       	ldd	r25, Y+58	; 0x3a
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <CLCD_voidSendCommand+0x47c>
    174c:	9a af       	std	Y+58, r25	; 0x3a
    174e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	62 e0       	ldi	r22, 0x02	; 2
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a0 e8       	ldi	r26, 0x80	; 128
    1760:	bf e3       	ldi	r27, 0x3F	; 63
    1762:	8d ab       	std	Y+53, r24	; 0x35
    1764:	9e ab       	std	Y+54, r25	; 0x36
    1766:	af ab       	std	Y+55, r26	; 0x37
    1768:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176a:	6d a9       	ldd	r22, Y+53	; 0x35
    176c:	7e a9       	ldd	r23, Y+54	; 0x36
    176e:	8f a9       	ldd	r24, Y+55	; 0x37
    1770:	98 ad       	ldd	r25, Y+56	; 0x38
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	4a ef       	ldi	r20, 0xFA	; 250
    1778:	54 e4       	ldi	r21, 0x44	; 68
    177a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	89 ab       	std	Y+49, r24	; 0x31
    1784:	9a ab       	std	Y+50, r25	; 0x32
    1786:	ab ab       	std	Y+51, r26	; 0x33
    1788:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    178a:	69 a9       	ldd	r22, Y+49	; 0x31
    178c:	7a a9       	ldd	r23, Y+50	; 0x32
    178e:	8b a9       	ldd	r24, Y+51	; 0x33
    1790:	9c a9       	ldd	r25, Y+52	; 0x34
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e8       	ldi	r20, 0x80	; 128
    1798:	5f e3       	ldi	r21, 0x3F	; 63
    179a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    179e:	88 23       	and	r24, r24
    17a0:	2c f4       	brge	.+10     	; 0x17ac <CLCD_voidSendCommand+0x4e0>
		__ticks = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	98 ab       	std	Y+48, r25	; 0x30
    17a8:	8f a7       	std	Y+47, r24	; 0x2f
    17aa:	3f c0       	rjmp	.+126    	; 0x182a <CLCD_voidSendCommand+0x55e>
	else if (__tmp > 65535)
    17ac:	69 a9       	ldd	r22, Y+49	; 0x31
    17ae:	7a a9       	ldd	r23, Y+50	; 0x32
    17b0:	8b a9       	ldd	r24, Y+51	; 0x33
    17b2:	9c a9       	ldd	r25, Y+52	; 0x34
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	3f ef       	ldi	r19, 0xFF	; 255
    17b8:	4f e7       	ldi	r20, 0x7F	; 127
    17ba:	57 e4       	ldi	r21, 0x47	; 71
    17bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17c0:	18 16       	cp	r1, r24
    17c2:	4c f5       	brge	.+82     	; 0x1816 <CLCD_voidSendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c4:	6d a9       	ldd	r22, Y+53	; 0x35
    17c6:	7e a9       	ldd	r23, Y+54	; 0x36
    17c8:	8f a9       	ldd	r24, Y+55	; 0x37
    17ca:	98 ad       	ldd	r25, Y+56	; 0x38
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e2       	ldi	r20, 0x20	; 32
    17d2:	51 e4       	ldi	r21, 0x41	; 65
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	bc 01       	movw	r22, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	98 ab       	std	Y+48, r25	; 0x30
    17ea:	8f a7       	std	Y+47, r24	; 0x2f
    17ec:	0f c0       	rjmp	.+30     	; 0x180c <CLCD_voidSendCommand+0x540>
    17ee:	88 ec       	ldi	r24, 0xC8	; 200
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9e a7       	std	Y+46, r25	; 0x2e
    17f4:	8d a7       	std	Y+45, r24	; 0x2d
    17f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    17f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <CLCD_voidSendCommand+0x52e>
    17fe:	9e a7       	std	Y+46, r25	; 0x2e
    1800:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1802:	8f a5       	ldd	r24, Y+47	; 0x2f
    1804:	98 a9       	ldd	r25, Y+48	; 0x30
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	98 ab       	std	Y+48, r25	; 0x30
    180a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180c:	8f a5       	ldd	r24, Y+47	; 0x2f
    180e:	98 a9       	ldd	r25, Y+48	; 0x30
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	69 f7       	brne	.-38     	; 0x17ee <CLCD_voidSendCommand+0x522>
    1814:	14 c0       	rjmp	.+40     	; 0x183e <CLCD_voidSendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1816:	69 a9       	ldd	r22, Y+49	; 0x31
    1818:	7a a9       	ldd	r23, Y+50	; 0x32
    181a:	8b a9       	ldd	r24, Y+51	; 0x33
    181c:	9c a9       	ldd	r25, Y+52	; 0x34
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	98 ab       	std	Y+48, r25	; 0x30
    1828:	8f a7       	std	Y+47, r24	; 0x2f
    182a:	8f a5       	ldd	r24, Y+47	; 0x2f
    182c:	98 a9       	ldd	r25, Y+48	; 0x30
    182e:	9c a7       	std	Y+44, r25	; 0x2c
    1830:	8b a7       	std	Y+43, r24	; 0x2b
    1832:	8b a5       	ldd	r24, Y+43	; 0x2b
    1834:	9c a5       	ldd	r25, Y+44	; 0x2c
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <CLCD_voidSendCommand+0x56a>
    183a:	9c a7       	std	Y+44, r25	; 0x2c
    183c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    183e:	83 e0       	ldi	r24, 0x03	; 3
    1840:	62 e0       	ldi	r22, 0x02	; 2
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a0 e8       	ldi	r26, 0x80	; 128
    184e:	bf e3       	ldi	r27, 0x3F	; 63
    1850:	8f a3       	std	Y+39, r24	; 0x27
    1852:	98 a7       	std	Y+40, r25	; 0x28
    1854:	a9 a7       	std	Y+41, r26	; 0x29
    1856:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	6f a1       	ldd	r22, Y+39	; 0x27
    185a:	78 a5       	ldd	r23, Y+40	; 0x28
    185c:	89 a5       	ldd	r24, Y+41	; 0x29
    185e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4a ef       	ldi	r20, 0xFA	; 250
    1866:	54 e4       	ldi	r21, 0x44	; 68
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8b a3       	std	Y+35, r24	; 0x23
    1872:	9c a3       	std	Y+36, r25	; 0x24
    1874:	ad a3       	std	Y+37, r26	; 0x25
    1876:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1878:	6b a1       	ldd	r22, Y+35	; 0x23
    187a:	7c a1       	ldd	r23, Y+36	; 0x24
    187c:	8d a1       	ldd	r24, Y+37	; 0x25
    187e:	9e a1       	ldd	r25, Y+38	; 0x26
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    188c:	88 23       	and	r24, r24
    188e:	2c f4       	brge	.+10     	; 0x189a <CLCD_voidSendCommand+0x5ce>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9a a3       	std	Y+34, r25	; 0x22
    1896:	89 a3       	std	Y+33, r24	; 0x21
    1898:	3f c0       	rjmp	.+126    	; 0x1918 <CLCD_voidSendCommand+0x64c>
	else if (__tmp > 65535)
    189a:	6b a1       	ldd	r22, Y+35	; 0x23
    189c:	7c a1       	ldd	r23, Y+36	; 0x24
    189e:	8d a1       	ldd	r24, Y+37	; 0x25
    18a0:	9e a1       	ldd	r25, Y+38	; 0x26
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	4c f5       	brge	.+82     	; 0x1904 <CLCD_voidSendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	6f a1       	ldd	r22, Y+39	; 0x27
    18b4:	78 a5       	ldd	r23, Y+40	; 0x28
    18b6:	89 a5       	ldd	r24, Y+41	; 0x29
    18b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9a a3       	std	Y+34, r25	; 0x22
    18d8:	89 a3       	std	Y+33, r24	; 0x21
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <CLCD_voidSendCommand+0x62e>
    18dc:	88 ec       	ldi	r24, 0xC8	; 200
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	98 a3       	std	Y+32, r25	; 0x20
    18e2:	8f 8f       	std	Y+31, r24	; 0x1f
    18e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e6:	98 a1       	ldd	r25, Y+32	; 0x20
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <CLCD_voidSendCommand+0x61c>
    18ec:	98 a3       	std	Y+32, r25	; 0x20
    18ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	89 a1       	ldd	r24, Y+33	; 0x21
    18f2:	9a a1       	ldd	r25, Y+34	; 0x22
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	9a a3       	std	Y+34, r25	; 0x22
    18f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	89 a1       	ldd	r24, Y+33	; 0x21
    18fc:	9a a1       	ldd	r25, Y+34	; 0x22
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	69 f7       	brne	.-38     	; 0x18dc <CLCD_voidSendCommand+0x610>
    1902:	14 c0       	rjmp	.+40     	; 0x192c <CLCD_voidSendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	6b a1       	ldd	r22, Y+35	; 0x23
    1906:	7c a1       	ldd	r23, Y+36	; 0x24
    1908:	8d a1       	ldd	r24, Y+37	; 0x25
    190a:	9e a1       	ldd	r25, Y+38	; 0x26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9a a3       	std	Y+34, r25	; 0x22
    1916:	89 a3       	std	Y+33, r24	; 0x21
    1918:	89 a1       	ldd	r24, Y+33	; 0x21
    191a:	9a a1       	ldd	r25, Y+34	; 0x22
    191c:	9e 8f       	std	Y+30, r25	; 0x1e
    191e:	8d 8f       	std	Y+29, r24	; 0x1d
    1920:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1922:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <CLCD_voidSendCommand+0x658>
    1928:	9e 8f       	std	Y+30, r25	; 0x1e
    192a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 0));
    192c:	fe 01       	movw	r30, r28
    192e:	ed 59       	subi	r30, 0x9D	; 157
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	98 2f       	mov	r25, r24
    1936:	91 70       	andi	r25, 0x01	; 1
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	64 e0       	ldi	r22, 0x04	; 4
    193c:	49 2f       	mov	r20, r25
    193e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 1));
    1942:	fe 01       	movw	r30, r28
    1944:	ed 59       	subi	r30, 0x9D	; 157
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	80 81       	ld	r24, Z
    194a:	86 95       	lsr	r24
    194c:	98 2f       	mov	r25, r24
    194e:	91 70       	andi	r25, 0x01	; 1
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	65 e0       	ldi	r22, 0x05	; 5
    1954:	49 2f       	mov	r20, r25
    1956:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 2));
    195a:	fe 01       	movw	r30, r28
    195c:	ed 59       	subi	r30, 0x9D	; 157
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	80 81       	ld	r24, Z
    1962:	86 95       	lsr	r24
    1964:	86 95       	lsr	r24
    1966:	98 2f       	mov	r25, r24
    1968:	91 70       	andi	r25, 0x01	; 1
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	66 e0       	ldi	r22, 0x06	; 6
    196e:	49 2f       	mov	r20, r25
    1970:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 3));
    1974:	fe 01       	movw	r30, r28
    1976:	ed 59       	subi	r30, 0x9D	; 157
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 81       	ld	r24, Z
    197c:	86 95       	lsr	r24
    197e:	86 95       	lsr	r24
    1980:	86 95       	lsr	r24
    1982:	98 2f       	mov	r25, r24
    1984:	91 70       	andi	r25, 0x01	; 1
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	67 e0       	ldi	r22, 0x07	; 7
    198a:	49 2f       	mov	r20, r25
    198c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e8       	ldi	r26, 0x80	; 128
    1996:	bf e3       	ldi	r27, 0x3F	; 63
    1998:	89 8f       	std	Y+25, r24	; 0x19
    199a:	9a 8f       	std	Y+26, r25	; 0x1a
    199c:	ab 8f       	std	Y+27, r26	; 0x1b
    199e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	69 8d       	ldd	r22, Y+25	; 0x19
    19a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a ef       	ldi	r20, 0xFA	; 250
    19ae:	54 e4       	ldi	r21, 0x44	; 68
    19b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8d 8b       	std	Y+21, r24	; 0x15
    19ba:	9e 8b       	std	Y+22, r25	; 0x16
    19bc:	af 8b       	std	Y+23, r26	; 0x17
    19be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19c0:	6d 89       	ldd	r22, Y+21	; 0x15
    19c2:	7e 89       	ldd	r23, Y+22	; 0x16
    19c4:	8f 89       	ldd	r24, Y+23	; 0x17
    19c6:	98 8d       	ldd	r25, Y+24	; 0x18
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <CLCD_voidSendCommand+0x716>
		__ticks = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9c 8b       	std	Y+20, r25	; 0x14
    19de:	8b 8b       	std	Y+19, r24	; 0x13
    19e0:	3f c0       	rjmp	.+126    	; 0x1a60 <CLCD_voidSendCommand+0x794>
	else if (__tmp > 65535)
    19e2:	6d 89       	ldd	r22, Y+21	; 0x15
    19e4:	7e 89       	ldd	r23, Y+22	; 0x16
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	3f ef       	ldi	r19, 0xFF	; 255
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	57 e4       	ldi	r21, 0x47	; 71
    19f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f6:	18 16       	cp	r1, r24
    19f8:	4c f5       	brge	.+82     	; 0x1a4c <CLCD_voidSendCommand+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fa:	69 8d       	ldd	r22, Y+25	; 0x19
    19fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9c 8b       	std	Y+20, r25	; 0x14
    1a20:	8b 8b       	std	Y+19, r24	; 0x13
    1a22:	0f c0       	rjmp	.+30     	; 0x1a42 <CLCD_voidSendCommand+0x776>
    1a24:	88 ec       	ldi	r24, 0xC8	; 200
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9a 8b       	std	Y+18, r25	; 0x12
    1a2a:	89 8b       	std	Y+17, r24	; 0x11
    1a2c:	89 89       	ldd	r24, Y+17	; 0x11
    1a2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <CLCD_voidSendCommand+0x764>
    1a34:	9a 8b       	std	Y+18, r25	; 0x12
    1a36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a38:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	9c 8b       	std	Y+20, r25	; 0x14
    1a40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	8b 89       	ldd	r24, Y+19	; 0x13
    1a44:	9c 89       	ldd	r25, Y+20	; 0x14
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	69 f7       	brne	.-38     	; 0x1a24 <CLCD_voidSendCommand+0x758>
    1a4a:	14 c0       	rjmp	.+40     	; 0x1a74 <CLCD_voidSendCommand+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a50:	8f 89       	ldd	r24, Y+23	; 0x17
    1a52:	98 8d       	ldd	r25, Y+24	; 0x18
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9c 8b       	std	Y+20, r25	; 0x14
    1a5e:	8b 8b       	std	Y+19, r24	; 0x13
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	98 8b       	std	Y+16, r25	; 0x10
    1a66:	8f 87       	std	Y+15, r24	; 0x0f
    1a68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6a:	98 89       	ldd	r25, Y+16	; 0x10
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <CLCD_voidSendCommand+0x7a0>
    1a70:	98 8b       	std	Y+16, r25	; 0x10
    1a72:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	62 e0       	ldi	r22, 0x02	; 2
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e8       	ldi	r26, 0x80	; 128
    1a84:	bf e3       	ldi	r27, 0x3F	; 63
    1a86:	8b 87       	std	Y+11, r24	; 0x0b
    1a88:	9c 87       	std	Y+12, r25	; 0x0c
    1a8a:	ad 87       	std	Y+13, r26	; 0x0d
    1a8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a ef       	ldi	r20, 0xFA	; 250
    1a9c:	54 e4       	ldi	r21, 0x44	; 68
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8f 83       	std	Y+7, r24	; 0x07
    1aa8:	98 87       	std	Y+8, r25	; 0x08
    1aaa:	a9 87       	std	Y+9, r26	; 0x09
    1aac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aae:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab0:	78 85       	ldd	r23, Y+8	; 0x08
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac2:	88 23       	and	r24, r24
    1ac4:	2c f4       	brge	.+10     	; 0x1ad0 <CLCD_voidSendCommand+0x804>
		__ticks = 1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9e 83       	std	Y+6, r25	; 0x06
    1acc:	8d 83       	std	Y+5, r24	; 0x05
    1ace:	3f c0       	rjmp	.+126    	; 0x1b4e <CLCD_voidSendCommand+0x882>
	else if (__tmp > 65535)
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae4:	18 16       	cp	r1, r24
    1ae6:	4c f5       	brge	.+82     	; 0x1b3a <CLCD_voidSendCommand+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	0f c0       	rjmp	.+30     	; 0x1b30 <CLCD_voidSendCommand+0x864>
    1b12:	88 ec       	ldi	r24, 0xC8	; 200
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <CLCD_voidSendCommand+0x852>
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	8d 81       	ldd	r24, Y+5	; 0x05
    1b28:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	69 f7       	brne	.-38     	; 0x1b12 <CLCD_voidSendCommand+0x846>
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <CLCD_voidSendCommand+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <CLCD_voidSendCommand+0x88e>
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Command);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=1 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b62:	cd 59       	subi	r28, 0x9D	; 157
    1b64:	df 4f       	sbci	r29, 0xFF	; 255
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	08 95       	ret

00001b7a <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	c3 56       	subi	r28, 0x63	; 99
    1b88:	d0 40       	sbci	r29, 0x00	; 0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	fe 01       	movw	r30, r28
    1b96:	ed 59       	subi	r30, 0x9D	; 157
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_HIGH); /* Data Mode RS=1 */
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	41 e0       	ldi	r20, 0x01	; 1
    1ba2:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e1 5a       	subi	r30, 0xA1	; 161
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a0 e8       	ldi	r26, 0x80	; 128
    1bbc:	bf e3       	ldi	r27, 0x3F	; 63
    1bbe:	80 83       	st	Z, r24
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	a2 83       	std	Z+2, r26	; 0x02
    1bc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc6:	8e 01       	movw	r16, r28
    1bc8:	05 5a       	subi	r16, 0xA5	; 165
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e1 5a       	subi	r30, 0xA1	; 161
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	4a ef       	ldi	r20, 0xFA	; 250
    1be0:	54 e4       	ldi	r21, 0x44	; 68
    1be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	f8 01       	movw	r30, r16
    1bec:	80 83       	st	Z, r24
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	a2 83       	std	Z+2, r26	; 0x02
    1bf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e5 5a       	subi	r30, 0xA5	; 165
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	44 f4       	brge	.+16     	; 0x1c22 <CLCD_voidSendData+0xa8>
		__ticks = 1;
    1c12:	fe 01       	movw	r30, r28
    1c14:	e7 5a       	subi	r30, 0xA7	; 167
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	80 83       	st	Z, r24
    1c20:	64 c0       	rjmp	.+200    	; 0x1cea <CLCD_voidSendData+0x170>
	else if (__tmp > 65535)
    1c22:	fe 01       	movw	r30, r28
    1c24:	e5 5a       	subi	r30, 0xA5	; 165
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	0c f0       	brlt	.+2      	; 0x1c42 <CLCD_voidSendData+0xc8>
    1c40:	43 c0       	rjmp	.+134    	; 0x1cc8 <CLCD_voidSendData+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	fe 01       	movw	r30, r28
    1c44:	e1 5a       	subi	r30, 0xA1	; 161
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e2       	ldi	r20, 0x20	; 32
    1c56:	51 e4       	ldi	r21, 0x41	; 65
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8e 01       	movw	r16, r28
    1c62:	07 5a       	subi	r16, 0xA7	; 167
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	f8 01       	movw	r30, r16
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	1f c0       	rjmp	.+62     	; 0x1cb8 <CLCD_voidSendData+0x13e>
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 5a       	subi	r30, 0xA9	; 169
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	88 ec       	ldi	r24, 0xC8	; 200
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e9 5a       	subi	r30, 0xA9	; 169
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <CLCD_voidSendData+0x118>
    1c96:	fe 01       	movw	r30, r28
    1c98:	e9 5a       	subi	r30, 0xA9	; 169
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	de 01       	movw	r26, r28
    1ca2:	a7 5a       	subi	r26, 0xA7	; 167
    1ca4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e7 5a       	subi	r30, 0xA7	; 167
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	11 96       	adiw	r26, 0x01	; 1
    1cb4:	9c 93       	st	X, r25
    1cb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e7 5a       	subi	r30, 0xA7	; 167
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	d1 f6       	brne	.-76     	; 0x1c7a <CLCD_voidSendData+0x100>
    1cc6:	27 c0       	rjmp	.+78     	; 0x1d16 <CLCD_voidSendData+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	8e 01       	movw	r16, r28
    1cca:	07 5a       	subi	r16, 0xA7	; 167
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e5 5a       	subi	r30, 0xA5	; 165
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	80 83       	st	Z, r24
    1cea:	de 01       	movw	r26, r28
    1cec:	ab 5a       	subi	r26, 0xAB	; 171
    1cee:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e7 5a       	subi	r30, 0xA7	; 167
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	8d 93       	st	X+, r24
    1cfc:	9c 93       	st	X, r25
    1cfe:	fe 01       	movw	r30, r28
    1d00:	eb 5a       	subi	r30, 0xAB	; 171
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <CLCD_voidSendData+0x18e>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	eb 5a       	subi	r30, 0xAB	; 171
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
    1d16:	83 e0       	ldi	r24, 0x03	; 3
    1d18:	62 e0       	ldi	r22, 0x02	; 2
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    1d20:	fe 01       	movw	r30, r28
    1d22:	ef 5a       	subi	r30, 0xAF	; 175
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a0 e8       	ldi	r26, 0x80	; 128
    1d2c:	bf e3       	ldi	r27, 0x3F	; 63
    1d2e:	80 83       	st	Z, r24
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	a2 83       	std	Z+2, r26	; 0x02
    1d34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	8e 01       	movw	r16, r28
    1d38:	03 5b       	subi	r16, 0xB3	; 179
    1d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ef 5a       	subi	r30, 0xAF	; 175
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4a ef       	ldi	r20, 0xFA	; 250
    1d50:	54 e4       	ldi	r21, 0x44	; 68
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	80 83       	st	Z, r24
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	a2 83       	std	Z+2, r26	; 0x02
    1d62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d64:	fe 01       	movw	r30, r28
    1d66:	e3 5b       	subi	r30, 0xB3	; 179
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	44 f4       	brge	.+16     	; 0x1d92 <CLCD_voidSendData+0x218>
		__ticks = 1;
    1d82:	fe 01       	movw	r30, r28
    1d84:	e5 5b       	subi	r30, 0xB5	; 181
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	64 c0       	rjmp	.+200    	; 0x1e5a <CLCD_voidSendData+0x2e0>
	else if (__tmp > 65535)
    1d92:	fe 01       	movw	r30, r28
    1d94:	e3 5b       	subi	r30, 0xB3	; 179
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	0c f0       	brlt	.+2      	; 0x1db2 <CLCD_voidSendData+0x238>
    1db0:	43 c0       	rjmp	.+134    	; 0x1e38 <CLCD_voidSendData+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 5a       	subi	r30, 0xAF	; 175
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8e 01       	movw	r16, r28
    1dd2:	05 5b       	subi	r16, 0xB5	; 181
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	f8 01       	movw	r30, r16
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
    1de8:	1f c0       	rjmp	.+62     	; 0x1e28 <CLCD_voidSendData+0x2ae>
    1dea:	fe 01       	movw	r30, r28
    1dec:	e7 5b       	subi	r30, 0xB7	; 183
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	91 83       	std	Z+1, r25	; 0x01
    1df6:	80 83       	st	Z, r24
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e7 5b       	subi	r30, 0xB7	; 183
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <CLCD_voidSendData+0x288>
    1e06:	fe 01       	movw	r30, r28
    1e08:	e7 5b       	subi	r30, 0xB7	; 183
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	de 01       	movw	r26, r28
    1e12:	a5 5b       	subi	r26, 0xB5	; 181
    1e14:	bf 4f       	sbci	r27, 0xFF	; 255
    1e16:	fe 01       	movw	r30, r28
    1e18:	e5 5b       	subi	r30, 0xB5	; 181
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	11 96       	adiw	r26, 0x01	; 1
    1e24:	9c 93       	st	X, r25
    1e26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e5 5b       	subi	r30, 0xB5	; 181
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	d1 f6       	brne	.-76     	; 0x1dea <CLCD_voidSendData+0x270>
    1e36:	27 c0       	rjmp	.+78     	; 0x1e86 <CLCD_voidSendData+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	8e 01       	movw	r16, r28
    1e3a:	05 5b       	subi	r16, 0xB5	; 181
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e3 5b       	subi	r30, 0xB3	; 179
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	f8 01       	movw	r30, r16
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
    1e5a:	de 01       	movw	r26, r28
    1e5c:	a9 5b       	subi	r26, 0xB9	; 185
    1e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e5 5b       	subi	r30, 0xB5	; 181
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	8d 93       	st	X+, r24
    1e6c:	9c 93       	st	X, r25
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e9 5b       	subi	r30, 0xB9	; 185
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <CLCD_voidSendData+0x2fe>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e9 5b       	subi	r30, 0xB9	; 185
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 4));
    1e86:	fe 01       	movw	r30, r28
    1e88:	ed 59       	subi	r30, 0x9D	; 157
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	80 81       	ld	r24, Z
    1e8e:	82 95       	swap	r24
    1e90:	8f 70       	andi	r24, 0x0F	; 15
    1e92:	98 2f       	mov	r25, r24
    1e94:	91 70       	andi	r25, 0x01	; 1
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	64 e0       	ldi	r22, 0x04	; 4
    1e9a:	49 2f       	mov	r20, r25
    1e9c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 5));
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ed 59       	subi	r30, 0x9D	; 157
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	82 95       	swap	r24
    1eaa:	86 95       	lsr	r24
    1eac:	87 70       	andi	r24, 0x07	; 7
    1eae:	98 2f       	mov	r25, r24
    1eb0:	91 70       	andi	r25, 0x01	; 1
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	65 e0       	ldi	r22, 0x05	; 5
    1eb6:	49 2f       	mov	r20, r25
    1eb8:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 6));
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ed 59       	subi	r30, 0x9D	; 157
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	80 81       	ld	r24, Z
    1ec4:	82 95       	swap	r24
    1ec6:	86 95       	lsr	r24
    1ec8:	86 95       	lsr	r24
    1eca:	83 70       	andi	r24, 0x03	; 3
    1ecc:	98 2f       	mov	r25, r24
    1ece:	91 70       	andi	r25, 0x01	; 1
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	66 e0       	ldi	r22, 0x06	; 6
    1ed4:	49 2f       	mov	r20, r25
    1ed6:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 7));
    1eda:	fe 01       	movw	r30, r28
    1edc:	ed 59       	subi	r30, 0x9D	; 157
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	98 2f       	mov	r25, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	99 27       	eor	r25, r25
    1ee8:	99 1f       	adc	r25, r25
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	67 e0       	ldi	r22, 0x07	; 7
    1eee:	49 2f       	mov	r20, r25
    1ef0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ed 5b       	subi	r30, 0xBD	; 189
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a0 e8       	ldi	r26, 0x80	; 128
    1f00:	bf e3       	ldi	r27, 0x3F	; 63
    1f02:	80 83       	st	Z, r24
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	a2 83       	std	Z+2, r26	; 0x02
    1f08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0a:	8e 01       	movw	r16, r28
    1f0c:	01 5c       	subi	r16, 0xC1	; 193
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	ed 5b       	subi	r30, 0xBD	; 189
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a ef       	ldi	r20, 0xFA	; 250
    1f24:	54 e4       	ldi	r21, 0x44	; 68
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	f8 01       	movw	r30, r16
    1f30:	80 83       	st	Z, r24
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	a2 83       	std	Z+2, r26	; 0x02
    1f36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f38:	fe 01       	movw	r30, r28
    1f3a:	ff 96       	adiw	r30, 0x3f	; 63
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e8       	ldi	r20, 0x80	; 128
    1f4a:	5f e3       	ldi	r21, 0x3F	; 63
    1f4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f50:	88 23       	and	r24, r24
    1f52:	2c f4       	brge	.+10     	; 0x1f5e <CLCD_voidSendData+0x3e4>
		__ticks = 1;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9e af       	std	Y+62, r25	; 0x3e
    1f5a:	8d af       	std	Y+61, r24	; 0x3d
    1f5c:	46 c0       	rjmp	.+140    	; 0x1fea <CLCD_voidSendData+0x470>
	else if (__tmp > 65535)
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ff 96       	adiw	r30, 0x3f	; 63
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	64 f5       	brge	.+88     	; 0x1fd2 <CLCD_voidSendData+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	ed 5b       	subi	r30, 0xBD	; 189
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9e af       	std	Y+62, r25	; 0x3e
    1fa6:	8d af       	std	Y+61, r24	; 0x3d
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <CLCD_voidSendData+0x44e>
    1faa:	88 ec       	ldi	r24, 0xC8	; 200
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9c af       	std	Y+60, r25	; 0x3c
    1fb0:	8b af       	std	Y+59, r24	; 0x3b
    1fb2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fb4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <CLCD_voidSendData+0x43c>
    1fba:	9c af       	std	Y+60, r25	; 0x3c
    1fbc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	9e af       	std	Y+62, r25	; 0x3e
    1fc6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fca:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	69 f7       	brne	.-38     	; 0x1faa <CLCD_voidSendData+0x430>
    1fd0:	16 c0       	rjmp	.+44     	; 0x1ffe <CLCD_voidSendData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ff 96       	adiw	r30, 0x3f	; 63
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e af       	std	Y+62, r25	; 0x3e
    1fe8:	8d af       	std	Y+61, r24	; 0x3d
    1fea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fee:	9a af       	std	Y+58, r25	; 0x3a
    1ff0:	89 af       	std	Y+57, r24	; 0x39
    1ff2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ff4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <CLCD_voidSendData+0x47c>
    1ffa:	9a af       	std	Y+58, r25	; 0x3a
    1ffc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1ffe:	83 e0       	ldi	r24, 0x03	; 3
    2000:	62 e0       	ldi	r22, 0x02	; 2
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a0 e8       	ldi	r26, 0x80	; 128
    200e:	bf e3       	ldi	r27, 0x3F	; 63
    2010:	8d ab       	std	Y+53, r24	; 0x35
    2012:	9e ab       	std	Y+54, r25	; 0x36
    2014:	af ab       	std	Y+55, r26	; 0x37
    2016:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2018:	6d a9       	ldd	r22, Y+53	; 0x35
    201a:	7e a9       	ldd	r23, Y+54	; 0x36
    201c:	8f a9       	ldd	r24, Y+55	; 0x37
    201e:	98 ad       	ldd	r25, Y+56	; 0x38
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	4a ef       	ldi	r20, 0xFA	; 250
    2026:	54 e4       	ldi	r21, 0x44	; 68
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	89 ab       	std	Y+49, r24	; 0x31
    2032:	9a ab       	std	Y+50, r25	; 0x32
    2034:	ab ab       	std	Y+51, r26	; 0x33
    2036:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2038:	69 a9       	ldd	r22, Y+49	; 0x31
    203a:	7a a9       	ldd	r23, Y+50	; 0x32
    203c:	8b a9       	ldd	r24, Y+51	; 0x33
    203e:	9c a9       	ldd	r25, Y+52	; 0x34
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e8       	ldi	r20, 0x80	; 128
    2046:	5f e3       	ldi	r21, 0x3F	; 63
    2048:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    204c:	88 23       	and	r24, r24
    204e:	2c f4       	brge	.+10     	; 0x205a <CLCD_voidSendData+0x4e0>
		__ticks = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	98 ab       	std	Y+48, r25	; 0x30
    2056:	8f a7       	std	Y+47, r24	; 0x2f
    2058:	3f c0       	rjmp	.+126    	; 0x20d8 <CLCD_voidSendData+0x55e>
	else if (__tmp > 65535)
    205a:	69 a9       	ldd	r22, Y+49	; 0x31
    205c:	7a a9       	ldd	r23, Y+50	; 0x32
    205e:	8b a9       	ldd	r24, Y+51	; 0x33
    2060:	9c a9       	ldd	r25, Y+52	; 0x34
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	3f ef       	ldi	r19, 0xFF	; 255
    2066:	4f e7       	ldi	r20, 0x7F	; 127
    2068:	57 e4       	ldi	r21, 0x47	; 71
    206a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    206e:	18 16       	cp	r1, r24
    2070:	4c f5       	brge	.+82     	; 0x20c4 <CLCD_voidSendData+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2072:	6d a9       	ldd	r22, Y+53	; 0x35
    2074:	7e a9       	ldd	r23, Y+54	; 0x36
    2076:	8f a9       	ldd	r24, Y+55	; 0x37
    2078:	98 ad       	ldd	r25, Y+56	; 0x38
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e2       	ldi	r20, 0x20	; 32
    2080:	51 e4       	ldi	r21, 0x41	; 65
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	98 ab       	std	Y+48, r25	; 0x30
    2098:	8f a7       	std	Y+47, r24	; 0x2f
    209a:	0f c0       	rjmp	.+30     	; 0x20ba <CLCD_voidSendData+0x540>
    209c:	88 ec       	ldi	r24, 0xC8	; 200
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	9e a7       	std	Y+46, r25	; 0x2e
    20a2:	8d a7       	std	Y+45, r24	; 0x2d
    20a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    20a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <CLCD_voidSendData+0x52e>
    20ac:	9e a7       	std	Y+46, r25	; 0x2e
    20ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b2:	98 a9       	ldd	r25, Y+48	; 0x30
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	98 ab       	std	Y+48, r25	; 0x30
    20b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    20bc:	98 a9       	ldd	r25, Y+48	; 0x30
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	69 f7       	brne	.-38     	; 0x209c <CLCD_voidSendData+0x522>
    20c2:	14 c0       	rjmp	.+40     	; 0x20ec <CLCD_voidSendData+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c4:	69 a9       	ldd	r22, Y+49	; 0x31
    20c6:	7a a9       	ldd	r23, Y+50	; 0x32
    20c8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ca:	9c a9       	ldd	r25, Y+52	; 0x34
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	98 ab       	std	Y+48, r25	; 0x30
    20d6:	8f a7       	std	Y+47, r24	; 0x2f
    20d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20da:	98 a9       	ldd	r25, Y+48	; 0x30
    20dc:	9c a7       	std	Y+44, r25	; 0x2c
    20de:	8b a7       	std	Y+43, r24	; 0x2b
    20e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <CLCD_voidSendData+0x56a>
    20e8:	9c a7       	std	Y+44, r25	; 0x2c
    20ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    20ec:	83 e0       	ldi	r24, 0x03	; 3
    20ee:	62 e0       	ldi	r22, 0x02	; 2
    20f0:	41 e0       	ldi	r20, 0x01	; 1
    20f2:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	a0 e8       	ldi	r26, 0x80	; 128
    20fc:	bf e3       	ldi	r27, 0x3F	; 63
    20fe:	8f a3       	std	Y+39, r24	; 0x27
    2100:	98 a7       	std	Y+40, r25	; 0x28
    2102:	a9 a7       	std	Y+41, r26	; 0x29
    2104:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2106:	6f a1       	ldd	r22, Y+39	; 0x27
    2108:	78 a5       	ldd	r23, Y+40	; 0x28
    210a:	89 a5       	ldd	r24, Y+41	; 0x29
    210c:	9a a5       	ldd	r25, Y+42	; 0x2a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	4a ef       	ldi	r20, 0xFA	; 250
    2114:	54 e4       	ldi	r21, 0x44	; 68
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	8b a3       	std	Y+35, r24	; 0x23
    2120:	9c a3       	std	Y+36, r25	; 0x24
    2122:	ad a3       	std	Y+37, r26	; 0x25
    2124:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2126:	6b a1       	ldd	r22, Y+35	; 0x23
    2128:	7c a1       	ldd	r23, Y+36	; 0x24
    212a:	8d a1       	ldd	r24, Y+37	; 0x25
    212c:	9e a1       	ldd	r25, Y+38	; 0x26
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e8       	ldi	r20, 0x80	; 128
    2134:	5f e3       	ldi	r21, 0x3F	; 63
    2136:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213a:	88 23       	and	r24, r24
    213c:	2c f4       	brge	.+10     	; 0x2148 <CLCD_voidSendData+0x5ce>
		__ticks = 1;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9a a3       	std	Y+34, r25	; 0x22
    2144:	89 a3       	std	Y+33, r24	; 0x21
    2146:	3f c0       	rjmp	.+126    	; 0x21c6 <CLCD_voidSendData+0x64c>
	else if (__tmp > 65535)
    2148:	6b a1       	ldd	r22, Y+35	; 0x23
    214a:	7c a1       	ldd	r23, Y+36	; 0x24
    214c:	8d a1       	ldd	r24, Y+37	; 0x25
    214e:	9e a1       	ldd	r25, Y+38	; 0x26
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	3f ef       	ldi	r19, 0xFF	; 255
    2154:	4f e7       	ldi	r20, 0x7F	; 127
    2156:	57 e4       	ldi	r21, 0x47	; 71
    2158:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215c:	18 16       	cp	r1, r24
    215e:	4c f5       	brge	.+82     	; 0x21b2 <CLCD_voidSendData+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2160:	6f a1       	ldd	r22, Y+39	; 0x27
    2162:	78 a5       	ldd	r23, Y+40	; 0x28
    2164:	89 a5       	ldd	r24, Y+41	; 0x29
    2166:	9a a5       	ldd	r25, Y+42	; 0x2a
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e2       	ldi	r20, 0x20	; 32
    216e:	51 e4       	ldi	r21, 0x41	; 65
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9a a3       	std	Y+34, r25	; 0x22
    2186:	89 a3       	std	Y+33, r24	; 0x21
    2188:	0f c0       	rjmp	.+30     	; 0x21a8 <CLCD_voidSendData+0x62e>
    218a:	88 ec       	ldi	r24, 0xC8	; 200
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	98 a3       	std	Y+32, r25	; 0x20
    2190:	8f 8f       	std	Y+31, r24	; 0x1f
    2192:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2194:	98 a1       	ldd	r25, Y+32	; 0x20
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <CLCD_voidSendData+0x61c>
    219a:	98 a3       	std	Y+32, r25	; 0x20
    219c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219e:	89 a1       	ldd	r24, Y+33	; 0x21
    21a0:	9a a1       	ldd	r25, Y+34	; 0x22
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	9a a3       	std	Y+34, r25	; 0x22
    21a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a8:	89 a1       	ldd	r24, Y+33	; 0x21
    21aa:	9a a1       	ldd	r25, Y+34	; 0x22
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	69 f7       	brne	.-38     	; 0x218a <CLCD_voidSendData+0x610>
    21b0:	14 c0       	rjmp	.+40     	; 0x21da <CLCD_voidSendData+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b2:	6b a1       	ldd	r22, Y+35	; 0x23
    21b4:	7c a1       	ldd	r23, Y+36	; 0x24
    21b6:	8d a1       	ldd	r24, Y+37	; 0x25
    21b8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9a a3       	std	Y+34, r25	; 0x22
    21c4:	89 a3       	std	Y+33, r24	; 0x21
    21c6:	89 a1       	ldd	r24, Y+33	; 0x21
    21c8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ca:	9e 8f       	std	Y+30, r25	; 0x1e
    21cc:	8d 8f       	std	Y+29, r24	; 0x1d
    21ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <CLCD_voidSendData+0x658>
    21d6:	9e 8f       	std	Y+30, r25	; 0x1e
    21d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 0));
    21da:	fe 01       	movw	r30, r28
    21dc:	ed 59       	subi	r30, 0x9D	; 157
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	98 2f       	mov	r25, r24
    21e4:	91 70       	andi	r25, 0x01	; 1
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	64 e0       	ldi	r22, 0x04	; 4
    21ea:	49 2f       	mov	r20, r25
    21ec:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 1));
    21f0:	fe 01       	movw	r30, r28
    21f2:	ed 59       	subi	r30, 0x9D	; 157
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 81       	ld	r24, Z
    21f8:	86 95       	lsr	r24
    21fa:	98 2f       	mov	r25, r24
    21fc:	91 70       	andi	r25, 0x01	; 1
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	65 e0       	ldi	r22, 0x05	; 5
    2202:	49 2f       	mov	r20, r25
    2204:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 2));
    2208:	fe 01       	movw	r30, r28
    220a:	ed 59       	subi	r30, 0x9D	; 157
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	86 95       	lsr	r24
    2212:	86 95       	lsr	r24
    2214:	98 2f       	mov	r25, r24
    2216:	91 70       	andi	r25, 0x01	; 1
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	66 e0       	ldi	r22, 0x06	; 6
    221c:	49 2f       	mov	r20, r25
    221e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 3));
    2222:	fe 01       	movw	r30, r28
    2224:	ed 59       	subi	r30, 0x9D	; 157
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	80 81       	ld	r24, Z
    222a:	86 95       	lsr	r24
    222c:	86 95       	lsr	r24
    222e:	86 95       	lsr	r24
    2230:	98 2f       	mov	r25, r24
    2232:	91 70       	andi	r25, 0x01	; 1
    2234:	82 e0       	ldi	r24, 0x02	; 2
    2236:	67 e0       	ldi	r22, 0x07	; 7
    2238:	49 2f       	mov	r20, r25
    223a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 e8       	ldi	r26, 0x80	; 128
    2244:	bf e3       	ldi	r27, 0x3F	; 63
    2246:	89 8f       	std	Y+25, r24	; 0x19
    2248:	9a 8f       	std	Y+26, r25	; 0x1a
    224a:	ab 8f       	std	Y+27, r26	; 0x1b
    224c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	69 8d       	ldd	r22, Y+25	; 0x19
    2250:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2252:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2254:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a ef       	ldi	r20, 0xFA	; 250
    225c:	54 e4       	ldi	r21, 0x44	; 68
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8d 8b       	std	Y+21, r24	; 0x15
    2268:	9e 8b       	std	Y+22, r25	; 0x16
    226a:	af 8b       	std	Y+23, r26	; 0x17
    226c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    226e:	6d 89       	ldd	r22, Y+21	; 0x15
    2270:	7e 89       	ldd	r23, Y+22	; 0x16
    2272:	8f 89       	ldd	r24, Y+23	; 0x17
    2274:	98 8d       	ldd	r25, Y+24	; 0x18
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <CLCD_voidSendData+0x716>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9c 8b       	std	Y+20, r25	; 0x14
    228c:	8b 8b       	std	Y+19, r24	; 0x13
    228e:	3f c0       	rjmp	.+126    	; 0x230e <CLCD_voidSendData+0x794>
	else if (__tmp > 65535)
    2290:	6d 89       	ldd	r22, Y+21	; 0x15
    2292:	7e 89       	ldd	r23, Y+22	; 0x16
    2294:	8f 89       	ldd	r24, Y+23	; 0x17
    2296:	98 8d       	ldd	r25, Y+24	; 0x18
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <CLCD_voidSendData+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	69 8d       	ldd	r22, Y+25	; 0x19
    22aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9c 8b       	std	Y+20, r25	; 0x14
    22ce:	8b 8b       	std	Y+19, r24	; 0x13
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <CLCD_voidSendData+0x776>
    22d2:	88 ec       	ldi	r24, 0xC8	; 200
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9a 8b       	std	Y+18, r25	; 0x12
    22d8:	89 8b       	std	Y+17, r24	; 0x11
    22da:	89 89       	ldd	r24, Y+17	; 0x11
    22dc:	9a 89       	ldd	r25, Y+18	; 0x12
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <CLCD_voidSendData+0x764>
    22e2:	9a 8b       	std	Y+18, r25	; 0x12
    22e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	8b 89       	ldd	r24, Y+19	; 0x13
    22e8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9c 8b       	std	Y+20, r25	; 0x14
    22ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <CLCD_voidSendData+0x758>
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <CLCD_voidSendData+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	6d 89       	ldd	r22, Y+21	; 0x15
    22fc:	7e 89       	ldd	r23, Y+22	; 0x16
    22fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2300:	98 8d       	ldd	r25, Y+24	; 0x18
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9c 8b       	std	Y+20, r25	; 0x14
    230c:	8b 8b       	std	Y+19, r24	; 0x13
    230e:	8b 89       	ldd	r24, Y+19	; 0x13
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	98 8b       	std	Y+16, r25	; 0x10
    2314:	8f 87       	std	Y+15, r24	; 0x0f
    2316:	8f 85       	ldd	r24, Y+15	; 0x0f
    2318:	98 89       	ldd	r25, Y+16	; 0x10
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <CLCD_voidSendData+0x7a0>
    231e:	98 8b       	std	Y+16, r25	; 0x10
    2320:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
    2322:	83 e0       	ldi	r24, 0x03	; 3
    2324:	62 e0       	ldi	r22, 0x02	; 2
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a0 e8       	ldi	r26, 0x80	; 128
    2332:	bf e3       	ldi	r27, 0x3F	; 63
    2334:	8b 87       	std	Y+11, r24	; 0x0b
    2336:	9c 87       	std	Y+12, r25	; 0x0c
    2338:	ad 87       	std	Y+13, r26	; 0x0d
    233a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	6b 85       	ldd	r22, Y+11	; 0x0b
    233e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2340:	8d 85       	ldd	r24, Y+13	; 0x0d
    2342:	9e 85       	ldd	r25, Y+14	; 0x0e
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a ef       	ldi	r20, 0xFA	; 250
    234a:	54 e4       	ldi	r21, 0x44	; 68
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8f 83       	std	Y+7, r24	; 0x07
    2356:	98 87       	std	Y+8, r25	; 0x08
    2358:	a9 87       	std	Y+9, r26	; 0x09
    235a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    235c:	6f 81       	ldd	r22, Y+7	; 0x07
    235e:	78 85       	ldd	r23, Y+8	; 0x08
    2360:	89 85       	ldd	r24, Y+9	; 0x09
    2362:	9a 85       	ldd	r25, Y+10	; 0x0a
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e8       	ldi	r20, 0x80	; 128
    236a:	5f e3       	ldi	r21, 0x3F	; 63
    236c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2370:	88 23       	and	r24, r24
    2372:	2c f4       	brge	.+10     	; 0x237e <CLCD_voidSendData+0x804>
		__ticks = 1;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	3f c0       	rjmp	.+126    	; 0x23fc <CLCD_voidSendData+0x882>
	else if (__tmp > 65535)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	3f ef       	ldi	r19, 0xFF	; 255
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	57 e4       	ldi	r21, 0x47	; 71
    238e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	4c f5       	brge	.+82     	; 0x23e8 <CLCD_voidSendData+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2396:	6b 85       	ldd	r22, Y+11	; 0x0b
    2398:	7c 85       	ldd	r23, Y+12	; 0x0c
    239a:	8d 85       	ldd	r24, Y+13	; 0x0d
    239c:	9e 85       	ldd	r25, Y+14	; 0x0e
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	0f c0       	rjmp	.+30     	; 0x23de <CLCD_voidSendData+0x864>
    23c0:	88 ec       	ldi	r24, 0xC8	; 200
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9c 83       	std	Y+4, r25	; 0x04
    23c6:	8b 83       	std	Y+3, r24	; 0x03
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <CLCD_voidSendData+0x852>
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	9e 81       	ldd	r25, Y+6	; 0x06
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	9e 83       	std	Y+6, r25	; 0x06
    23dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <CLCD_voidSendData+0x846>
    23e6:	14 c0       	rjmp	.+40     	; 0x2410 <CLCD_voidSendData+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ea:	78 85       	ldd	r23, Y+8	; 0x08
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <CLCD_voidSendData+0x88e>
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_U8Data);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2410:	cd 59       	subi	r28, 0x9D	; 157
    2412:	df 4f       	sbci	r29, 0xFF	; 255
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	2e 97       	sbiw	r28, 0x0e	; 14
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS , E and RW pins as output pins */
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
    243c:	83 e0       	ldi	r24, 0x03	; 3
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
    2446:	83 e0       	ldi	r24, 0x03	; 3
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
    2450:	83 e0       	ldi	r24, 0x03	; 3
    2452:	62 e0       	ldi	r22, 0x02	; 2
    2454:	41 e0       	ldi	r20, 0x01	; 1
    2456:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	a0 ea       	ldi	r26, 0xA0	; 160
    2460:	b1 e4       	ldi	r27, 0x41	; 65
    2462:	8b 87       	std	Y+11, r24	; 0x0b
    2464:	9c 87       	std	Y+12, r25	; 0x0c
    2466:	ad 87       	std	Y+13, r26	; 0x0d
    2468:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a ef       	ldi	r20, 0xFA	; 250
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8f 83       	std	Y+7, r24	; 0x07
    2484:	98 87       	std	Y+8, r25	; 0x08
    2486:	a9 87       	std	Y+9, r26	; 0x09
    2488:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	2c f4       	brge	.+10     	; 0x24ac <CLCD_voidInit+0x84>
		__ticks = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9e 83       	std	Y+6, r25	; 0x06
    24a8:	8d 83       	std	Y+5, r24	; 0x05
    24aa:	3f c0       	rjmp	.+126    	; 0x252a <CLCD_voidInit+0x102>
	else if (__tmp > 65535)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	57 e4       	ldi	r21, 0x47	; 71
    24bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	4c f5       	brge	.+82     	; 0x2516 <CLCD_voidInit+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <CLCD_voidInit+0xe4>
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <CLCD_voidInit+0xd2>
    24fe:	9c 83       	std	Y+4, r25	; 0x04
    2500:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	8d 81       	ldd	r24, Y+5	; 0x05
    250e:	9e 81       	ldd	r25, Y+6	; 0x06
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <CLCD_voidInit+0xc6>
    2514:	14 c0       	rjmp	.+40     	; 0x253e <CLCD_voidInit+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <CLCD_voidInit+0x10e>
    253a:	9a 83       	std	Y+2, r25	; 0x02
    253c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if (CLCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D4_PIN,DIO_u8PIN_OUTPUT);
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	64 e0       	ldi	r22, 0x04	; 4
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D5_PIN,DIO_u8PIN_OUTPUT);
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	65 e0       	ldi	r22, 0x05	; 5
    254c:	41 e0       	ldi	r20, 0x01	; 1
    254e:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D6_PIN,DIO_u8PIN_OUTPUT);
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	66 e0       	ldi	r22, 0x06	; 6
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D7_PIN,DIO_u8PIN_OUTPUT);
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	67 e0       	ldi	r22, 0x07	; 7
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>

	/* Send for 4 bit initialization of LCD  */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2566:	83 e3       	ldi	r24, 0x33	; 51
    2568:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    256c:	82 e3       	ldi	r24, 0x32	; 50
    256e:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2572:	88 e2       	ldi	r24, 0x28	; 40
    2574:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

	CLCD_voidSendCommand(LCD_CURSOR_OFF);    /* cursor off */
    2578:	8c e0       	ldi	r24, 0x0C	; 12
    257a:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
}
    2584:	2e 96       	adiw	r28, 0x0e	; 14
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	00 d0       	rcall	.+0      	; 0x259c <CLCD_voidSendString+0x6>
    259c:	0f 92       	push	r0
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	9b 83       	std	Y+3, r25	; 0x03
    25a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    25a6:	19 82       	std	Y+1, r1	; 0x01
    25a8:	0e c0       	rjmp	.+28     	; 0x25c6 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	fc 01       	movw	r30, r24
    25b6:	e2 0f       	add	r30, r18
    25b8:	f3 1f       	adc	r31, r19
    25ba:	80 81       	ld	r24, Z
    25bc:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <CLCD_voidSendData>
		Local_u8Counter++;
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	8f 5f       	subi	r24, 0xFF	; 255
    25c4:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while(Copy_pcString[Local_u8Counter] != '\0')
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	9b 81       	ldd	r25, Y+3	; 0x03
    25d0:	fc 01       	movw	r30, r24
    25d2:	e2 0f       	add	r30, r18
    25d4:	f3 1f       	adc	r31, r19
    25d6:	80 81       	ld	r24, Z
    25d8:	88 23       	and	r24, r24
    25da:	39 f7       	brne	.-50     	; 0x25aa <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <CLCD_voidGoToXY+0x6>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <CLCD_voidGoToXY+0x8>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8XPos) {
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	3c 83       	std	Y+4, r19	; 0x04
    2600:	2b 83       	std	Y+3, r18	; 0x03
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	91 05       	cpc	r25, r1
    260a:	d1 f0       	breq	.+52     	; 0x2640 <CLCD_voidGoToXY+0x58>
    260c:	2b 81       	ldd	r18, Y+3	; 0x03
    260e:	3c 81       	ldd	r19, Y+4	; 0x04
    2610:	22 30       	cpi	r18, 0x02	; 2
    2612:	31 05       	cpc	r19, r1
    2614:	2c f4       	brge	.+10     	; 0x2620 <CLCD_voidGoToXY+0x38>
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	9c 81       	ldd	r25, Y+4	; 0x04
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	61 f0       	breq	.+24     	; 0x2636 <CLCD_voidGoToXY+0x4e>
    261e:	1d c0       	rjmp	.+58     	; 0x265a <CLCD_voidGoToXY+0x72>
    2620:	2b 81       	ldd	r18, Y+3	; 0x03
    2622:	3c 81       	ldd	r19, Y+4	; 0x04
    2624:	22 30       	cpi	r18, 0x02	; 2
    2626:	31 05       	cpc	r19, r1
    2628:	81 f0       	breq	.+32     	; 0x264a <CLCD_voidGoToXY+0x62>
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	83 30       	cpi	r24, 0x03	; 3
    2630:	91 05       	cpc	r25, r1
    2632:	79 f0       	breq	.+30     	; 0x2652 <CLCD_voidGoToXY+0x6a>
    2634:	12 c0       	rjmp	.+36     	; 0x265a <CLCD_voidGoToXY+0x72>
	case 0:
		CLCD_voidSendCommand(128 + Copy_u8YPos);
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	80 58       	subi	r24, 0x80	; 128
    263a:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
    263e:	0d c0       	rjmp	.+26     	; 0x265a <CLCD_voidGoToXY+0x72>
		break;
	case 1:
		CLCD_voidSendCommand(192 + Copy_u8YPos);
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	80 54       	subi	r24, 0x40	; 64
    2644:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
    2648:	08 c0       	rjmp	.+16     	; 0x265a <CLCD_voidGoToXY+0x72>
		break;
	case 2:
		CLCD_voidSendCommand(256 + Copy_u8YPos);
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
    2650:	04 c0       	rjmp	.+8      	; 0x265a <CLCD_voidGoToXY+0x72>
		break;
	case 3:
		CLCD_voidSendCommand(320 + Copy_u8YPos);
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	80 5c       	subi	r24, 0xC0	; 192
    2656:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
	default:
		//
		break;

	}
}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <CLCD_voidSendStringGoToXY>:

void CLCD_voidSendStringGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos,const char* Copy_pcString)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	00 d0       	rcall	.+0      	; 0x266e <CLCD_voidSendStringGoToXY+0x6>
    266e:	00 d0       	rcall	.+0      	; 0x2670 <CLCD_voidSendStringGoToXY+0x8>
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	6a 83       	std	Y+2, r22	; 0x02
    2678:	5c 83       	std	Y+4, r21	; 0x04
    267a:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	6a 81       	ldd	r22, Y+2	; 0x02
    2680:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
	CLCD_voidSendString(Copy_pcString);
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	9c 81       	ldd	r25, Y+4	; 0x04
    2688:	0e 94 cb 12 	call	0x2596	; 0x2596 <CLCD_voidSendString>


}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	27 97       	sbiw	r28, 0x07	; 7
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
    26b2:	6d 83       	std	Y+5, r22	; 0x05
    26b4:	4e 83       	std	Y+6, r20	; 0x06
    26b6:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress = 0;
    26b8:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator;
	u8SateSpecialCharIndx = 1;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	80 93 91 01 	sts	0x0191, r24

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	80 5c       	subi	r24, 0xC0	; 192
    26d8:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    26dc:	19 82       	std	Y+1, r1	; 0x01
    26de:	0e c0       	rjmp	.+28     	; 0x26fc <CLCD_voidWriteSpecialCharacter+0x62>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ea:	fc 01       	movw	r30, r24
    26ec:	e2 0f       	add	r30, r18
    26ee:	f3 1f       	adc	r31, r19
    26f0:	80 81       	ld	r24, Z
    26f2:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <CLCD_voidSendData>
	u8SateSpecialCharIndx = 1;

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	8f 5f       	subi	r24, 0xFF	; 255
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	88 30       	cpi	r24, 0x08	; 8
    2700:	78 f3       	brcs	.-34     	; 0x26e0 <CLCD_voidWriteSpecialCharacter+0x46>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	CLCD_voidGoToXY(Copy_u8XPos , Copy_u8YPos);
    2702:	8e 81       	ldd	r24, Y+6	; 0x06
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <CLCD_voidSendData>
	u8SateSpecialCharIndx = 0;
    2710:	10 92 91 01 	sts	0x0191, r1
}
    2714:	27 96       	adiw	r28, 0x07	; 7
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	61 97       	sbiw	r28, 0x11	; 17
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	6e 87       	std	Y+14, r22	; 0x0e
    273c:	7f 87       	std	Y+15, r23	; 0x0f
    273e:	88 8b       	std	Y+16, r24	; 0x10
    2740:	99 8b       	std	Y+17, r25	; 0x11
	u8 Local_u8DigitNumber;
	s8 Local_s8Counter = -1 , Local_s8Iterator;
    2742:	8f ef       	ldi	r24, 0xFF	; 255
    2744:	8a 83       	std	Y+2, r24	; 0x02
	u8 Array_Number[CLCD_SIZE_OF_ARRAY];
	do
	{
		Local_s8Counter++;
    2746:	8a 81       	ldd	r24, Y+2	; 0x02
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8DigitNumber = Copy_u32Number % 10;
    274c:	8e 85       	ldd	r24, Y+14	; 0x0e
    274e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2750:	a8 89       	ldd	r26, Y+16	; 0x10
    2752:	b9 89       	ldd	r27, Y+17	; 0x11
    2754:	2a e0       	ldi	r18, 0x0A	; 10
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 44 23 	call	0x4688	; 0x4688 <__udivmodsi4>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8b 83       	std	Y+3, r24	; 0x03
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	28 2f       	mov	r18, r24
    276e:	33 27       	eor	r19, r19
    2770:	27 fd       	sbrc	r18, 7
    2772:	30 95       	com	r19
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	48 2f       	mov	r20, r24
    2778:	40 5d       	subi	r20, 0xD0	; 208
    277a:	ce 01       	movw	r24, r28
    277c:	04 96       	adiw	r24, 0x04	; 4
    277e:	fc 01       	movw	r30, r24
    2780:	e2 0f       	add	r30, r18
    2782:	f3 1f       	adc	r31, r19
    2784:	40 83       	st	Z, r20
		Copy_u32Number /= 10;
    2786:	8e 85       	ldd	r24, Y+14	; 0x0e
    2788:	9f 85       	ldd	r25, Y+15	; 0x0f
    278a:	a8 89       	ldd	r26, Y+16	; 0x10
    278c:	b9 89       	ldd	r27, Y+17	; 0x11
    278e:	2a e0       	ldi	r18, 0x0A	; 10
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	0e 94 44 23 	call	0x4688	; 0x4688 <__udivmodsi4>
    279e:	da 01       	movw	r26, r20
    27a0:	c9 01       	movw	r24, r18
    27a2:	8e 87       	std	Y+14, r24	; 0x0e
    27a4:	9f 87       	std	Y+15, r25	; 0x0f
    27a6:	a8 8b       	std	Y+16, r26	; 0x10
    27a8:	b9 8b       	std	Y+17, r27	; 0x11
	}while(Copy_u32Number != 0);
    27aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    27ae:	a8 89       	ldd	r26, Y+16	; 0x10
    27b0:	b9 89       	ldd	r27, Y+17	; 0x11
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	a1 05       	cpc	r26, r1
    27b6:	b1 05       	cpc	r27, r1
    27b8:	31 f6       	brne	.-116    	; 0x2746 <CLCD_voidSendNumber+0x20>
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	10 c0       	rjmp	.+32     	; 0x27e0 <CLCD_voidSendNumber+0xba>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	28 2f       	mov	r18, r24
    27c4:	33 27       	eor	r19, r19
    27c6:	27 fd       	sbrc	r18, 7
    27c8:	30 95       	com	r19
    27ca:	ce 01       	movw	r24, r28
    27cc:	04 96       	adiw	r24, 0x04	; 4
    27ce:	fc 01       	movw	r30, r24
    27d0:	e2 0f       	add	r30, r18
    27d2:	f3 1f       	adc	r31, r19
    27d4:	80 81       	ld	r24, Z
    27d6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <CLCD_voidSendData>
		Local_s8Counter++;
		Local_u8DigitNumber = Copy_u32Number % 10;
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
		Copy_u32Number /= 10;
	}while(Copy_u32Number != 0);
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	81 50       	subi	r24, 0x01	; 1
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	88 23       	and	r24, r24
    27e4:	6c f7       	brge	.-38     	; 0x27c0 <CLCD_voidSendNumber+0x9a>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
	}
}
    27e6:	61 96       	adiw	r28, 0x11	; 17
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <CLCD_voidIntegerToString>:

void CLCD_voidIntegerToString (u8 value)	// Display certain integer value on screen
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	61 97       	sbiw	r28, 0x11	; 17
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	89 8b       	std	Y+17, r24	; 0x11
	u8 number_str[16];
	itoa(value, number_str, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    280e:	89 89       	ldd	r24, Y+17	; 0x11
    2810:	88 2f       	mov	r24, r24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9e 01       	movw	r18, r28
    2816:	2f 5f       	subi	r18, 0xFF	; 255
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	b9 01       	movw	r22, r18
    281c:	4a e0       	ldi	r20, 0x0A	; 10
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	0e 94 9d 23 	call	0x473a	; 0x473a <itoa>
	CLCD_voidSendString(number_str);
    2824:	ce 01       	movw	r24, r28
    2826:	01 96       	adiw	r24, 0x01	; 1
    2828:	0e 94 cb 12 	call	0x2596	; 0x2596 <CLCD_voidSendString>
}
    282c:	61 96       	adiw	r28, 0x11	; 17
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <CLCD_voidClearScreen>:

void CLCD_voidClearScreen (void)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	0e 94 66 09 	call	0x12cc	; 0x12cc <CLCD_voidSendCommand>
}
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <DCM_voidInit>:
#include "DCM_interface.h"
#include "DCM_private.h"


void DCM_voidInit(void)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
	/* Set The DC motor pins an output pins */
	DIO_u8SetPinDirection(DCM_PORT,DCM_PIN0,DIO_u8PIN_OUTPUT);
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DCM_PORT,DCM_PIN1,DIO_u8PIN_OUTPUT);
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	61 e0       	ldi	r22, 0x01	; 1
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DCM_PORT,PWM_PIN,DIO_u8PIN_OUTPUT);
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	63 e0       	ldi	r22, 0x03	; 3
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>

	/* Set initial value zero for The Dc motor */
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	61 e0       	ldi	r22, 0x01	; 1
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>

	/* Initial the time FAST PWM with Prescaler F_CPU_8 */
	TIMER_voidTimer0Init();
    288c:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <TIMER_voidTimer0Init>
}
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <DCM_voidCW>:

void DCM_voidCW(void)
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_HIGH);
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
}
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <DCM_voidCCW>:


void DCM_voidCCW(void)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_HIGH);
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
}
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <DCM_voidRotate>:

void DCM_voidRotate(u8 Local_u8State , u8 Local_u8Speed)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <DCM_voidRotate+0x6>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	6a 83       	std	Y+2, r22	; 0x02
	 /* Choose DC motor movement */
	if(Local_u8State == CW_STATE)
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	59 f4       	brne	.+22     	; 0x2904 <DCM_voidRotate+0x2a>
	{
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	61 e0       	ldi	r22, 0x01	; 1
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_HIGH);
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    2902:	1b c0       	rjmp	.+54     	; 0x293a <DCM_voidRotate+0x60>
	}
	else if(Local_u8State == CWW_STATE)
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	82 30       	cpi	r24, 0x02	; 2
    2908:	59 f4       	brne	.+22     	; 0x2920 <DCM_voidRotate+0x46>
	{
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_HIGH);
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	61 e0       	ldi	r22, 0x01	; 1
    2918:	41 e0       	ldi	r20, 0x01	; 1
    291a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
    291e:	0d c0       	rjmp	.+26     	; 0x293a <DCM_voidRotate+0x60>
	}
	else if(Local_u8State == STOP_STATE)
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	83 30       	cpi	r24, 0x03	; 3
    2924:	51 f4       	brne	.+20     	; 0x293a <DCM_voidRotate+0x60>
	{
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	61 e0       	ldi	r22, 0x01	; 1
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <DIO_u8SetPinValue>
	}

	/* Choose DC motor speed */
	TIMER_voidTimer0GeneratePWM(Local_u8Speed);
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	88 2f       	mov	r24, r24
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a0 e0       	ldi	r26, 0x00	; 0
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 36 1a 	call	0x346c	; 0x346c <TIMER_voidTimer0GeneratePWM>
}
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <DIO_u8SetPinDirection>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	2a 97       	sbiw	r28, 0x0a	; 10
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	8a 83       	std	Y+2, r24	; 0x02
    2978:	6b 83       	std	Y+3, r22	; 0x03
    297a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    297c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	88 30       	cpi	r24, 0x08	; 8
    2982:	08 f0       	brcs	.+2      	; 0x2986 <DIO_u8SetPinDirection+0x24>
    2984:	b9 c1       	rjmp	.+882    	; 0x2cf8 <DIO_u8SetPinDirection+0x396>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    2986:	8c 81       	ldd	r24, Y+4	; 0x04
    2988:	88 23       	and	r24, r24
    298a:	09 f0       	breq	.+2      	; 0x298e <DIO_u8SetPinDirection+0x2c>
    298c:	77 c0       	rjmp	.+238    	; 0x2a7c <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	3a 87       	std	Y+10, r19	; 0x0a
    2996:	29 87       	std	Y+9, r18	; 0x09
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	81 30       	cpi	r24, 0x01	; 1
    299e:	91 05       	cpc	r25, r1
    29a0:	59 f1       	breq	.+86     	; 0x29f8 <DIO_u8SetPinDirection+0x96>
    29a2:	29 85       	ldd	r18, Y+9	; 0x09
    29a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    29a6:	22 30       	cpi	r18, 0x02	; 2
    29a8:	31 05       	cpc	r19, r1
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <DIO_u8SetPinDirection+0x54>
    29ac:	89 85       	ldd	r24, Y+9	; 0x09
    29ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	69 f0       	breq	.+26     	; 0x29ce <DIO_u8SetPinDirection+0x6c>
    29b4:	60 c0       	rjmp	.+192    	; 0x2a76 <DIO_u8SetPinDirection+0x114>
    29b6:	29 85       	ldd	r18, Y+9	; 0x09
    29b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    29ba:	22 30       	cpi	r18, 0x02	; 2
    29bc:	31 05       	cpc	r19, r1
    29be:	89 f1       	breq	.+98     	; 0x2a22 <DIO_u8SetPinDirection+0xc0>
    29c0:	89 85       	ldd	r24, Y+9	; 0x09
    29c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c4:	83 30       	cpi	r24, 0x03	; 3
    29c6:	91 05       	cpc	r25, r1
    29c8:	09 f4       	brne	.+2      	; 0x29cc <DIO_u8SetPinDirection+0x6a>
    29ca:	40 c0       	rjmp	.+128    	; 0x2a4c <DIO_u8SetPinDirection+0xea>
    29cc:	54 c0       	rjmp	.+168    	; 0x2a76 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    29ce:	aa e3       	ldi	r26, 0x3A	; 58
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	ea e3       	ldi	r30, 0x3A	; 58
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	48 2f       	mov	r20, r24
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	02 2e       	mov	r0, r18
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <DIO_u8SetPinDirection+0x8a>
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	0a 94       	dec	r0
    29ee:	e2 f7       	brpl	.-8      	; 0x29e8 <DIO_u8SetPinDirection+0x86>
    29f0:	80 95       	com	r24
    29f2:	84 23       	and	r24, r20
    29f4:	8c 93       	st	X, r24
    29f6:	82 c1       	rjmp	.+772    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    29f8:	a7 e3       	ldi	r26, 0x37	; 55
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e7 e3       	ldi	r30, 0x37	; 55
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	48 2f       	mov	r20, r24
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	02 2e       	mov	r0, r18
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <DIO_u8SetPinDirection+0xb4>
    2a12:	88 0f       	add	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	0a 94       	dec	r0
    2a18:	e2 f7       	brpl	.-8      	; 0x2a12 <DIO_u8SetPinDirection+0xb0>
    2a1a:	80 95       	com	r24
    2a1c:	84 23       	and	r24, r20
    2a1e:	8c 93       	st	X, r24
    2a20:	6d c1       	rjmp	.+730    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    2a22:	a4 e3       	ldi	r26, 0x34	; 52
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	e4 e3       	ldi	r30, 0x34	; 52
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	48 2f       	mov	r20, r24
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	02 2e       	mov	r0, r18
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <DIO_u8SetPinDirection+0xde>
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	0a 94       	dec	r0
    2a42:	e2 f7       	brpl	.-8      	; 0x2a3c <DIO_u8SetPinDirection+0xda>
    2a44:	80 95       	com	r24
    2a46:	84 23       	and	r24, r20
    2a48:	8c 93       	st	X, r24
    2a4a:	58 c1       	rjmp	.+688    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    2a4c:	a1 e3       	ldi	r26, 0x31	; 49
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e1 e3       	ldi	r30, 0x31	; 49
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	48 2f       	mov	r20, r24
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	02 2e       	mov	r0, r18
    2a64:	02 c0       	rjmp	.+4      	; 0x2a6a <DIO_u8SetPinDirection+0x108>
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	0a 94       	dec	r0
    2a6c:	e2 f7       	brpl	.-8      	; 0x2a66 <DIO_u8SetPinDirection+0x104>
    2a6e:	80 95       	com	r24
    2a70:	84 23       	and	r24, r20
    2a72:	8c 93       	st	X, r24
    2a74:	43 c1       	rjmp	.+646    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	40 c1       	rjmp	.+640    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    2a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7e:	81 30       	cpi	r24, 0x01	; 1
    2a80:	09 f0       	breq	.+2      	; 0x2a84 <DIO_u8SetPinDirection+0x122>
    2a82:	72 c0       	rjmp	.+228    	; 0x2b68 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	38 87       	std	Y+8, r19	; 0x08
    2a8c:	2f 83       	std	Y+7, r18	; 0x07
    2a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a90:	98 85       	ldd	r25, Y+8	; 0x08
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	91 05       	cpc	r25, r1
    2a96:	49 f1       	breq	.+82     	; 0x2aea <DIO_u8SetPinDirection+0x188>
    2a98:	2f 81       	ldd	r18, Y+7	; 0x07
    2a9a:	38 85       	ldd	r19, Y+8	; 0x08
    2a9c:	22 30       	cpi	r18, 0x02	; 2
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	2c f4       	brge	.+10     	; 0x2aac <DIO_u8SetPinDirection+0x14a>
    2aa2:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa4:	98 85       	ldd	r25, Y+8	; 0x08
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	61 f0       	breq	.+24     	; 0x2ac2 <DIO_u8SetPinDirection+0x160>
    2aaa:	5b c0       	rjmp	.+182    	; 0x2b62 <DIO_u8SetPinDirection+0x200>
    2aac:	2f 81       	ldd	r18, Y+7	; 0x07
    2aae:	38 85       	ldd	r19, Y+8	; 0x08
    2ab0:	22 30       	cpi	r18, 0x02	; 2
    2ab2:	31 05       	cpc	r19, r1
    2ab4:	71 f1       	breq	.+92     	; 0x2b12 <DIO_u8SetPinDirection+0x1b0>
    2ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab8:	98 85       	ldd	r25, Y+8	; 0x08
    2aba:	83 30       	cpi	r24, 0x03	; 3
    2abc:	91 05       	cpc	r25, r1
    2abe:	e9 f1       	breq	.+122    	; 0x2b3a <DIO_u8SetPinDirection+0x1d8>
    2ac0:	50 c0       	rjmp	.+160    	; 0x2b62 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    2ac2:	aa e3       	ldi	r26, 0x3A	; 58
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	ea e3       	ldi	r30, 0x3A	; 58
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	48 2f       	mov	r20, r24
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	02 2e       	mov	r0, r18
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <DIO_u8SetPinDirection+0x17e>
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	0a 94       	dec	r0
    2ae2:	e2 f7       	brpl	.-8      	; 0x2adc <DIO_u8SetPinDirection+0x17a>
    2ae4:	84 2b       	or	r24, r20
    2ae6:	8c 93       	st	X, r24
    2ae8:	09 c1       	rjmp	.+530    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    2aea:	a7 e3       	ldi	r26, 0x37	; 55
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	e7 e3       	ldi	r30, 0x37	; 55
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	48 2f       	mov	r20, r24
    2af6:	8b 81       	ldd	r24, Y+3	; 0x03
    2af8:	28 2f       	mov	r18, r24
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	02 2e       	mov	r0, r18
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <DIO_u8SetPinDirection+0x1a6>
    2b04:	88 0f       	add	r24, r24
    2b06:	99 1f       	adc	r25, r25
    2b08:	0a 94       	dec	r0
    2b0a:	e2 f7       	brpl	.-8      	; 0x2b04 <DIO_u8SetPinDirection+0x1a2>
    2b0c:	84 2b       	or	r24, r20
    2b0e:	8c 93       	st	X, r24
    2b10:	f5 c0       	rjmp	.+490    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    2b12:	a4 e3       	ldi	r26, 0x34	; 52
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	e4 e3       	ldi	r30, 0x34	; 52
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	48 2f       	mov	r20, r24
    2b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	02 2e       	mov	r0, r18
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <DIO_u8SetPinDirection+0x1ce>
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	0a 94       	dec	r0
    2b32:	e2 f7       	brpl	.-8      	; 0x2b2c <DIO_u8SetPinDirection+0x1ca>
    2b34:	84 2b       	or	r24, r20
    2b36:	8c 93       	st	X, r24
    2b38:	e1 c0       	rjmp	.+450    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    2b3a:	a1 e3       	ldi	r26, 0x31	; 49
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	e1 e3       	ldi	r30, 0x31	; 49
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	48 2f       	mov	r20, r24
    2b46:	8b 81       	ldd	r24, Y+3	; 0x03
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	02 2e       	mov	r0, r18
    2b52:	02 c0       	rjmp	.+4      	; 0x2b58 <DIO_u8SetPinDirection+0x1f6>
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	0a 94       	dec	r0
    2b5a:	e2 f7       	brpl	.-8      	; 0x2b54 <DIO_u8SetPinDirection+0x1f2>
    2b5c:	84 2b       	or	r24, r20
    2b5e:	8c 93       	st	X, r24
    2b60:	cd c0       	rjmp	.+410    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	ca c0       	rjmp	.+404    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPULLUP)
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6a:	82 30       	cpi	r24, 0x02	; 2
    2b6c:	09 f0       	breq	.+2      	; 0x2b70 <DIO_u8SetPinDirection+0x20e>
    2b6e:	c1 c0       	rjmp	.+386    	; 0x2cf2 <DIO_u8SetPinDirection+0x390>
			{
				switch(Copy_u8Port)
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	28 2f       	mov	r18, r24
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	3e 83       	std	Y+6, r19	; 0x06
    2b78:	2d 83       	std	Y+5, r18	; 0x05
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	81 30       	cpi	r24, 0x01	; 1
    2b80:	91 05       	cpc	r25, r1
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <DIO_u8SetPinDirection+0x224>
    2b84:	3e c0       	rjmp	.+124    	; 0x2c02 <DIO_u8SetPinDirection+0x2a0>
    2b86:	2d 81       	ldd	r18, Y+5	; 0x05
    2b88:	3e 81       	ldd	r19, Y+6	; 0x06
    2b8a:	22 30       	cpi	r18, 0x02	; 2
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <DIO_u8SetPinDirection+0x238>
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	71 f0       	breq	.+28     	; 0x2bb4 <DIO_u8SetPinDirection+0x252>
    2b98:	a9 c0       	rjmp	.+338    	; 0x2cec <DIO_u8SetPinDirection+0x38a>
    2b9a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b9c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b9e:	22 30       	cpi	r18, 0x02	; 2
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <DIO_u8SetPinDirection+0x244>
    2ba4:	55 c0       	rjmp	.+170    	; 0x2c50 <DIO_u8SetPinDirection+0x2ee>
    2ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	83 30       	cpi	r24, 0x03	; 3
    2bac:	91 05       	cpc	r25, r1
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <DIO_u8SetPinDirection+0x250>
    2bb0:	76 c0       	rjmp	.+236    	; 0x2c9e <DIO_u8SetPinDirection+0x33c>
    2bb2:	9c c0       	rjmp	.+312    	; 0x2cec <DIO_u8SetPinDirection+0x38a>
				{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); SET_BIT(PORTA,Copy_u8Pin); break;
    2bb4:	aa e3       	ldi	r26, 0x3A	; 58
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	ea e3       	ldi	r30, 0x3A	; 58
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	48 2f       	mov	r20, r24
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	28 2f       	mov	r18, r24
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <DIO_u8SetPinDirection+0x26e>
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	2a 95       	dec	r18
    2bd2:	e2 f7       	brpl	.-8      	; 0x2bcc <DIO_u8SetPinDirection+0x26a>
    2bd4:	80 95       	com	r24
    2bd6:	84 23       	and	r24, r20
    2bd8:	8c 93       	st	X, r24
    2bda:	ab e3       	ldi	r26, 0x3B	; 59
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	eb e3       	ldi	r30, 0x3B	; 59
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	48 2f       	mov	r20, r24
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	02 2e       	mov	r0, r18
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <DIO_u8SetPinDirection+0x296>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	0a 94       	dec	r0
    2bfa:	e2 f7       	brpl	.-8      	; 0x2bf4 <DIO_u8SetPinDirection+0x292>
    2bfc:	84 2b       	or	r24, r20
    2bfe:	8c 93       	st	X, r24
    2c00:	7d c0       	rjmp	.+250    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); SET_BIT(PORTB,Copy_u8Pin); break;
    2c02:	a7 e3       	ldi	r26, 0x37	; 55
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e7 e3       	ldi	r30, 0x37	; 55
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	48 2f       	mov	r20, r24
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <DIO_u8SetPinDirection+0x2bc>
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	2a 95       	dec	r18
    2c20:	e2 f7       	brpl	.-8      	; 0x2c1a <DIO_u8SetPinDirection+0x2b8>
    2c22:	80 95       	com	r24
    2c24:	84 23       	and	r24, r20
    2c26:	8c 93       	st	X, r24
    2c28:	a8 e3       	ldi	r26, 0x38	; 56
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	e8 e3       	ldi	r30, 0x38	; 56
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	48 2f       	mov	r20, r24
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	02 2e       	mov	r0, r18
    2c40:	02 c0       	rjmp	.+4      	; 0x2c46 <DIO_u8SetPinDirection+0x2e4>
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	0a 94       	dec	r0
    2c48:	e2 f7       	brpl	.-8      	; 0x2c42 <DIO_u8SetPinDirection+0x2e0>
    2c4a:	84 2b       	or	r24, r20
    2c4c:	8c 93       	st	X, r24
    2c4e:	56 c0       	rjmp	.+172    	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); SET_BIT(PORTC,Copy_u8Pin); break;
    2c50:	a4 e3       	ldi	r26, 0x34	; 52
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e4 e3       	ldi	r30, 0x34	; 52
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	48 2f       	mov	r20, r24
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <DIO_u8SetPinDirection+0x30a>
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	2a 95       	dec	r18
    2c6e:	e2 f7       	brpl	.-8      	; 0x2c68 <DIO_u8SetPinDirection+0x306>
    2c70:	80 95       	com	r24
    2c72:	84 23       	and	r24, r20
    2c74:	8c 93       	st	X, r24
    2c76:	a5 e3       	ldi	r26, 0x35	; 53
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e5 e3       	ldi	r30, 0x35	; 53
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	48 2f       	mov	r20, r24
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	28 2f       	mov	r18, r24
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	02 2e       	mov	r0, r18
    2c8e:	02 c0       	rjmp	.+4      	; 0x2c94 <DIO_u8SetPinDirection+0x332>
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	0a 94       	dec	r0
    2c96:	e2 f7       	brpl	.-8      	; 0x2c90 <DIO_u8SetPinDirection+0x32e>
    2c98:	84 2b       	or	r24, r20
    2c9a:	8c 93       	st	X, r24
    2c9c:	2f c0       	rjmp	.+94     	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); SET_BIT(PORTD,Copy_u8Pin); break;
    2c9e:	a1 e3       	ldi	r26, 0x31	; 49
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e1 e3       	ldi	r30, 0x31	; 49
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	48 2f       	mov	r20, r24
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <DIO_u8SetPinDirection+0x358>
    2cb6:	88 0f       	add	r24, r24
    2cb8:	99 1f       	adc	r25, r25
    2cba:	2a 95       	dec	r18
    2cbc:	e2 f7       	brpl	.-8      	; 0x2cb6 <DIO_u8SetPinDirection+0x354>
    2cbe:	80 95       	com	r24
    2cc0:	84 23       	and	r24, r20
    2cc2:	8c 93       	st	X, r24
    2cc4:	a2 e3       	ldi	r26, 0x32	; 50
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	e2 e3       	ldi	r30, 0x32	; 50
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	48 2f       	mov	r20, r24
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	02 2e       	mov	r0, r18
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <DIO_u8SetPinDirection+0x380>
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	0a 94       	dec	r0
    2ce4:	e2 f7       	brpl	.-8      	; 0x2cde <DIO_u8SetPinDirection+0x37c>
    2ce6:	84 2b       	or	r24, r20
    2ce8:	8c 93       	st	X, r24
    2cea:	08 c0       	rjmp	.+16     	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
				default: Local_u8ErrorState=1; break;
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	05 c0       	rjmp	.+10     	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
				}
			}
		else
		{
			Local_u8ErrorState=1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <DIO_u8SetPinDirection+0x39a>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cfe:	2a 96       	adiw	r28, 0x0a	; 10
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <DIO_u8SetPortDirection+0x6>
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <DIO_u8SetPortDirection+0x8>
    2d18:	0f 92       	push	r0
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	8a 83       	std	Y+2, r24	; 0x02
    2d20:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2d22:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	3d 83       	std	Y+5, r19	; 0x05
    2d2c:	2c 83       	std	Y+4, r18	; 0x04
    2d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d30:	9d 81       	ldd	r25, Y+5	; 0x05
    2d32:	81 30       	cpi	r24, 0x01	; 1
    2d34:	91 05       	cpc	r25, r1
    2d36:	d1 f0       	breq	.+52     	; 0x2d6c <DIO_u8SetPortDirection+0x5c>
    2d38:	2c 81       	ldd	r18, Y+4	; 0x04
    2d3a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d3c:	22 30       	cpi	r18, 0x02	; 2
    2d3e:	31 05       	cpc	r19, r1
    2d40:	2c f4       	brge	.+10     	; 0x2d4c <DIO_u8SetPortDirection+0x3c>
    2d42:	8c 81       	ldd	r24, Y+4	; 0x04
    2d44:	9d 81       	ldd	r25, Y+5	; 0x05
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	61 f0       	breq	.+24     	; 0x2d62 <DIO_u8SetPortDirection+0x52>
    2d4a:	1f c0       	rjmp	.+62     	; 0x2d8a <DIO_u8SetPortDirection+0x7a>
    2d4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d50:	22 30       	cpi	r18, 0x02	; 2
    2d52:	31 05       	cpc	r19, r1
    2d54:	81 f0       	breq	.+32     	; 0x2d76 <DIO_u8SetPortDirection+0x66>
    2d56:	8c 81       	ldd	r24, Y+4	; 0x04
    2d58:	9d 81       	ldd	r25, Y+5	; 0x05
    2d5a:	83 30       	cpi	r24, 0x03	; 3
    2d5c:	91 05       	cpc	r25, r1
    2d5e:	81 f0       	breq	.+32     	; 0x2d80 <DIO_u8SetPortDirection+0x70>
    2d60:	14 c0       	rjmp	.+40     	; 0x2d8a <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    2d62:	ea e3       	ldi	r30, 0x3A	; 58
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	80 83       	st	Z, r24
    2d6a:	11 c0       	rjmp	.+34     	; 0x2d8e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    2d6c:	e7 e3       	ldi	r30, 0x37	; 55
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	80 83       	st	Z, r24
    2d74:	0c c0       	rjmp	.+24     	; 0x2d8e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    2d76:	e4 e3       	ldi	r30, 0x34	; 52
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	80 83       	st	Z, r24
    2d7e:	07 c0       	rjmp	.+14     	; 0x2d8e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    2d80:	e1 e3       	ldi	r30, 0x31	; 49
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	80 83       	st	Z, r24
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	cf 91       	pop	r28
    2d9c:	df 91       	pop	r29
    2d9e:	08 95       	ret

00002da0 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	28 97       	sbiw	r28, 0x08	; 8
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	8a 83       	std	Y+2, r24	; 0x02
    2db6:	6b 83       	std	Y+3, r22	; 0x03
    2db8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2dba:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	88 30       	cpi	r24, 0x08	; 8
    2dc0:	08 f0       	brcs	.+2      	; 0x2dc4 <DIO_u8SetPinValue+0x24>
    2dc2:	f4 c0       	rjmp	.+488    	; 0x2fac <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    2dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc6:	88 23       	and	r24, r24
    2dc8:	09 f0       	breq	.+2      	; 0x2dcc <DIO_u8SetPinValue+0x2c>
    2dca:	77 c0       	rjmp	.+238    	; 0x2eba <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	38 87       	std	Y+8, r19	; 0x08
    2dd4:	2f 83       	std	Y+7, r18	; 0x07
    2dd6:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd8:	98 85       	ldd	r25, Y+8	; 0x08
    2dda:	81 30       	cpi	r24, 0x01	; 1
    2ddc:	91 05       	cpc	r25, r1
    2dde:	59 f1       	breq	.+86     	; 0x2e36 <DIO_u8SetPinValue+0x96>
    2de0:	2f 81       	ldd	r18, Y+7	; 0x07
    2de2:	38 85       	ldd	r19, Y+8	; 0x08
    2de4:	22 30       	cpi	r18, 0x02	; 2
    2de6:	31 05       	cpc	r19, r1
    2de8:	2c f4       	brge	.+10     	; 0x2df4 <DIO_u8SetPinValue+0x54>
    2dea:	8f 81       	ldd	r24, Y+7	; 0x07
    2dec:	98 85       	ldd	r25, Y+8	; 0x08
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	69 f0       	breq	.+26     	; 0x2e0c <DIO_u8SetPinValue+0x6c>
    2df2:	60 c0       	rjmp	.+192    	; 0x2eb4 <DIO_u8SetPinValue+0x114>
    2df4:	2f 81       	ldd	r18, Y+7	; 0x07
    2df6:	38 85       	ldd	r19, Y+8	; 0x08
    2df8:	22 30       	cpi	r18, 0x02	; 2
    2dfa:	31 05       	cpc	r19, r1
    2dfc:	89 f1       	breq	.+98     	; 0x2e60 <DIO_u8SetPinValue+0xc0>
    2dfe:	8f 81       	ldd	r24, Y+7	; 0x07
    2e00:	98 85       	ldd	r25, Y+8	; 0x08
    2e02:	83 30       	cpi	r24, 0x03	; 3
    2e04:	91 05       	cpc	r25, r1
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <DIO_u8SetPinValue+0x6a>
    2e08:	40 c0       	rjmp	.+128    	; 0x2e8a <DIO_u8SetPinValue+0xea>
    2e0a:	54 c0       	rjmp	.+168    	; 0x2eb4 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    2e0c:	ab e3       	ldi	r26, 0x3B	; 59
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	eb e3       	ldi	r30, 0x3B	; 59
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	48 2f       	mov	r20, r24
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	02 2e       	mov	r0, r18
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <DIO_u8SetPinValue+0x8a>
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	0a 94       	dec	r0
    2e2c:	e2 f7       	brpl	.-8      	; 0x2e26 <DIO_u8SetPinValue+0x86>
    2e2e:	80 95       	com	r24
    2e30:	84 23       	and	r24, r20
    2e32:	8c 93       	st	X, r24
    2e34:	bd c0       	rjmp	.+378    	; 0x2fb0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    2e36:	a8 e3       	ldi	r26, 0x38	; 56
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	e8 e3       	ldi	r30, 0x38	; 56
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	48 2f       	mov	r20, r24
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	28 2f       	mov	r18, r24
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	02 2e       	mov	r0, r18
    2e4e:	02 c0       	rjmp	.+4      	; 0x2e54 <DIO_u8SetPinValue+0xb4>
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	0a 94       	dec	r0
    2e56:	e2 f7       	brpl	.-8      	; 0x2e50 <DIO_u8SetPinValue+0xb0>
    2e58:	80 95       	com	r24
    2e5a:	84 23       	and	r24, r20
    2e5c:	8c 93       	st	X, r24
    2e5e:	a8 c0       	rjmp	.+336    	; 0x2fb0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    2e60:	a5 e3       	ldi	r26, 0x35	; 53
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e5 e3       	ldi	r30, 0x35	; 53
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	48 2f       	mov	r20, r24
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	02 2e       	mov	r0, r18
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <DIO_u8SetPinValue+0xde>
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	0a 94       	dec	r0
    2e80:	e2 f7       	brpl	.-8      	; 0x2e7a <DIO_u8SetPinValue+0xda>
    2e82:	80 95       	com	r24
    2e84:	84 23       	and	r24, r20
    2e86:	8c 93       	st	X, r24
    2e88:	93 c0       	rjmp	.+294    	; 0x2fb0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    2e8a:	a2 e3       	ldi	r26, 0x32	; 50
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	e2 e3       	ldi	r30, 0x32	; 50
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	48 2f       	mov	r20, r24
    2e96:	8b 81       	ldd	r24, Y+3	; 0x03
    2e98:	28 2f       	mov	r18, r24
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	02 2e       	mov	r0, r18
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <DIO_u8SetPinValue+0x108>
    2ea4:	88 0f       	add	r24, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	0a 94       	dec	r0
    2eaa:	e2 f7       	brpl	.-8      	; 0x2ea4 <DIO_u8SetPinValue+0x104>
    2eac:	80 95       	com	r24
    2eae:	84 23       	and	r24, r20
    2eb0:	8c 93       	st	X, r24
    2eb2:	7e c0       	rjmp	.+252    	; 0x2fb0 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	7b c0       	rjmp	.+246    	; 0x2fb0 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    2eba:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebc:	81 30       	cpi	r24, 0x01	; 1
    2ebe:	09 f0       	breq	.+2      	; 0x2ec2 <DIO_u8SetPinValue+0x122>
    2ec0:	72 c0       	rjmp	.+228    	; 0x2fa6 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	3e 83       	std	Y+6, r19	; 0x06
    2eca:	2d 83       	std	Y+5, r18	; 0x05
    2ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ece:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed0:	81 30       	cpi	r24, 0x01	; 1
    2ed2:	91 05       	cpc	r25, r1
    2ed4:	49 f1       	breq	.+82     	; 0x2f28 <DIO_u8SetPinValue+0x188>
    2ed6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ed8:	3e 81       	ldd	r19, Y+6	; 0x06
    2eda:	22 30       	cpi	r18, 0x02	; 2
    2edc:	31 05       	cpc	r19, r1
    2ede:	2c f4       	brge	.+10     	; 0x2eea <DIO_u8SetPinValue+0x14a>
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	61 f0       	breq	.+24     	; 0x2f00 <DIO_u8SetPinValue+0x160>
    2ee8:	5b c0       	rjmp	.+182    	; 0x2fa0 <DIO_u8SetPinValue+0x200>
    2eea:	2d 81       	ldd	r18, Y+5	; 0x05
    2eec:	3e 81       	ldd	r19, Y+6	; 0x06
    2eee:	22 30       	cpi	r18, 0x02	; 2
    2ef0:	31 05       	cpc	r19, r1
    2ef2:	71 f1       	breq	.+92     	; 0x2f50 <DIO_u8SetPinValue+0x1b0>
    2ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef8:	83 30       	cpi	r24, 0x03	; 3
    2efa:	91 05       	cpc	r25, r1
    2efc:	e9 f1       	breq	.+122    	; 0x2f78 <DIO_u8SetPinValue+0x1d8>
    2efe:	50 c0       	rjmp	.+160    	; 0x2fa0 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    2f00:	ab e3       	ldi	r26, 0x3B	; 59
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	eb e3       	ldi	r30, 0x3B	; 59
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	48 2f       	mov	r20, r24
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	02 2e       	mov	r0, r18
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <DIO_u8SetPinValue+0x17e>
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	0a 94       	dec	r0
    2f20:	e2 f7       	brpl	.-8      	; 0x2f1a <DIO_u8SetPinValue+0x17a>
    2f22:	84 2b       	or	r24, r20
    2f24:	8c 93       	st	X, r24
    2f26:	44 c0       	rjmp	.+136    	; 0x2fb0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    2f28:	a8 e3       	ldi	r26, 0x38	; 56
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	e8 e3       	ldi	r30, 0x38	; 56
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	48 2f       	mov	r20, r24
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	28 2f       	mov	r18, r24
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	02 2e       	mov	r0, r18
    2f40:	02 c0       	rjmp	.+4      	; 0x2f46 <DIO_u8SetPinValue+0x1a6>
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	0a 94       	dec	r0
    2f48:	e2 f7       	brpl	.-8      	; 0x2f42 <DIO_u8SetPinValue+0x1a2>
    2f4a:	84 2b       	or	r24, r20
    2f4c:	8c 93       	st	X, r24
    2f4e:	30 c0       	rjmp	.+96     	; 0x2fb0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    2f50:	a5 e3       	ldi	r26, 0x35	; 53
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	e5 e3       	ldi	r30, 0x35	; 53
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	48 2f       	mov	r20, r24
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	28 2f       	mov	r18, r24
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	02 2e       	mov	r0, r18
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <DIO_u8SetPinValue+0x1ce>
    2f6a:	88 0f       	add	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	0a 94       	dec	r0
    2f70:	e2 f7       	brpl	.-8      	; 0x2f6a <DIO_u8SetPinValue+0x1ca>
    2f72:	84 2b       	or	r24, r20
    2f74:	8c 93       	st	X, r24
    2f76:	1c c0       	rjmp	.+56     	; 0x2fb0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    2f78:	a2 e3       	ldi	r26, 0x32	; 50
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e2 e3       	ldi	r30, 0x32	; 50
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	48 2f       	mov	r20, r24
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	28 2f       	mov	r18, r24
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	02 2e       	mov	r0, r18
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <DIO_u8SetPinValue+0x1f6>
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	0a 94       	dec	r0
    2f98:	e2 f7       	brpl	.-8      	; 0x2f92 <DIO_u8SetPinValue+0x1f2>
    2f9a:	84 2b       	or	r24, r20
    2f9c:	8c 93       	st	X, r24
    2f9e:	08 c0       	rjmp	.+16     	; 0x2fb0 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	05 c0       	rjmp	.+10     	; 0x2fb0 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fb2:	28 96       	adiw	r28, 0x08	; 8
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <DIO_u8SetPortValue+0x6>
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <DIO_u8SetPortValue+0x8>
    2fcc:	0f 92       	push	r0
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	8a 83       	std	Y+2, r24	; 0x02
    2fd4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2fd6:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	28 2f       	mov	r18, r24
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	3d 83       	std	Y+5, r19	; 0x05
    2fe0:	2c 83       	std	Y+4, r18	; 0x04
    2fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe6:	81 30       	cpi	r24, 0x01	; 1
    2fe8:	91 05       	cpc	r25, r1
    2fea:	d1 f0       	breq	.+52     	; 0x3020 <DIO_u8SetPortValue+0x5c>
    2fec:	2c 81       	ldd	r18, Y+4	; 0x04
    2fee:	3d 81       	ldd	r19, Y+5	; 0x05
    2ff0:	22 30       	cpi	r18, 0x02	; 2
    2ff2:	31 05       	cpc	r19, r1
    2ff4:	2c f4       	brge	.+10     	; 0x3000 <DIO_u8SetPortValue+0x3c>
    2ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	61 f0       	breq	.+24     	; 0x3016 <DIO_u8SetPortValue+0x52>
    2ffe:	1f c0       	rjmp	.+62     	; 0x303e <DIO_u8SetPortValue+0x7a>
    3000:	2c 81       	ldd	r18, Y+4	; 0x04
    3002:	3d 81       	ldd	r19, Y+5	; 0x05
    3004:	22 30       	cpi	r18, 0x02	; 2
    3006:	31 05       	cpc	r19, r1
    3008:	81 f0       	breq	.+32     	; 0x302a <DIO_u8SetPortValue+0x66>
    300a:	8c 81       	ldd	r24, Y+4	; 0x04
    300c:	9d 81       	ldd	r25, Y+5	; 0x05
    300e:	83 30       	cpi	r24, 0x03	; 3
    3010:	91 05       	cpc	r25, r1
    3012:	81 f0       	breq	.+32     	; 0x3034 <DIO_u8SetPortValue+0x70>
    3014:	14 c0       	rjmp	.+40     	; 0x303e <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    3016:	eb e3       	ldi	r30, 0x3B	; 59
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	80 83       	st	Z, r24
    301e:	11 c0       	rjmp	.+34     	; 0x3042 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    3020:	e8 e3       	ldi	r30, 0x38	; 56
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	80 83       	st	Z, r24
    3028:	0c c0       	rjmp	.+24     	; 0x3042 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    302a:	e5 e3       	ldi	r30, 0x35	; 53
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	80 83       	st	Z, r24
    3032:	07 c0       	rjmp	.+14     	; 0x3042 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    3034:	e2 e3       	ldi	r30, 0x32	; 50
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	80 83       	st	Z, r24
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3042:	89 81       	ldd	r24, Y+1	; 0x01
}
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	08 95       	ret

00003054 <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	00 d0       	rcall	.+0      	; 0x305a <DIO_u8TogglePinValue+0x6>
    305a:	00 d0       	rcall	.+0      	; 0x305c <DIO_u8TogglePinValue+0x8>
    305c:	0f 92       	push	r0
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	8a 83       	std	Y+2, r24	; 0x02
    3064:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    3066:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	3d 83       	std	Y+5, r19	; 0x05
    3070:	2c 83       	std	Y+4, r18	; 0x04
    3072:	8c 81       	ldd	r24, Y+4	; 0x04
    3074:	9d 81       	ldd	r25, Y+5	; 0x05
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	91 05       	cpc	r25, r1
    307a:	49 f1       	breq	.+82     	; 0x30ce <DIO_u8TogglePinValue+0x7a>
    307c:	2c 81       	ldd	r18, Y+4	; 0x04
    307e:	3d 81       	ldd	r19, Y+5	; 0x05
    3080:	22 30       	cpi	r18, 0x02	; 2
    3082:	31 05       	cpc	r19, r1
    3084:	2c f4       	brge	.+10     	; 0x3090 <DIO_u8TogglePinValue+0x3c>
    3086:	8c 81       	ldd	r24, Y+4	; 0x04
    3088:	9d 81       	ldd	r25, Y+5	; 0x05
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	61 f0       	breq	.+24     	; 0x30a6 <DIO_u8TogglePinValue+0x52>
    308e:	5b c0       	rjmp	.+182    	; 0x3146 <DIO_u8TogglePinValue+0xf2>
    3090:	2c 81       	ldd	r18, Y+4	; 0x04
    3092:	3d 81       	ldd	r19, Y+5	; 0x05
    3094:	22 30       	cpi	r18, 0x02	; 2
    3096:	31 05       	cpc	r19, r1
    3098:	71 f1       	breq	.+92     	; 0x30f6 <DIO_u8TogglePinValue+0xa2>
    309a:	8c 81       	ldd	r24, Y+4	; 0x04
    309c:	9d 81       	ldd	r25, Y+5	; 0x05
    309e:	83 30       	cpi	r24, 0x03	; 3
    30a0:	91 05       	cpc	r25, r1
    30a2:	e9 f1       	breq	.+122    	; 0x311e <DIO_u8TogglePinValue+0xca>
    30a4:	50 c0       	rjmp	.+160    	; 0x3146 <DIO_u8TogglePinValue+0xf2>
	{
	case DIO_u8PORTA: TOOGLE_BIT(PORTA,Copy_u8Pin); break;
    30a6:	ab e3       	ldi	r26, 0x3B	; 59
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	eb e3       	ldi	r30, 0x3B	; 59
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	48 2f       	mov	r20, r24
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	02 2e       	mov	r0, r18
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <DIO_u8TogglePinValue+0x70>
    30c0:	88 0f       	add	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	0a 94       	dec	r0
    30c6:	e2 f7       	brpl	.-8      	; 0x30c0 <DIO_u8TogglePinValue+0x6c>
    30c8:	84 27       	eor	r24, r20
    30ca:	8c 93       	st	X, r24
    30cc:	3e c0       	rjmp	.+124    	; 0x314a <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTB: TOOGLE_BIT(PORTB,Copy_u8Pin); break;
    30ce:	a8 e3       	ldi	r26, 0x38	; 56
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e8 e3       	ldi	r30, 0x38	; 56
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	48 2f       	mov	r20, r24
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	28 2f       	mov	r18, r24
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	02 2e       	mov	r0, r18
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <DIO_u8TogglePinValue+0x98>
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	0a 94       	dec	r0
    30ee:	e2 f7       	brpl	.-8      	; 0x30e8 <DIO_u8TogglePinValue+0x94>
    30f0:	84 27       	eor	r24, r20
    30f2:	8c 93       	st	X, r24
    30f4:	2a c0       	rjmp	.+84     	; 0x314a <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTC: TOOGLE_BIT(PORTC,Copy_u8Pin); break;
    30f6:	a5 e3       	ldi	r26, 0x35	; 53
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	e5 e3       	ldi	r30, 0x35	; 53
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	48 2f       	mov	r20, r24
    3102:	8b 81       	ldd	r24, Y+3	; 0x03
    3104:	28 2f       	mov	r18, r24
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	02 2e       	mov	r0, r18
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <DIO_u8TogglePinValue+0xc0>
    3110:	88 0f       	add	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	0a 94       	dec	r0
    3116:	e2 f7       	brpl	.-8      	; 0x3110 <DIO_u8TogglePinValue+0xbc>
    3118:	84 27       	eor	r24, r20
    311a:	8c 93       	st	X, r24
    311c:	16 c0       	rjmp	.+44     	; 0x314a <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTD: TOOGLE_BIT(PORTD,Copy_u8Pin); break;
    311e:	a2 e3       	ldi	r26, 0x32	; 50
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e2 e3       	ldi	r30, 0x32	; 50
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	48 2f       	mov	r20, r24
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	28 2f       	mov	r18, r24
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	02 2e       	mov	r0, r18
    3136:	02 c0       	rjmp	.+4      	; 0x313c <DIO_u8TogglePinValue+0xe8>
    3138:	88 0f       	add	r24, r24
    313a:	99 1f       	adc	r25, r25
    313c:	0a 94       	dec	r0
    313e:	e2 f7       	brpl	.-8      	; 0x3138 <DIO_u8TogglePinValue+0xe4>
    3140:	84 27       	eor	r24, r20
    3142:	8c 93       	st	X, r24
    3144:	02 c0       	rjmp	.+4      	; 0x314a <DIO_u8TogglePinValue+0xf6>
	default: Local_u8ErrorState=1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    314a:	89 81       	ldd	r24, Y+1	; 0x01
}
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
    3164:	27 97       	sbiw	r28, 0x07	; 7
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	8a 83       	std	Y+2, r24	; 0x02
    3172:	6b 83       	std	Y+3, r22	; 0x03
    3174:	5d 83       	std	Y+5, r21	; 0x05
    3176:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    3178:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    317a:	8c 81       	ldd	r24, Y+4	; 0x04
    317c:	9d 81       	ldd	r25, Y+5	; 0x05
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	09 f4       	brne	.+2      	; 0x3184 <DIO_u8GetPinValue+0x28>
    3182:	78 c0       	rjmp	.+240    	; 0x3274 <DIO_u8GetPinValue+0x118>
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	88 30       	cpi	r24, 0x08	; 8
    3188:	08 f0       	brcs	.+2      	; 0x318c <DIO_u8GetPinValue+0x30>
    318a:	74 c0       	rjmp	.+232    	; 0x3274 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    318c:	8a 81       	ldd	r24, Y+2	; 0x02
    318e:	28 2f       	mov	r18, r24
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	3f 83       	std	Y+7, r19	; 0x07
    3194:	2e 83       	std	Y+6, r18	; 0x06
    3196:	4e 81       	ldd	r20, Y+6	; 0x06
    3198:	5f 81       	ldd	r21, Y+7	; 0x07
    319a:	41 30       	cpi	r20, 0x01	; 1
    319c:	51 05       	cpc	r21, r1
    319e:	59 f1       	breq	.+86     	; 0x31f6 <DIO_u8GetPinValue+0x9a>
    31a0:	8e 81       	ldd	r24, Y+6	; 0x06
    31a2:	9f 81       	ldd	r25, Y+7	; 0x07
    31a4:	82 30       	cpi	r24, 0x02	; 2
    31a6:	91 05       	cpc	r25, r1
    31a8:	34 f4       	brge	.+12     	; 0x31b6 <DIO_u8GetPinValue+0x5a>
    31aa:	2e 81       	ldd	r18, Y+6	; 0x06
    31ac:	3f 81       	ldd	r19, Y+7	; 0x07
    31ae:	21 15       	cp	r18, r1
    31b0:	31 05       	cpc	r19, r1
    31b2:	69 f0       	breq	.+26     	; 0x31ce <DIO_u8GetPinValue+0x72>
    31b4:	5c c0       	rjmp	.+184    	; 0x326e <DIO_u8GetPinValue+0x112>
    31b6:	4e 81       	ldd	r20, Y+6	; 0x06
    31b8:	5f 81       	ldd	r21, Y+7	; 0x07
    31ba:	42 30       	cpi	r20, 0x02	; 2
    31bc:	51 05       	cpc	r21, r1
    31be:	79 f1       	breq	.+94     	; 0x321e <DIO_u8GetPinValue+0xc2>
    31c0:	8e 81       	ldd	r24, Y+6	; 0x06
    31c2:	9f 81       	ldd	r25, Y+7	; 0x07
    31c4:	83 30       	cpi	r24, 0x03	; 3
    31c6:	91 05       	cpc	r25, r1
    31c8:	09 f4       	brne	.+2      	; 0x31cc <DIO_u8GetPinValue+0x70>
    31ca:	3d c0       	rjmp	.+122    	; 0x3246 <DIO_u8GetPinValue+0xea>
    31cc:	50 c0       	rjmp	.+160    	; 0x326e <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    31ce:	e9 e3       	ldi	r30, 0x39	; 57
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	28 2f       	mov	r18, r24
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	88 2f       	mov	r24, r24
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	a9 01       	movw	r20, r18
    31e0:	02 c0       	rjmp	.+4      	; 0x31e6 <DIO_u8GetPinValue+0x8a>
    31e2:	55 95       	asr	r21
    31e4:	47 95       	ror	r20
    31e6:	8a 95       	dec	r24
    31e8:	e2 f7       	brpl	.-8      	; 0x31e2 <DIO_u8GetPinValue+0x86>
    31ea:	ca 01       	movw	r24, r20
    31ec:	81 70       	andi	r24, 0x01	; 1
    31ee:	ec 81       	ldd	r30, Y+4	; 0x04
    31f0:	fd 81       	ldd	r31, Y+5	; 0x05
    31f2:	80 83       	st	Z, r24
    31f4:	41 c0       	rjmp	.+130    	; 0x3278 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    31f6:	e6 e3       	ldi	r30, 0x36	; 54
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	28 2f       	mov	r18, r24
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	88 2f       	mov	r24, r24
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a9 01       	movw	r20, r18
    3208:	02 c0       	rjmp	.+4      	; 0x320e <DIO_u8GetPinValue+0xb2>
    320a:	55 95       	asr	r21
    320c:	47 95       	ror	r20
    320e:	8a 95       	dec	r24
    3210:	e2 f7       	brpl	.-8      	; 0x320a <DIO_u8GetPinValue+0xae>
    3212:	ca 01       	movw	r24, r20
    3214:	81 70       	andi	r24, 0x01	; 1
    3216:	ec 81       	ldd	r30, Y+4	; 0x04
    3218:	fd 81       	ldd	r31, Y+5	; 0x05
    321a:	80 83       	st	Z, r24
    321c:	2d c0       	rjmp	.+90     	; 0x3278 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    321e:	e3 e3       	ldi	r30, 0x33	; 51
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	28 2f       	mov	r18, r24
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	8b 81       	ldd	r24, Y+3	; 0x03
    322a:	88 2f       	mov	r24, r24
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	a9 01       	movw	r20, r18
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <DIO_u8GetPinValue+0xda>
    3232:	55 95       	asr	r21
    3234:	47 95       	ror	r20
    3236:	8a 95       	dec	r24
    3238:	e2 f7       	brpl	.-8      	; 0x3232 <DIO_u8GetPinValue+0xd6>
    323a:	ca 01       	movw	r24, r20
    323c:	81 70       	andi	r24, 0x01	; 1
    323e:	ec 81       	ldd	r30, Y+4	; 0x04
    3240:	fd 81       	ldd	r31, Y+5	; 0x05
    3242:	80 83       	st	Z, r24
    3244:	19 c0       	rjmp	.+50     	; 0x3278 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    3246:	e0 e3       	ldi	r30, 0x30	; 48
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	80 81       	ld	r24, Z
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	8b 81       	ldd	r24, Y+3	; 0x03
    3252:	88 2f       	mov	r24, r24
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	a9 01       	movw	r20, r18
    3258:	02 c0       	rjmp	.+4      	; 0x325e <DIO_u8GetPinValue+0x102>
    325a:	55 95       	asr	r21
    325c:	47 95       	ror	r20
    325e:	8a 95       	dec	r24
    3260:	e2 f7       	brpl	.-8      	; 0x325a <DIO_u8GetPinValue+0xfe>
    3262:	ca 01       	movw	r24, r20
    3264:	81 70       	andi	r24, 0x01	; 1
    3266:	ec 81       	ldd	r30, Y+4	; 0x04
    3268:	fd 81       	ldd	r31, Y+5	; 0x05
    326a:	80 83       	st	Z, r24
    326c:	05 c0       	rjmp	.+10     	; 0x3278 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	89 83       	std	Y+1, r24	; 0x01
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3278:	89 81       	ldd	r24, Y+1	; 0x01
}
    327a:	27 96       	adiw	r28, 0x07	; 7
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port , u8* Copy_pu8Value)
{
    328c:	df 93       	push	r29
    328e:	cf 93       	push	r28
    3290:	00 d0       	rcall	.+0      	; 0x3292 <DIO_u8GetPortValue+0x6>
    3292:	00 d0       	rcall	.+0      	; 0x3294 <DIO_u8GetPortValue+0x8>
    3294:	00 d0       	rcall	.+0      	; 0x3296 <DIO_u8GetPortValue+0xa>
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	8a 83       	std	Y+2, r24	; 0x02
    329c:	7c 83       	std	Y+4, r23	; 0x04
    329e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    32a0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL)
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	09 f4       	brne	.+2      	; 0x32ac <DIO_u8GetPortValue+0x20>
    32aa:	3e c0       	rjmp	.+124    	; 0x3328 <DIO_u8GetPortValue+0x9c>
	{
		switch(Copy_u8Port)
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	28 2f       	mov	r18, r24
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	3e 83       	std	Y+6, r19	; 0x06
    32b4:	2d 83       	std	Y+5, r18	; 0x05
    32b6:	8d 81       	ldd	r24, Y+5	; 0x05
    32b8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ba:	81 30       	cpi	r24, 0x01	; 1
    32bc:	91 05       	cpc	r25, r1
    32be:	e1 f0       	breq	.+56     	; 0x32f8 <DIO_u8GetPortValue+0x6c>
    32c0:	2d 81       	ldd	r18, Y+5	; 0x05
    32c2:	3e 81       	ldd	r19, Y+6	; 0x06
    32c4:	22 30       	cpi	r18, 0x02	; 2
    32c6:	31 05       	cpc	r19, r1
    32c8:	2c f4       	brge	.+10     	; 0x32d4 <DIO_u8GetPortValue+0x48>
    32ca:	8d 81       	ldd	r24, Y+5	; 0x05
    32cc:	9e 81       	ldd	r25, Y+6	; 0x06
    32ce:	00 97       	sbiw	r24, 0x00	; 0
    32d0:	61 f0       	breq	.+24     	; 0x32ea <DIO_u8GetPortValue+0x5e>
    32d2:	27 c0       	rjmp	.+78     	; 0x3322 <DIO_u8GetPortValue+0x96>
    32d4:	2d 81       	ldd	r18, Y+5	; 0x05
    32d6:	3e 81       	ldd	r19, Y+6	; 0x06
    32d8:	22 30       	cpi	r18, 0x02	; 2
    32da:	31 05       	cpc	r19, r1
    32dc:	a1 f0       	breq	.+40     	; 0x3306 <DIO_u8GetPortValue+0x7a>
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	9e 81       	ldd	r25, Y+6	; 0x06
    32e2:	83 30       	cpi	r24, 0x03	; 3
    32e4:	91 05       	cpc	r25, r1
    32e6:	b1 f0       	breq	.+44     	; 0x3314 <DIO_u8GetPortValue+0x88>
    32e8:	1c c0       	rjmp	.+56     	; 0x3322 <DIO_u8GetPortValue+0x96>
		{
		case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    32ea:	e9 e3       	ldi	r30, 0x39	; 57
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	80 81       	ld	r24, Z
    32f0:	eb 81       	ldd	r30, Y+3	; 0x03
    32f2:	fc 81       	ldd	r31, Y+4	; 0x04
    32f4:	80 83       	st	Z, r24
    32f6:	1a c0       	rjmp	.+52     	; 0x332c <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    32f8:	e6 e3       	ldi	r30, 0x36	; 54
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3300:	fc 81       	ldd	r31, Y+4	; 0x04
    3302:	80 83       	st	Z, r24
    3304:	13 c0       	rjmp	.+38     	; 0x332c <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    3306:	e3 e3       	ldi	r30, 0x33	; 51
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	80 81       	ld	r24, Z
    330c:	eb 81       	ldd	r30, Y+3	; 0x03
    330e:	fc 81       	ldd	r31, Y+4	; 0x04
    3310:	80 83       	st	Z, r24
    3312:	0c c0       	rjmp	.+24     	; 0x332c <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    3314:	e0 e3       	ldi	r30, 0x30	; 48
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	80 81       	ld	r24, Z
    331a:	eb 81       	ldd	r30, Y+3	; 0x03
    331c:	fc 81       	ldd	r31, Y+4	; 0x04
    331e:	80 83       	st	Z, r24
    3320:	05 c0       	rjmp	.+10     	; 0x332c <DIO_u8GetPortValue+0xa0>
		default: Local_u8ErrorState = 1; break;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	89 83       	std	Y+1, r24	; 0x01
    3326:	02 c0       	rjmp	.+4      	; 0x332c <DIO_u8GetPortValue+0xa0>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    332c:	89 81       	ldd	r24, Y+1	; 0x01
}
    332e:	26 96       	adiw	r28, 0x06	; 6
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	de bf       	out	0x3e, r29	; 62
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	cd bf       	out	0x3d, r28	; 61
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	08 95       	ret

00003340 <LM35_voidInit>:
#include "LM35_interface.h"
#include "LM35_config.h"
#include "LM35_private.h"

void LM35_voidInit(void)
{
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
	ADC_voidInit();
    3348:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
	DIO_u8SetPinDirection(DIO_u8PORTA,LM35_PIN,DIO_u8PIN_INPUT);
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	62 e0       	ldi	r22, 0x02	; 2
    3350:	40 e0       	ldi	r20, 0x00	; 0
    3352:	0e 94 b1 14 	call	0x2962	; 0x2962 <DIO_u8SetPinDirection>
}
    3356:	cf 91       	pop	r28
    3358:	df 91       	pop	r29
    335a:	08 95       	ret

0000335c <LM35_u8GetTempValue>:
u8 LM35_u8GetTempValue (void)
{
    335c:	df 93       	push	r29
    335e:	cf 93       	push	r28
    3360:	00 d0       	rcall	.+0      	; 0x3362 <LM35_u8GetTempValue+0x6>
    3362:	0f 92       	push	r0
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8TempValue;

	u16 Local_u16ADCValue;

	/* Read ADC channel where the temperature sensor is connected */
	Local_u16ADCValue = ADC_u8GetChannelReading(SENSOR_CHANNEL_ID);
    3368:	82 e0       	ldi	r24, 0x02	; 2
    336a:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8GetChannelReading>
    336e:	9a 83       	std	Y+2, r25	; 0x02
    3370:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	Local_u8TempValue = Local_u16ADCValue / 2.01;
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	9a 81       	ldd	r25, Y+2	; 0x02
    3376:	cc 01       	movw	r24, r24
    3378:	a0 e0       	ldi	r26, 0x00	; 0
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	bc 01       	movw	r22, r24
    337e:	cd 01       	movw	r24, r26
    3380:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	27 ed       	ldi	r18, 0xD7	; 215
    338e:	33 ea       	ldi	r19, 0xA3	; 163
    3390:	40 e0       	ldi	r20, 0x00	; 0
    3392:	50 e4       	ldi	r21, 0x40	; 64
    3394:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	bc 01       	movw	r22, r24
    339e:	cd 01       	movw	r24, r26
    33a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	8b 83       	std	Y+3, r24	; 0x03

	return Local_u8TempValue;
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	08 95       	ret

000033b8 <TIMER_voidTimer0Init>:
u32 TIMER0_f32OVCounterTmp;
f32 TIMER0_u16Prescaller;
u32 TIMER0_f32CounterCTC;
/**********************************************************************************/
void TIMER_voidTimer0Init(void)
{
    33b8:	df 93       	push	r29
    33ba:	cf 93       	push	r28
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE0);
	SET_BIT(TIMSK,TIMSK_OCIE0);

	OCR0=(TIMER0_CTC_OCR0_VALUE-1);
#elif TIMER0_MODE  == TIMER0_MODE_FAST_PWM
	SET_BIT(TCCR0,TCCR0_WGM00);
    33c0:	a3 e5       	ldi	r26, 0x53	; 83
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	e3 e5       	ldi	r30, 0x53	; 83
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	80 64       	ori	r24, 0x40	; 64
    33cc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    33ce:	a3 e5       	ldi	r26, 0x53	; 83
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	e3 e5       	ldi	r30, 0x53	; 83
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	80 81       	ld	r24, Z
    33d8:	88 60       	ori	r24, 0x08	; 8
    33da:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM01);
#elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_TOGGLE
	SET_BIT(TCCR0,TCCR0_COM00);
	CLR_BIT(TCCR0,TCCR0_COM01);
#elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_CLEAR_OC0
	CLR_BIT(TCCR0,TCCR0_COM00);
    33dc:	a3 e5       	ldi	r26, 0x53	; 83
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	e3 e5       	ldi	r30, 0x53	; 83
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	8f 7e       	andi	r24, 0xEF	; 239
    33e8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    33ea:	a3 e5       	ldi	r26, 0x53	; 83
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	e3 e5       	ldi	r30, 0x53	; 83
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	80 62       	ori	r24, 0x20	; 32
    33f6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS00);
	CLR_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS02);
	TIMER0_u16Prescaller=0;
#elif  TIMER0_CLOCK_SELECT == TIMER0_SELECT_CLK_DIV_8
	CLR_BIT(TCCR0,TCCR0_CS00);
    33f8:	a3 e5       	ldi	r26, 0x53	; 83
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	e3 e5       	ldi	r30, 0x53	; 83
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	8e 7f       	andi	r24, 0xFE	; 254
    3404:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    3406:	a3 e5       	ldi	r26, 0x53	; 83
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e3 e5       	ldi	r30, 0x53	; 83
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	82 60       	ori	r24, 0x02	; 2
    3412:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    3414:	a3 e5       	ldi	r26, 0x53	; 83
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	e3 e5       	ldi	r30, 0x53	; 83
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	8b 7f       	andi	r24, 0xFB	; 251
    3420:	8c 93       	st	X, r24
	TIMER0_u16Prescaller=8;
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	a0 e0       	ldi	r26, 0x00	; 0
    3428:	b1 e4       	ldi	r27, 0x41	; 65
    342a:	80 93 ab 01 	sts	0x01AB, r24
    342e:	90 93 ac 01 	sts	0x01AC, r25
    3432:	a0 93 ad 01 	sts	0x01AD, r26
    3436:	b0 93 ae 01 	sts	0x01AE, r27
	SET_BIT(TCCR0,TCCR0_CS00);
	SET_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);
	TIMER0_u16Prescaller=0;
#endif
}
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	08 95       	ret

00003440 <TIMER_voidTimer0Delay>:
/**********************************************************************************/
void TIMER_voidTimer0Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    3440:	df 93       	push	r29
    3442:	cf 93       	push	r28
    3444:	00 d0       	rcall	.+0      	; 0x3446 <TIMER_voidTimer0Delay+0x6>
    3446:	00 d0       	rcall	.+0      	; 0x3448 <TIMER_voidTimer0Delay+0x8>
    3448:	00 d0       	rcall	.+0      	; 0x344a <TIMER_voidTimer0Delay+0xa>
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	69 83       	std	Y+1, r22	; 0x01
    3450:	7a 83       	std	Y+2, r23	; 0x02
    3452:	8b 83       	std	Y+3, r24	; 0x03
    3454:	9c 83       	std	Y+4, r25	; 0x04
    3456:	5e 83       	std	Y+6, r21	; 0x06
    3458:	4d 83       	std	Y+5, r20	; 0x05
#elif TIMER0_MODE  == TIMER0_MODE_CTC
	f32 Local_f32TCTC=((TIMER0_CTC_OCR0_VALUE)*(TIMER0_u16Prescaller/8000UL));
	TIMER0_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	TIMER0_pSetCallBack=Copy_pFun;
#endif
}
    345a:	26 96       	adiw	r28, 0x06	; 6
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	f8 94       	cli
    3460:	de bf       	out	0x3e, r29	; 62
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	cd bf       	out	0x3d, r28	; 61
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	08 95       	ret

0000346c <TIMER_voidTimer0GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer0GeneratePWM(f32 Copy_u8Intensity)
{
    346c:	0f 93       	push	r16
    346e:	1f 93       	push	r17
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	28 97       	sbiw	r28, 0x08	; 8
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	de bf       	out	0x3e, r29	; 62
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	cd bf       	out	0x3d, r28	; 61
    3484:	6d 83       	std	Y+5, r22	; 0x05
    3486:	7e 83       	std	Y+6, r23	; 0x06
    3488:	8f 83       	std	Y+7, r24	; 0x07
    348a:	98 87       	std	Y+8, r25	; 0x08
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(511*Copy_u8Intensity/100);
	OCR0=Copy_u8OCRValue;
#elif TIMER0_MODE  == TIMER0_MODE_FAST_PWM
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(256*Copy_u8Intensity/100);
    348c:	6d 81       	ldd	r22, Y+5	; 0x05
    348e:	7e 81       	ldd	r23, Y+6	; 0x06
    3490:	8f 81       	ldd	r24, Y+7	; 0x07
    3492:	98 85       	ldd	r25, Y+8	; 0x08
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e8       	ldi	r20, 0x80	; 128
    349a:	53 e4       	ldi	r21, 0x43	; 67
    349c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	bc 01       	movw	r22, r24
    34a6:	cd 01       	movw	r24, r26
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	48 ec       	ldi	r20, 0xC8	; 200
    34ae:	52 e4       	ldi	r21, 0x42	; 66
    34b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	89 83       	std	Y+1, r24	; 0x01
    34ba:	9a 83       	std	Y+2, r25	; 0x02
    34bc:	ab 83       	std	Y+3, r26	; 0x03
    34be:	bc 83       	std	Y+4, r27	; 0x04
	OCR0=Copy_u8OCRValue;
    34c0:	0c e5       	ldi	r16, 0x5C	; 92
    34c2:	10 e0       	ldi	r17, 0x00	; 0
    34c4:	69 81       	ldd	r22, Y+1	; 0x01
    34c6:	7a 81       	ldd	r23, Y+2	; 0x02
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	9c 81       	ldd	r25, Y+4	; 0x04
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	f8 01       	movw	r30, r16
    34d6:	80 83       	st	Z, r24
#endif
}
    34d8:	28 96       	adiw	r28, 0x08	; 8
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	de bf       	out	0x3e, r29	; 62
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	cd bf       	out	0x3d, r28	; 61
    34e4:	cf 91       	pop	r28
    34e6:	df 91       	pop	r29
    34e8:	1f 91       	pop	r17
    34ea:	0f 91       	pop	r16
    34ec:	08 95       	ret

000034ee <__vector_11>:
/**********************************************************************************/
void __vector_11 (void)
{
    34ee:	1f 92       	push	r1
    34f0:	0f 92       	push	r0
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	0f 92       	push	r0
    34f6:	11 24       	eor	r1, r1
    34f8:	2f 93       	push	r18
    34fa:	3f 93       	push	r19
    34fc:	4f 93       	push	r20
    34fe:	5f 93       	push	r21
    3500:	6f 93       	push	r22
    3502:	7f 93       	push	r23
    3504:	8f 93       	push	r24
    3506:	9f 93       	push	r25
    3508:	af 93       	push	r26
    350a:	bf 93       	push	r27
    350c:	ef 93       	push	r30
    350e:	ff 93       	push	r31
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    3518:	80 91 92 01 	lds	r24, 0x0192
    351c:	90 91 93 01 	lds	r25, 0x0193
    3520:	01 96       	adiw	r24, 0x01	; 1
    3522:	90 93 93 01 	sts	0x0193, r25
    3526:	80 93 92 01 	sts	0x0192, r24
	if(TIMER0_f32OVCounterTmp==Local_u16Counter)
    352a:	80 91 92 01 	lds	r24, 0x0192
    352e:	90 91 93 01 	lds	r25, 0x0193
    3532:	9c 01       	movw	r18, r24
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	80 91 a7 01 	lds	r24, 0x01A7
    353c:	90 91 a8 01 	lds	r25, 0x01A8
    3540:	a0 91 a9 01 	lds	r26, 0x01A9
    3544:	b0 91 aa 01 	lds	r27, 0x01AA
    3548:	28 17       	cp	r18, r24
    354a:	39 07       	cpc	r19, r25
    354c:	4a 07       	cpc	r20, r26
    354e:	5b 07       	cpc	r21, r27
    3550:	a1 f4       	brne	.+40     	; 0x357a <__vector_11+0x8c>
	{
		TCNT0=TIMER0_f32PreloodValue;
    3552:	e2 e5       	ldi	r30, 0x52	; 82
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	80 91 a3 01 	lds	r24, 0x01A3
    355a:	90 91 a4 01 	lds	r25, 0x01A4
    355e:	a0 91 a5 01 	lds	r26, 0x01A5
    3562:	b0 91 a6 01 	lds	r27, 0x01A6
    3566:	80 83       	st	Z, r24
		TIMER0_pSetCallBack();
    3568:	e0 91 9a 01 	lds	r30, 0x019A
    356c:	f0 91 9b 01 	lds	r31, 0x019B
    3570:	09 95       	icall
		Local_u16Counter=0;
    3572:	10 92 93 01 	sts	0x0193, r1
    3576:	10 92 92 01 	sts	0x0192, r1
	}
}
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	ff 91       	pop	r31
    3580:	ef 91       	pop	r30
    3582:	bf 91       	pop	r27
    3584:	af 91       	pop	r26
    3586:	9f 91       	pop	r25
    3588:	8f 91       	pop	r24
    358a:	7f 91       	pop	r23
    358c:	6f 91       	pop	r22
    358e:	5f 91       	pop	r21
    3590:	4f 91       	pop	r20
    3592:	3f 91       	pop	r19
    3594:	2f 91       	pop	r18
    3596:	0f 90       	pop	r0
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	0f 90       	pop	r0
    359c:	1f 90       	pop	r1
    359e:	18 95       	reti

000035a0 <__vector_10>:
void __vector_10 (void)
{
    35a0:	1f 92       	push	r1
    35a2:	0f 92       	push	r0
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	0f 92       	push	r0
    35a8:	11 24       	eor	r1, r1
    35aa:	2f 93       	push	r18
    35ac:	3f 93       	push	r19
    35ae:	4f 93       	push	r20
    35b0:	5f 93       	push	r21
    35b2:	6f 93       	push	r22
    35b4:	7f 93       	push	r23
    35b6:	8f 93       	push	r24
    35b8:	9f 93       	push	r25
    35ba:	af 93       	push	r26
    35bc:	bf 93       	push	r27
    35be:	ef 93       	push	r30
    35c0:	ff 93       	push	r31
    35c2:	df 93       	push	r29
    35c4:	cf 93       	push	r28
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u8Counter=0;
	Local_u8Counter++;
    35ca:	80 91 94 01 	lds	r24, 0x0194
    35ce:	90 91 95 01 	lds	r25, 0x0195
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	90 93 95 01 	sts	0x0195, r25
    35d8:	80 93 94 01 	sts	0x0194, r24
	if(TIMER0_f32CounterCTC==Local_u8Counter)
    35dc:	80 91 94 01 	lds	r24, 0x0194
    35e0:	90 91 95 01 	lds	r25, 0x0195
    35e4:	9c 01       	movw	r18, r24
    35e6:	40 e0       	ldi	r20, 0x00	; 0
    35e8:	50 e0       	ldi	r21, 0x00	; 0
    35ea:	80 91 b7 01 	lds	r24, 0x01B7
    35ee:	90 91 b8 01 	lds	r25, 0x01B8
    35f2:	a0 91 b9 01 	lds	r26, 0x01B9
    35f6:	b0 91 ba 01 	lds	r27, 0x01BA
    35fa:	28 17       	cp	r18, r24
    35fc:	39 07       	cpc	r19, r25
    35fe:	4a 07       	cpc	r20, r26
    3600:	5b 07       	cpc	r21, r27
    3602:	49 f4       	brne	.+18     	; 0x3616 <__vector_10+0x76>
	{
		Local_u8Counter=0;
    3604:	10 92 95 01 	sts	0x0195, r1
    3608:	10 92 94 01 	sts	0x0194, r1
		TIMER0_pSetCallBack();
    360c:	e0 91 9a 01 	lds	r30, 0x019A
    3610:	f0 91 9b 01 	lds	r31, 0x019B
    3614:	09 95       	icall
	}
}
    3616:	cf 91       	pop	r28
    3618:	df 91       	pop	r29
    361a:	ff 91       	pop	r31
    361c:	ef 91       	pop	r30
    361e:	bf 91       	pop	r27
    3620:	af 91       	pop	r26
    3622:	9f 91       	pop	r25
    3624:	8f 91       	pop	r24
    3626:	7f 91       	pop	r23
    3628:	6f 91       	pop	r22
    362a:	5f 91       	pop	r21
    362c:	4f 91       	pop	r20
    362e:	3f 91       	pop	r19
    3630:	2f 91       	pop	r18
    3632:	0f 90       	pop	r0
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	0f 90       	pop	r0
    3638:	1f 90       	pop	r1
    363a:	18 95       	reti

0000363c <TIMER_voidTimer2Init>:
f32 TIMER2_u16Prescaller;
u32 TIMER2_f32CounterCTC;
/**********************************************************************************/

void TIMER_voidTimer2Init(void)
{
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE2);
	CLR_BIT(TIMSK,TIMSK_OCIE2);

	TCNT2=TIMER2_f32PreloodValue;
#elif TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	SET_BIT(TCCR2,TCCR2_WGM20);
    3644:	a5 e4       	ldi	r26, 0x45	; 69
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	e5 e4       	ldi	r30, 0x45	; 69
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	80 81       	ld	r24, Z
    364e:	80 64       	ori	r24, 0x40	; 64
    3650:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_WGM21);
    3652:	a5 e4       	ldi	r26, 0x45	; 69
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	e5 e4       	ldi	r30, 0x45	; 69
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	87 7f       	andi	r24, 0xF7	; 247
    365e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_COM21);
#elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_TOGGLE
	SET_BIT(TCCR2,TCCR2_COM20);
	CLR_BIT(TCCR2,TCCR2_COM21);
#elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_CLEAR_OC2
	CLR_BIT(TCCR2,TCCR2_COM20);
    3660:	a5 e4       	ldi	r26, 0x45	; 69
    3662:	b0 e0       	ldi	r27, 0x00	; 0
    3664:	e5 e4       	ldi	r30, 0x45	; 69
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	80 81       	ld	r24, Z
    366a:	8f 7e       	andi	r24, 0xEF	; 239
    366c:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_COM21);
    366e:	a5 e4       	ldi	r26, 0x45	; 69
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	e5 e4       	ldi	r30, 0x45	; 69
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	80 62       	ori	r24, 0x20	; 32
    367a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS20);
	CLR_BIT(TCCR2,TCCR2_CS21);
	SET_BIT(TCCR2,TCCR2_CS22);
	TIMER2_u16Prescaller=256;
#elif  TIMER2_CLOCK_SELECT == TIMER2_SELECT_CLK_DIV_1024
	SET_BIT(TCCR2,TCCR2_CS20);
    367c:	a5 e4       	ldi	r26, 0x45	; 69
    367e:	b0 e0       	ldi	r27, 0x00	; 0
    3680:	e5 e4       	ldi	r30, 0x45	; 69
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	81 60       	ori	r24, 0x01	; 1
    3688:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS21);
    368a:	a5 e4       	ldi	r26, 0x45	; 69
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	e5 e4       	ldi	r30, 0x45	; 69
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	80 81       	ld	r24, Z
    3694:	8d 7f       	andi	r24, 0xFD	; 253
    3696:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS22);
    3698:	a5 e4       	ldi	r26, 0x45	; 69
    369a:	b0 e0       	ldi	r27, 0x00	; 0
    369c:	e5 e4       	ldi	r30, 0x45	; 69
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	80 81       	ld	r24, Z
    36a2:	84 60       	ori	r24, 0x04	; 4
    36a4:	8c 93       	st	X, r24
	TIMER2_u16Prescaller=1024;
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	a0 e8       	ldi	r26, 0x80	; 128
    36ac:	b4 e4       	ldi	r27, 0x44	; 68
    36ae:	80 93 b3 01 	sts	0x01B3, r24
    36b2:	90 93 b4 01 	sts	0x01B4, r25
    36b6:	a0 93 b5 01 	sts	0x01B5, r26
    36ba:	b0 93 b6 01 	sts	0x01B6, r27
	SET_BIT(TCCR2,TCCR2_CS20);
	SET_BIT(TCCR2,TCCR2_CS21);
	SET_BIT(TCCR2,TCCR2_CS22);
	TIMER2_u16Prescaller=0;
#endif
}
    36be:	cf 91       	pop	r28
    36c0:	df 91       	pop	r29
    36c2:	08 95       	ret

000036c4 <TIMER_voidTimer2Delay>:
/**********************************************************************************/
void TIMER_voidTimer2Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	00 d0       	rcall	.+0      	; 0x36ca <TIMER_voidTimer2Delay+0x6>
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <TIMER_voidTimer2Delay+0x8>
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <TIMER_voidTimer2Delay+0xa>
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	69 83       	std	Y+1, r22	; 0x01
    36d4:	7a 83       	std	Y+2, r23	; 0x02
    36d6:	8b 83       	std	Y+3, r24	; 0x03
    36d8:	9c 83       	std	Y+4, r25	; 0x04
    36da:	5e 83       	std	Y+6, r21	; 0x06
    36dc:	4d 83       	std	Y+5, r20	; 0x05
#elif TIMER2_MODE  == TIMER2_MODE_CTC
	f32 Local_f32TCTC=((TIMER2_CTC_OCR2_VALUE)*(TIMER2_u16Prescaller/8000UL));
	TIMER2_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	TIMER2_pSetCallBack=Copy_pFun;
#endif
}
    36de:	26 96       	adiw	r28, 0x06	; 6
    36e0:	0f b6       	in	r0, 0x3f	; 63
    36e2:	f8 94       	cli
    36e4:	de bf       	out	0x3e, r29	; 62
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	cd bf       	out	0x3d, r28	; 61
    36ea:	cf 91       	pop	r28
    36ec:	df 91       	pop	r29
    36ee:	08 95       	ret

000036f0 <TIMER_voidTimer2GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer2GeneratePWM(f32 Copy_u8Intensity)
{
    36f0:	0f 93       	push	r16
    36f2:	1f 93       	push	r17
    36f4:	df 93       	push	r29
    36f6:	cf 93       	push	r28
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	28 97       	sbiw	r28, 0x08	; 8
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	6d 83       	std	Y+5, r22	; 0x05
    370a:	7e 83       	std	Y+6, r23	; 0x06
    370c:	8f 83       	std	Y+7, r24	; 0x07
    370e:	98 87       	std	Y+8, r25	; 0x08
#if TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    3710:	6d 81       	ldd	r22, Y+5	; 0x05
    3712:	7e 81       	ldd	r23, Y+6	; 0x06
    3714:	8f 81       	ldd	r24, Y+7	; 0x07
    3716:	98 85       	ldd	r25, Y+8	; 0x08
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e8       	ldi	r19, 0x80	; 128
    371c:	4f ef       	ldi	r20, 0xFF	; 255
    371e:	53 e4       	ldi	r21, 0x43	; 67
    3720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	bc 01       	movw	r22, r24
    372a:	cd 01       	movw	r24, r26
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	48 ec       	ldi	r20, 0xC8	; 200
    3732:	52 e4       	ldi	r21, 0x42	; 66
    3734:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	9a 83       	std	Y+2, r25	; 0x02
    3740:	ab 83       	std	Y+3, r26	; 0x03
    3742:	bc 83       	std	Y+4, r27	; 0x04
	OCR2=Copy_u8OCRValue;
    3744:	03 e4       	ldi	r16, 0x43	; 67
    3746:	10 e0       	ldi	r17, 0x00	; 0
    3748:	69 81       	ldd	r22, Y+1	; 0x01
    374a:	7a 81       	ldd	r23, Y+2	; 0x02
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	9c 81       	ldd	r25, Y+4	; 0x04
    3750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	f8 01       	movw	r30, r16
    375a:	80 83       	st	Z, r24
#elif TIMER2_MODE  == TIMER2_MODE_FAST_PWM
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	OCR2=Copy_u8OCRValue;
#endif
}
    375c:	28 96       	adiw	r28, 0x08	; 8
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	f8 94       	cli
    3762:	de bf       	out	0x3e, r29	; 62
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	1f 91       	pop	r17
    376e:	0f 91       	pop	r16
    3770:	08 95       	ret

00003772 <__vector_4>:
/**********************************************************************************/
void __vector_4 (void)
{
    3772:	1f 92       	push	r1
    3774:	0f 92       	push	r0
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	0f 92       	push	r0
    377a:	11 24       	eor	r1, r1
    377c:	2f 93       	push	r18
    377e:	3f 93       	push	r19
    3780:	4f 93       	push	r20
    3782:	5f 93       	push	r21
    3784:	6f 93       	push	r22
    3786:	7f 93       	push	r23
    3788:	8f 93       	push	r24
    378a:	9f 93       	push	r25
    378c:	af 93       	push	r26
    378e:	bf 93       	push	r27
    3790:	ef 93       	push	r30
    3792:	ff 93       	push	r31
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    379c:	80 91 96 01 	lds	r24, 0x0196
    37a0:	90 91 97 01 	lds	r25, 0x0197
    37a4:	01 96       	adiw	r24, 0x01	; 1
    37a6:	90 93 97 01 	sts	0x0197, r25
    37aa:	80 93 96 01 	sts	0x0196, r24
	if(TIMER2_f32OVCounter==Local_u16Counter)
    37ae:	80 91 96 01 	lds	r24, 0x0196
    37b2:	90 91 97 01 	lds	r25, 0x0197
    37b6:	9c 01       	movw	r18, r24
    37b8:	40 e0       	ldi	r20, 0x00	; 0
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	80 91 af 01 	lds	r24, 0x01AF
    37c0:	90 91 b0 01 	lds	r25, 0x01B0
    37c4:	a0 91 b1 01 	lds	r26, 0x01B1
    37c8:	b0 91 b2 01 	lds	r27, 0x01B2
    37cc:	28 17       	cp	r18, r24
    37ce:	39 07       	cpc	r19, r25
    37d0:	4a 07       	cpc	r20, r26
    37d2:	5b 07       	cpc	r21, r27
    37d4:	a1 f4       	brne	.+40     	; 0x37fe <__vector_4+0x8c>
	{
		TCNT2=TIMER2_f32PreloodValue;
    37d6:	e4 e4       	ldi	r30, 0x44	; 68
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 91 bf 01 	lds	r24, 0x01BF
    37de:	90 91 c0 01 	lds	r25, 0x01C0
    37e2:	a0 91 c1 01 	lds	r26, 0x01C1
    37e6:	b0 91 c2 01 	lds	r27, 0x01C2
    37ea:	80 83       	st	Z, r24
		TIMER2_pSetCallBack();
    37ec:	e0 91 9e 01 	lds	r30, 0x019E
    37f0:	f0 91 9f 01 	lds	r31, 0x019F
    37f4:	09 95       	icall
		Local_u16Counter=0;
    37f6:	10 92 97 01 	sts	0x0197, r1
    37fa:	10 92 96 01 	sts	0x0196, r1
	}
}
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	ff 91       	pop	r31
    3804:	ef 91       	pop	r30
    3806:	bf 91       	pop	r27
    3808:	af 91       	pop	r26
    380a:	9f 91       	pop	r25
    380c:	8f 91       	pop	r24
    380e:	7f 91       	pop	r23
    3810:	6f 91       	pop	r22
    3812:	5f 91       	pop	r21
    3814:	4f 91       	pop	r20
    3816:	3f 91       	pop	r19
    3818:	2f 91       	pop	r18
    381a:	0f 90       	pop	r0
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	0f 90       	pop	r0
    3820:	1f 90       	pop	r1
    3822:	18 95       	reti

00003824 <__vector_3>:
void __vector_3 (void)
{
    3824:	df 93       	push	r29
    3826:	cf 93       	push	r28
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u8Counter=0;
	Local_u8Counter++;
    382c:	80 91 98 01 	lds	r24, 0x0198
    3830:	90 91 99 01 	lds	r25, 0x0199
    3834:	01 96       	adiw	r24, 0x01	; 1
    3836:	90 93 99 01 	sts	0x0199, r25
    383a:	80 93 98 01 	sts	0x0198, r24
	if(TIMER2_f32CounterCTC==Local_u8Counter)
    383e:	80 91 98 01 	lds	r24, 0x0198
    3842:	90 91 99 01 	lds	r25, 0x0199
    3846:	9c 01       	movw	r18, r24
    3848:	40 e0       	ldi	r20, 0x00	; 0
    384a:	50 e0       	ldi	r21, 0x00	; 0
    384c:	80 91 bb 01 	lds	r24, 0x01BB
    3850:	90 91 bc 01 	lds	r25, 0x01BC
    3854:	a0 91 bd 01 	lds	r26, 0x01BD
    3858:	b0 91 be 01 	lds	r27, 0x01BE
    385c:	28 17       	cp	r18, r24
    385e:	39 07       	cpc	r19, r25
    3860:	4a 07       	cpc	r20, r26
    3862:	5b 07       	cpc	r21, r27
    3864:	49 f4       	brne	.+18     	; 0x3878 <__vector_3+0x54>
	{
		TIMER2_pSetCallBack();
    3866:	e0 91 9e 01 	lds	r30, 0x019E
    386a:	f0 91 9f 01 	lds	r31, 0x019F
    386e:	09 95       	icall
		Local_u8Counter=0;
    3870:	10 92 99 01 	sts	0x0199, r1
    3874:	10 92 98 01 	sts	0x0198, r1
	}
}
    3878:	cf 91       	pop	r28
    387a:	df 91       	pop	r29
    387c:	08 95       	ret

0000387e <TIMER_voidTimer1Enable>:
 *                                                               Timer 1                                                              *
 **************************************************************************************************************************************/
u8 TIMER1_u8MODEPWM;
/************************************************************************************************************************************/
void TIMER_voidTimer1Enable(u8 Copy_u8Timer1Mode,u8 Copy_u8Timer1ModeChannelA,u8 Copy_u8Timer1ModeChannelB)
{
    387e:	df 93       	push	r29
    3880:	cf 93       	push	r28
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	29 97       	sbiw	r28, 0x09	; 9
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	89 83       	std	Y+1, r24	; 0x01
    3894:	6a 83       	std	Y+2, r22	; 0x02
    3896:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Timer1Mode)
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	28 2f       	mov	r18, r24
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	39 87       	std	Y+9, r19	; 0x09
    38a0:	28 87       	std	Y+8, r18	; 0x08
    38a2:	88 85       	ldd	r24, Y+8	; 0x08
    38a4:	99 85       	ldd	r25, Y+9	; 0x09
    38a6:	87 30       	cpi	r24, 0x07	; 7
    38a8:	91 05       	cpc	r25, r1
    38aa:	09 f4       	brne	.+2      	; 0x38ae <TIMER_voidTimer1Enable+0x30>
    38ac:	6b c1       	rjmp	.+726    	; 0x3b84 <TIMER_voidTimer1Enable+0x306>
    38ae:	28 85       	ldd	r18, Y+8	; 0x08
    38b0:	39 85       	ldd	r19, Y+9	; 0x09
    38b2:	28 30       	cpi	r18, 0x08	; 8
    38b4:	31 05       	cpc	r19, r1
    38b6:	4c f5       	brge	.+82     	; 0x390a <TIMER_voidTimer1Enable+0x8c>
    38b8:	88 85       	ldd	r24, Y+8	; 0x08
    38ba:	99 85       	ldd	r25, Y+9	; 0x09
    38bc:	83 30       	cpi	r24, 0x03	; 3
    38be:	91 05       	cpc	r25, r1
    38c0:	09 f4       	brne	.+2      	; 0x38c4 <TIMER_voidTimer1Enable+0x46>
    38c2:	c7 c0       	rjmp	.+398    	; 0x3a52 <TIMER_voidTimer1Enable+0x1d4>
    38c4:	28 85       	ldd	r18, Y+8	; 0x08
    38c6:	39 85       	ldd	r19, Y+9	; 0x09
    38c8:	24 30       	cpi	r18, 0x04	; 4
    38ca:	31 05       	cpc	r19, r1
    38cc:	8c f4       	brge	.+34     	; 0x38f0 <TIMER_voidTimer1Enable+0x72>
    38ce:	88 85       	ldd	r24, Y+8	; 0x08
    38d0:	99 85       	ldd	r25, Y+9	; 0x09
    38d2:	81 30       	cpi	r24, 0x01	; 1
    38d4:	91 05       	cpc	r25, r1
    38d6:	09 f4       	brne	.+2      	; 0x38da <TIMER_voidTimer1Enable+0x5c>
    38d8:	7c c0       	rjmp	.+248    	; 0x39d2 <TIMER_voidTimer1Enable+0x154>
    38da:	28 85       	ldd	r18, Y+8	; 0x08
    38dc:	39 85       	ldd	r19, Y+9	; 0x09
    38de:	22 30       	cpi	r18, 0x02	; 2
    38e0:	31 05       	cpc	r19, r1
    38e2:	0c f0       	brlt	.+2      	; 0x38e6 <TIMER_voidTimer1Enable+0x68>
    38e4:	96 c0       	rjmp	.+300    	; 0x3a12 <TIMER_voidTimer1Enable+0x194>
    38e6:	88 85       	ldd	r24, Y+8	; 0x08
    38e8:	99 85       	ldd	r25, Y+9	; 0x09
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	c9 f1       	breq	.+114    	; 0x3960 <TIMER_voidTimer1Enable+0xe2>
    38ee:	50 c2       	rjmp	.+1184   	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
    38f0:	28 85       	ldd	r18, Y+8	; 0x08
    38f2:	39 85       	ldd	r19, Y+9	; 0x09
    38f4:	25 30       	cpi	r18, 0x05	; 5
    38f6:	31 05       	cpc	r19, r1
    38f8:	09 f4       	brne	.+2      	; 0x38fc <TIMER_voidTimer1Enable+0x7e>
    38fa:	04 c1       	rjmp	.+520    	; 0x3b04 <TIMER_voidTimer1Enable+0x286>
    38fc:	88 85       	ldd	r24, Y+8	; 0x08
    38fe:	99 85       	ldd	r25, Y+9	; 0x09
    3900:	86 30       	cpi	r24, 0x06	; 6
    3902:	91 05       	cpc	r25, r1
    3904:	0c f0       	brlt	.+2      	; 0x3908 <TIMER_voidTimer1Enable+0x8a>
    3906:	1e c1       	rjmp	.+572    	; 0x3b44 <TIMER_voidTimer1Enable+0x2c6>
    3908:	c4 c0       	rjmp	.+392    	; 0x3a92 <TIMER_voidTimer1Enable+0x214>
    390a:	28 85       	ldd	r18, Y+8	; 0x08
    390c:	39 85       	ldd	r19, Y+9	; 0x09
    390e:	2b 30       	cpi	r18, 0x0B	; 11
    3910:	31 05       	cpc	r19, r1
    3912:	09 f4       	brne	.+2      	; 0x3916 <TIMER_voidTimer1Enable+0x98>
    3914:	ae c1       	rjmp	.+860    	; 0x3c72 <TIMER_voidTimer1Enable+0x3f4>
    3916:	88 85       	ldd	r24, Y+8	; 0x08
    3918:	99 85       	ldd	r25, Y+9	; 0x09
    391a:	8c 30       	cpi	r24, 0x0C	; 12
    391c:	91 05       	cpc	r25, r1
    391e:	6c f4       	brge	.+26     	; 0x393a <TIMER_voidTimer1Enable+0xbc>
    3920:	28 85       	ldd	r18, Y+8	; 0x08
    3922:	39 85       	ldd	r19, Y+9	; 0x09
    3924:	29 30       	cpi	r18, 0x09	; 9
    3926:	31 05       	cpc	r19, r1
    3928:	09 f4       	brne	.+2      	; 0x392c <TIMER_voidTimer1Enable+0xae>
    392a:	69 c1       	rjmp	.+722    	; 0x3bfe <TIMER_voidTimer1Enable+0x380>
    392c:	88 85       	ldd	r24, Y+8	; 0x08
    392e:	99 85       	ldd	r25, Y+9	; 0x09
    3930:	8a 30       	cpi	r24, 0x0A	; 10
    3932:	91 05       	cpc	r25, r1
    3934:	0c f0       	brlt	.+2      	; 0x3938 <TIMER_voidTimer1Enable+0xba>
    3936:	80 c1       	rjmp	.+768    	; 0x3c38 <TIMER_voidTimer1Enable+0x3ba>
    3938:	45 c1       	rjmp	.+650    	; 0x3bc4 <TIMER_voidTimer1Enable+0x346>
    393a:	28 85       	ldd	r18, Y+8	; 0x08
    393c:	39 85       	ldd	r19, Y+9	; 0x09
    393e:	2e 30       	cpi	r18, 0x0E	; 14
    3940:	31 05       	cpc	r19, r1
    3942:	09 f4       	brne	.+2      	; 0x3946 <TIMER_voidTimer1Enable+0xc8>
    3944:	ec c1       	rjmp	.+984    	; 0x3d1e <TIMER_voidTimer1Enable+0x4a0>
    3946:	88 85       	ldd	r24, Y+8	; 0x08
    3948:	99 85       	ldd	r25, Y+9	; 0x09
    394a:	8f 30       	cpi	r24, 0x0F	; 15
    394c:	91 05       	cpc	r25, r1
    394e:	09 f4       	brne	.+2      	; 0x3952 <TIMER_voidTimer1Enable+0xd4>
    3950:	03 c2       	rjmp	.+1030   	; 0x3d58 <TIMER_voidTimer1Enable+0x4da>
    3952:	28 85       	ldd	r18, Y+8	; 0x08
    3954:	39 85       	ldd	r19, Y+9	; 0x09
    3956:	2c 30       	cpi	r18, 0x0C	; 12
    3958:	31 05       	cpc	r19, r1
    395a:	09 f4       	brne	.+2      	; 0x395e <TIMER_voidTimer1Enable+0xe0>
    395c:	a7 c1       	rjmp	.+846    	; 0x3cac <TIMER_voidTimer1Enable+0x42e>
    395e:	18 c2       	rjmp	.+1072   	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
	{
	case  TIMER1_MODE_NORMAL :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3960:	af e4       	ldi	r26, 0x4F	; 79
    3962:	b0 e0       	ldi	r27, 0x00	; 0
    3964:	ef e4       	ldi	r30, 0x4F	; 79
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	80 81       	ld	r24, Z
    396a:	8e 7f       	andi	r24, 0xFE	; 254
    396c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    396e:	af e4       	ldi	r26, 0x4F	; 79
    3970:	b0 e0       	ldi	r27, 0x00	; 0
    3972:	ef e4       	ldi	r30, 0x4F	; 79
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	80 81       	ld	r24, Z
    3978:	8d 7f       	andi	r24, 0xFD	; 253
    397a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    397c:	ae e4       	ldi	r26, 0x4E	; 78
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	ee e4       	ldi	r30, 0x4E	; 78
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	87 7f       	andi	r24, 0xF7	; 247
    3988:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    398a:	ae e4       	ldi	r26, 0x4E	; 78
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	ee e4       	ldi	r30, 0x4E	; 78
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	8f 7e       	andi	r24, 0xEF	; 239
    3996:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TIMSK_TOIE1);
    3998:	a9 e5       	ldi	r26, 0x59	; 89
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	e9 e5       	ldi	r30, 0x59	; 89
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	84 60       	ori	r24, 0x04	; 4
    39a4:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1B);
    39a6:	a9 e5       	ldi	r26, 0x59	; 89
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	e9 e5       	ldi	r30, 0x59	; 89
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	87 7f       	andi	r24, 0xF7	; 247
    39b2:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1A);
    39b4:	a9 e5       	ldi	r26, 0x59	; 89
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	e9 e5       	ldi	r30, 0x59	; 89
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	8f 7e       	andi	r24, 0xEF	; 239
    39c0:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    39c2:	a9 e5       	ldi	r26, 0x59	; 89
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	e9 e5       	ldi	r30, 0x59	; 89
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	80 81       	ld	r24, Z
    39cc:	8f 7d       	andi	r24, 0xDF	; 223
    39ce:	8c 93       	st	X, r24
    39d0:	df c1       	rjmp	.+958    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>

		//TIMER_u16_TCNT1=TIMER_f32Timer1PreloodValue;
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    39d2:	af e4       	ldi	r26, 0x4F	; 79
    39d4:	b0 e0       	ldi	r27, 0x00	; 0
    39d6:	ef e4       	ldi	r30, 0x4F	; 79
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	80 81       	ld	r24, Z
    39dc:	81 60       	ori	r24, 0x01	; 1
    39de:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    39e0:	af e4       	ldi	r26, 0x4F	; 79
    39e2:	b0 e0       	ldi	r27, 0x00	; 0
    39e4:	ef e4       	ldi	r30, 0x4F	; 79
    39e6:	f0 e0       	ldi	r31, 0x00	; 0
    39e8:	80 81       	ld	r24, Z
    39ea:	8d 7f       	andi	r24, 0xFD	; 253
    39ec:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    39ee:	ae e4       	ldi	r26, 0x4E	; 78
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	ee e4       	ldi	r30, 0x4E	; 78
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	80 81       	ld	r24, Z
    39f8:	87 7f       	andi	r24, 0xF7	; 247
    39fa:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    39fc:	ae e4       	ldi	r26, 0x4E	; 78
    39fe:	b0 e0       	ldi	r27, 0x00	; 0
    3a00:	ee e4       	ldi	r30, 0x4E	; 78
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	8f 7e       	andi	r24, 0xEF	; 239
    3a08:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_8;
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	80 93 a2 01 	sts	0x01A2, r24
    3a10:	bf c1       	rjmp	.+894    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3a12:	af e4       	ldi	r26, 0x4F	; 79
    3a14:	b0 e0       	ldi	r27, 0x00	; 0
    3a16:	ef e4       	ldi	r30, 0x4F	; 79
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	80 81       	ld	r24, Z
    3a1c:	8e 7f       	andi	r24, 0xFE	; 254
    3a1e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3a20:	af e4       	ldi	r26, 0x4F	; 79
    3a22:	b0 e0       	ldi	r27, 0x00	; 0
    3a24:	ef e4       	ldi	r30, 0x4F	; 79
    3a26:	f0 e0       	ldi	r31, 0x00	; 0
    3a28:	80 81       	ld	r24, Z
    3a2a:	82 60       	ori	r24, 0x02	; 2
    3a2c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3a2e:	ae e4       	ldi	r26, 0x4E	; 78
    3a30:	b0 e0       	ldi	r27, 0x00	; 0
    3a32:	ee e4       	ldi	r30, 0x4E	; 78
    3a34:	f0 e0       	ldi	r31, 0x00	; 0
    3a36:	80 81       	ld	r24, Z
    3a38:	87 7f       	andi	r24, 0xF7	; 247
    3a3a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3a3c:	ae e4       	ldi	r26, 0x4E	; 78
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	ee e4       	ldi	r30, 0x4E	; 78
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	8f 7e       	andi	r24, 0xEF	; 239
    3a48:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_9;
    3a4a:	82 e0       	ldi	r24, 0x02	; 2
    3a4c:	80 93 a2 01 	sts	0x01A2, r24
    3a50:	9f c1       	rjmp	.+830    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    3a52:	af e4       	ldi	r26, 0x4F	; 79
    3a54:	b0 e0       	ldi	r27, 0x00	; 0
    3a56:	ef e4       	ldi	r30, 0x4F	; 79
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	81 60       	ori	r24, 0x01	; 1
    3a5e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3a60:	af e4       	ldi	r26, 0x4F	; 79
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	ef e4       	ldi	r30, 0x4F	; 79
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	80 81       	ld	r24, Z
    3a6a:	82 60       	ori	r24, 0x02	; 2
    3a6c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3a6e:	ae e4       	ldi	r26, 0x4E	; 78
    3a70:	b0 e0       	ldi	r27, 0x00	; 0
    3a72:	ee e4       	ldi	r30, 0x4E	; 78
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	80 81       	ld	r24, Z
    3a78:	87 7f       	andi	r24, 0xF7	; 247
    3a7a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3a7c:	ae e4       	ldi	r26, 0x4E	; 78
    3a7e:	b0 e0       	ldi	r27, 0x00	; 0
    3a80:	ee e4       	ldi	r30, 0x4E	; 78
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	80 81       	ld	r24, Z
    3a86:	8f 7e       	andi	r24, 0xEF	; 239
    3a88:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_10;
    3a8a:	83 e0       	ldi	r24, 0x03	; 3
    3a8c:	80 93 a2 01 	sts	0x01A2, r24
    3a90:	7f c1       	rjmp	.+766    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_CTC_OCR1A :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3a92:	af e4       	ldi	r26, 0x4F	; 79
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	ef e4       	ldi	r30, 0x4F	; 79
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 81       	ld	r24, Z
    3a9c:	8e 7f       	andi	r24, 0xFE	; 254
    3a9e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3aa0:	af e4       	ldi	r26, 0x4F	; 79
    3aa2:	b0 e0       	ldi	r27, 0x00	; 0
    3aa4:	ef e4       	ldi	r30, 0x4F	; 79
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	80 81       	ld	r24, Z
    3aaa:	8d 7f       	andi	r24, 0xFD	; 253
    3aac:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3aae:	ae e4       	ldi	r26, 0x4E	; 78
    3ab0:	b0 e0       	ldi	r27, 0x00	; 0
    3ab2:	ee e4       	ldi	r30, 0x4E	; 78
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	80 81       	ld	r24, Z
    3ab8:	88 60       	ori	r24, 0x08	; 8
    3aba:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3abc:	ae e4       	ldi	r26, 0x4E	; 78
    3abe:	b0 e0       	ldi	r27, 0x00	; 0
    3ac0:	ee e4       	ldi	r30, 0x4E	; 78
    3ac2:	f0 e0       	ldi	r31, 0x00	; 0
    3ac4:	80 81       	ld	r24, Z
    3ac6:	8f 7e       	andi	r24, 0xEF	; 239
    3ac8:	8c 93       	st	X, r24

		CLR_BIT(TIMSK,TIMSK_TOIE1);
    3aca:	a9 e5       	ldi	r26, 0x59	; 89
    3acc:	b0 e0       	ldi	r27, 0x00	; 0
    3ace:	e9 e5       	ldi	r30, 0x59	; 89
    3ad0:	f0 e0       	ldi	r31, 0x00	; 0
    3ad2:	80 81       	ld	r24, Z
    3ad4:	8b 7f       	andi	r24, 0xFB	; 251
    3ad6:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1B);
    3ad8:	a9 e5       	ldi	r26, 0x59	; 89
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	e9 e5       	ldi	r30, 0x59	; 89
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	80 81       	ld	r24, Z
    3ae2:	87 7f       	andi	r24, 0xF7	; 247
    3ae4:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1A);
    3ae6:	a9 e5       	ldi	r26, 0x59	; 89
    3ae8:	b0 e0       	ldi	r27, 0x00	; 0
    3aea:	e9 e5       	ldi	r30, 0x59	; 89
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	80 81       	ld	r24, Z
    3af0:	80 61       	ori	r24, 0x10	; 16
    3af2:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    3af4:	a9 e5       	ldi	r26, 0x59	; 89
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	e9 e5       	ldi	r30, 0x59	; 89
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	8f 7d       	andi	r24, 0xDF	; 223
    3b00:	8c 93       	st	X, r24
    3b02:	46 c1       	rjmp	.+652    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>

		break;
	case TIMER1_MODE_FAST_PWM_8 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    3b04:	af e4       	ldi	r26, 0x4F	; 79
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	ef e4       	ldi	r30, 0x4F	; 79
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	81 60       	ori	r24, 0x01	; 1
    3b10:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3b12:	af e4       	ldi	r26, 0x4F	; 79
    3b14:	b0 e0       	ldi	r27, 0x00	; 0
    3b16:	ef e4       	ldi	r30, 0x4F	; 79
    3b18:	f0 e0       	ldi	r31, 0x00	; 0
    3b1a:	80 81       	ld	r24, Z
    3b1c:	8d 7f       	andi	r24, 0xFD	; 253
    3b1e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3b20:	ae e4       	ldi	r26, 0x4E	; 78
    3b22:	b0 e0       	ldi	r27, 0x00	; 0
    3b24:	ee e4       	ldi	r30, 0x4E	; 78
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	80 81       	ld	r24, Z
    3b2a:	88 60       	ori	r24, 0x08	; 8
    3b2c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3b2e:	ae e4       	ldi	r26, 0x4E	; 78
    3b30:	b0 e0       	ldi	r27, 0x00	; 0
    3b32:	ee e4       	ldi	r30, 0x4E	; 78
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	80 81       	ld	r24, Z
    3b38:	8f 7e       	andi	r24, 0xEF	; 239
    3b3a:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_8;
    3b3c:	85 e0       	ldi	r24, 0x05	; 5
    3b3e:	80 93 a2 01 	sts	0x01A2, r24
    3b42:	26 c1       	rjmp	.+588    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_FAST_PWM_9 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3b44:	af e4       	ldi	r26, 0x4F	; 79
    3b46:	b0 e0       	ldi	r27, 0x00	; 0
    3b48:	ef e4       	ldi	r30, 0x4F	; 79
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	80 81       	ld	r24, Z
    3b4e:	8e 7f       	andi	r24, 0xFE	; 254
    3b50:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3b52:	af e4       	ldi	r26, 0x4F	; 79
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	ef e4       	ldi	r30, 0x4F	; 79
    3b58:	f0 e0       	ldi	r31, 0x00	; 0
    3b5a:	80 81       	ld	r24, Z
    3b5c:	82 60       	ori	r24, 0x02	; 2
    3b5e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3b60:	ae e4       	ldi	r26, 0x4E	; 78
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	ee e4       	ldi	r30, 0x4E	; 78
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	80 81       	ld	r24, Z
    3b6a:	88 60       	ori	r24, 0x08	; 8
    3b6c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3b6e:	ae e4       	ldi	r26, 0x4E	; 78
    3b70:	b0 e0       	ldi	r27, 0x00	; 0
    3b72:	ee e4       	ldi	r30, 0x4E	; 78
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	80 81       	ld	r24, Z
    3b78:	8f 7e       	andi	r24, 0xEF	; 239
    3b7a:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_9;
    3b7c:	86 e0       	ldi	r24, 0x06	; 6
    3b7e:	80 93 a2 01 	sts	0x01A2, r24
    3b82:	06 c1       	rjmp	.+524    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_FAST_PWM_10 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    3b84:	af e4       	ldi	r26, 0x4F	; 79
    3b86:	b0 e0       	ldi	r27, 0x00	; 0
    3b88:	ef e4       	ldi	r30, 0x4F	; 79
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	80 81       	ld	r24, Z
    3b8e:	81 60       	ori	r24, 0x01	; 1
    3b90:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3b92:	af e4       	ldi	r26, 0x4F	; 79
    3b94:	b0 e0       	ldi	r27, 0x00	; 0
    3b96:	ef e4       	ldi	r30, 0x4F	; 79
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	80 81       	ld	r24, Z
    3b9c:	82 60       	ori	r24, 0x02	; 2
    3b9e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3ba0:	ae e4       	ldi	r26, 0x4E	; 78
    3ba2:	b0 e0       	ldi	r27, 0x00	; 0
    3ba4:	ee e4       	ldi	r30, 0x4E	; 78
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
    3ba8:	80 81       	ld	r24, Z
    3baa:	88 60       	ori	r24, 0x08	; 8
    3bac:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3bae:	ae e4       	ldi	r26, 0x4E	; 78
    3bb0:	b0 e0       	ldi	r27, 0x00	; 0
    3bb2:	ee e4       	ldi	r30, 0x4E	; 78
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	80 81       	ld	r24, Z
    3bb8:	8f 7e       	andi	r24, 0xEF	; 239
    3bba:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_10;
    3bbc:	87 e0       	ldi	r24, 0x07	; 7
    3bbe:	80 93 a2 01 	sts	0x01A2, r24
    3bc2:	e6 c0       	rjmp	.+460    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3bc4:	af e4       	ldi	r26, 0x4F	; 79
    3bc6:	b0 e0       	ldi	r27, 0x00	; 0
    3bc8:	ef e4       	ldi	r30, 0x4F	; 79
    3bca:	f0 e0       	ldi	r31, 0x00	; 0
    3bcc:	80 81       	ld	r24, Z
    3bce:	8e 7f       	andi	r24, 0xFE	; 254
    3bd0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3bd2:	af e4       	ldi	r26, 0x4F	; 79
    3bd4:	b0 e0       	ldi	r27, 0x00	; 0
    3bd6:	ef e4       	ldi	r30, 0x4F	; 79
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	80 81       	ld	r24, Z
    3bdc:	8d 7f       	andi	r24, 0xFD	; 253
    3bde:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3be0:	ae e4       	ldi	r26, 0x4E	; 78
    3be2:	b0 e0       	ldi	r27, 0x00	; 0
    3be4:	ee e4       	ldi	r30, 0x4E	; 78
    3be6:	f0 e0       	ldi	r31, 0x00	; 0
    3be8:	80 81       	ld	r24, Z
    3bea:	87 7f       	andi	r24, 0xF7	; 247
    3bec:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    3bee:	ae e4       	ldi	r26, 0x4E	; 78
    3bf0:	b0 e0       	ldi	r27, 0x00	; 0
    3bf2:	ee e4       	ldi	r30, 0x4E	; 78
    3bf4:	f0 e0       	ldi	r31, 0x00	; 0
    3bf6:	80 81       	ld	r24, Z
    3bf8:	80 61       	ori	r24, 0x10	; 16
    3bfa:	8c 93       	st	X, r24
    3bfc:	c9 c0       	rjmp	.+402    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    3bfe:	af e4       	ldi	r26, 0x4F	; 79
    3c00:	b0 e0       	ldi	r27, 0x00	; 0
    3c02:	ef e4       	ldi	r30, 0x4F	; 79
    3c04:	f0 e0       	ldi	r31, 0x00	; 0
    3c06:	80 81       	ld	r24, Z
    3c08:	81 60       	ori	r24, 0x01	; 1
    3c0a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3c0c:	af e4       	ldi	r26, 0x4F	; 79
    3c0e:	b0 e0       	ldi	r27, 0x00	; 0
    3c10:	ef e4       	ldi	r30, 0x4F	; 79
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	80 81       	ld	r24, Z
    3c16:	8d 7f       	andi	r24, 0xFD	; 253
    3c18:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3c1a:	ae e4       	ldi	r26, 0x4E	; 78
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	ee e4       	ldi	r30, 0x4E	; 78
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	80 81       	ld	r24, Z
    3c24:	87 7f       	andi	r24, 0xF7	; 247
    3c26:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    3c28:	ae e4       	ldi	r26, 0x4E	; 78
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	ee e4       	ldi	r30, 0x4E	; 78
    3c2e:	f0 e0       	ldi	r31, 0x00	; 0
    3c30:	80 81       	ld	r24, Z
    3c32:	80 61       	ori	r24, 0x10	; 16
    3c34:	8c 93       	st	X, r24
    3c36:	ac c0       	rjmp	.+344    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_PWM_PHASE_CORRECT_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3c38:	af e4       	ldi	r26, 0x4F	; 79
    3c3a:	b0 e0       	ldi	r27, 0x00	; 0
    3c3c:	ef e4       	ldi	r30, 0x4F	; 79
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	80 81       	ld	r24, Z
    3c42:	8e 7f       	andi	r24, 0xFE	; 254
    3c44:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3c46:	af e4       	ldi	r26, 0x4F	; 79
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	ef e4       	ldi	r30, 0x4F	; 79
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	80 81       	ld	r24, Z
    3c50:	82 60       	ori	r24, 0x02	; 2
    3c52:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3c54:	ae e4       	ldi	r26, 0x4E	; 78
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	ee e4       	ldi	r30, 0x4E	; 78
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	87 7f       	andi	r24, 0xF7	; 247
    3c60:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    3c62:	ae e4       	ldi	r26, 0x4E	; 78
    3c64:	b0 e0       	ldi	r27, 0x00	; 0
    3c66:	ee e4       	ldi	r30, 0x4E	; 78
    3c68:	f0 e0       	ldi	r31, 0x00	; 0
    3c6a:	80 81       	ld	r24, Z
    3c6c:	80 61       	ori	r24, 0x10	; 16
    3c6e:	8c 93       	st	X, r24
    3c70:	8f c0       	rjmp	.+286    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_PWM_PHASE_CORRECT_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    3c72:	af e4       	ldi	r26, 0x4F	; 79
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	ef e4       	ldi	r30, 0x4F	; 79
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	81 60       	ori	r24, 0x01	; 1
    3c7e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3c80:	af e4       	ldi	r26, 0x4F	; 79
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	ef e4       	ldi	r30, 0x4F	; 79
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	80 81       	ld	r24, Z
    3c8a:	82 60       	ori	r24, 0x02	; 2
    3c8c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3c8e:	ae e4       	ldi	r26, 0x4E	; 78
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	ee e4       	ldi	r30, 0x4E	; 78
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	80 81       	ld	r24, Z
    3c98:	87 7f       	andi	r24, 0xF7	; 247
    3c9a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    3c9c:	ae e4       	ldi	r26, 0x4E	; 78
    3c9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ca0:	ee e4       	ldi	r30, 0x4E	; 78
    3ca2:	f0 e0       	ldi	r31, 0x00	; 0
    3ca4:	80 81       	ld	r24, Z
    3ca6:	80 61       	ori	r24, 0x10	; 16
    3ca8:	8c 93       	st	X, r24
    3caa:	72 c0       	rjmp	.+228    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_CTC_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3cac:	af e4       	ldi	r26, 0x4F	; 79
    3cae:	b0 e0       	ldi	r27, 0x00	; 0
    3cb0:	ef e4       	ldi	r30, 0x4F	; 79
    3cb2:	f0 e0       	ldi	r31, 0x00	; 0
    3cb4:	80 81       	ld	r24, Z
    3cb6:	8e 7f       	andi	r24, 0xFE	; 254
    3cb8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3cba:	af e4       	ldi	r26, 0x4F	; 79
    3cbc:	b0 e0       	ldi	r27, 0x00	; 0
    3cbe:	ef e4       	ldi	r30, 0x4F	; 79
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	80 81       	ld	r24, Z
    3cc4:	82 60       	ori	r24, 0x02	; 2
    3cc6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3cc8:	ae e4       	ldi	r26, 0x4E	; 78
    3cca:	b0 e0       	ldi	r27, 0x00	; 0
    3ccc:	ee e4       	ldi	r30, 0x4E	; 78
    3cce:	f0 e0       	ldi	r31, 0x00	; 0
    3cd0:	80 81       	ld	r24, Z
    3cd2:	88 60       	ori	r24, 0x08	; 8
    3cd4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3cd6:	ae e4       	ldi	r26, 0x4E	; 78
    3cd8:	b0 e0       	ldi	r27, 0x00	; 0
    3cda:	ee e4       	ldi	r30, 0x4E	; 78
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	80 81       	ld	r24, Z
    3ce0:	8f 7e       	andi	r24, 0xEF	; 239
    3ce2:	8c 93       	st	X, r24

		CLR_BIT(TIMSK,TIMSK_TOIE1);
    3ce4:	a9 e5       	ldi	r26, 0x59	; 89
    3ce6:	b0 e0       	ldi	r27, 0x00	; 0
    3ce8:	e9 e5       	ldi	r30, 0x59	; 89
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	80 81       	ld	r24, Z
    3cee:	8b 7f       	andi	r24, 0xFB	; 251
    3cf0:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1B);
    3cf2:	a9 e5       	ldi	r26, 0x59	; 89
    3cf4:	b0 e0       	ldi	r27, 0x00	; 0
    3cf6:	e9 e5       	ldi	r30, 0x59	; 89
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	80 81       	ld	r24, Z
    3cfc:	88 60       	ori	r24, 0x08	; 8
    3cfe:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1A);
    3d00:	a9 e5       	ldi	r26, 0x59	; 89
    3d02:	b0 e0       	ldi	r27, 0x00	; 0
    3d04:	e9 e5       	ldi	r30, 0x59	; 89
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	80 81       	ld	r24, Z
    3d0a:	80 61       	ori	r24, 0x10	; 16
    3d0c:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    3d0e:	a9 e5       	ldi	r26, 0x59	; 89
    3d10:	b0 e0       	ldi	r27, 0x00	; 0
    3d12:	e9 e5       	ldi	r30, 0x59	; 89
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	80 81       	ld	r24, Z
    3d18:	8f 7d       	andi	r24, 0xDF	; 223
    3d1a:	8c 93       	st	X, r24
    3d1c:	39 c0       	rjmp	.+114    	; 0x3d90 <TIMER_voidTimer1Enable+0x512>

		break;
	case  TIMER1_MODE_FAST_PWM_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3d1e:	af e4       	ldi	r26, 0x4F	; 79
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	ef e4       	ldi	r30, 0x4F	; 79
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	80 81       	ld	r24, Z
    3d28:	8e 7f       	andi	r24, 0xFE	; 254
    3d2a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3d2c:	af e4       	ldi	r26, 0x4F	; 79
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	ef e4       	ldi	r30, 0x4F	; 79
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	82 60       	ori	r24, 0x02	; 2
    3d38:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3d3a:	ae e4       	ldi	r26, 0x4E	; 78
    3d3c:	b0 e0       	ldi	r27, 0x00	; 0
    3d3e:	ee e4       	ldi	r30, 0x4E	; 78
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	80 81       	ld	r24, Z
    3d44:	88 60       	ori	r24, 0x08	; 8
    3d46:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    3d48:	ae e4       	ldi	r26, 0x4E	; 78
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	ee e4       	ldi	r30, 0x4E	; 78
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	80 61       	ori	r24, 0x10	; 16
    3d54:	8c 93       	st	X, r24
    3d56:	1c c0       	rjmp	.+56     	; 0x3d90 <TIMER_voidTimer1Enable+0x512>
		break;
	case  TIMER1_MODE_FAST_PWM_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    3d58:	af e4       	ldi	r26, 0x4F	; 79
    3d5a:	b0 e0       	ldi	r27, 0x00	; 0
    3d5c:	ef e4       	ldi	r30, 0x4F	; 79
    3d5e:	f0 e0       	ldi	r31, 0x00	; 0
    3d60:	80 81       	ld	r24, Z
    3d62:	81 60       	ori	r24, 0x01	; 1
    3d64:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3d66:	af e4       	ldi	r26, 0x4F	; 79
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	ef e4       	ldi	r30, 0x4F	; 79
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	82 60       	ori	r24, 0x02	; 2
    3d72:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3d74:	ae e4       	ldi	r26, 0x4E	; 78
    3d76:	b0 e0       	ldi	r27, 0x00	; 0
    3d78:	ee e4       	ldi	r30, 0x4E	; 78
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	80 81       	ld	r24, Z
    3d7e:	88 60       	ori	r24, 0x08	; 8
    3d80:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    3d82:	ae e4       	ldi	r26, 0x4E	; 78
    3d84:	b0 e0       	ldi	r27, 0x00	; 0
    3d86:	ee e4       	ldi	r30, 0x4E	; 78
    3d88:	f0 e0       	ldi	r31, 0x00	; 0
    3d8a:	80 81       	ld	r24, Z
    3d8c:	80 61       	ori	r24, 0x10	; 16
    3d8e:	8c 93       	st	X, r24
		break;
	}
	/***********************************************************************************************************/
	switch(Copy_u8Timer1ModeChannelA)
    3d90:	8a 81       	ldd	r24, Y+2	; 0x02
    3d92:	28 2f       	mov	r18, r24
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	3f 83       	std	Y+7, r19	; 0x07
    3d98:	2e 83       	std	Y+6, r18	; 0x06
    3d9a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d9c:	9f 81       	ldd	r25, Y+7	; 0x07
    3d9e:	81 30       	cpi	r24, 0x01	; 1
    3da0:	91 05       	cpc	r25, r1
    3da2:	21 f1       	breq	.+72     	; 0x3dec <TIMER_voidTimer1Enable+0x56e>
    3da4:	2e 81       	ldd	r18, Y+6	; 0x06
    3da6:	3f 81       	ldd	r19, Y+7	; 0x07
    3da8:	22 30       	cpi	r18, 0x02	; 2
    3daa:	31 05       	cpc	r19, r1
    3dac:	2c f4       	brge	.+10     	; 0x3db8 <TIMER_voidTimer1Enable+0x53a>
    3dae:	8e 81       	ldd	r24, Y+6	; 0x06
    3db0:	9f 81       	ldd	r25, Y+7	; 0x07
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	61 f0       	breq	.+24     	; 0x3dce <TIMER_voidTimer1Enable+0x550>
    3db6:	46 c0       	rjmp	.+140    	; 0x3e44 <TIMER_voidTimer1Enable+0x5c6>
    3db8:	2e 81       	ldd	r18, Y+6	; 0x06
    3dba:	3f 81       	ldd	r19, Y+7	; 0x07
    3dbc:	22 30       	cpi	r18, 0x02	; 2
    3dbe:	31 05       	cpc	r19, r1
    3dc0:	21 f1       	breq	.+72     	; 0x3e0a <TIMER_voidTimer1Enable+0x58c>
    3dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    3dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    3dc6:	83 30       	cpi	r24, 0x03	; 3
    3dc8:	91 05       	cpc	r25, r1
    3dca:	71 f1       	breq	.+92     	; 0x3e28 <TIMER_voidTimer1Enable+0x5aa>
    3dcc:	3b c0       	rjmp	.+118    	; 0x3e44 <TIMER_voidTimer1Enable+0x5c6>
	{
	case   TIMER1_MODE_CHANNEL_A_NORMAL :
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3dce:	af e4       	ldi	r26, 0x4F	; 79
    3dd0:	b0 e0       	ldi	r27, 0x00	; 0
    3dd2:	ef e4       	ldi	r30, 0x4F	; 79
    3dd4:	f0 e0       	ldi	r31, 0x00	; 0
    3dd6:	80 81       	ld	r24, Z
    3dd8:	8f 7b       	andi	r24, 0xBF	; 191
    3dda:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3ddc:	af e4       	ldi	r26, 0x4F	; 79
    3dde:	b0 e0       	ldi	r27, 0x00	; 0
    3de0:	ef e4       	ldi	r30, 0x4F	; 79
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	80 81       	ld	r24, Z
    3de6:	8f 77       	andi	r24, 0x7F	; 127
    3de8:	8c 93       	st	X, r24
    3dea:	2c c0       	rjmp	.+88     	; 0x3e44 <TIMER_voidTimer1Enable+0x5c6>
		break;
	case   TIMER1_MODE_CHANNEL_A_TOGGLE :
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3dec:	af e4       	ldi	r26, 0x4F	; 79
    3dee:	b0 e0       	ldi	r27, 0x00	; 0
    3df0:	ef e4       	ldi	r30, 0x4F	; 79
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	80 81       	ld	r24, Z
    3df6:	80 64       	ori	r24, 0x40	; 64
    3df8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3dfa:	af e4       	ldi	r26, 0x4F	; 79
    3dfc:	b0 e0       	ldi	r27, 0x00	; 0
    3dfe:	ef e4       	ldi	r30, 0x4F	; 79
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	80 81       	ld	r24, Z
    3e04:	8f 77       	andi	r24, 0x7F	; 127
    3e06:	8c 93       	st	X, r24
    3e08:	1d c0       	rjmp	.+58     	; 0x3e44 <TIMER_voidTimer1Enable+0x5c6>
		break;
	case   TIMER1_MODE_CHANNEL_A_CLEAR_OC1A :
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3e0a:	af e4       	ldi	r26, 0x4F	; 79
    3e0c:	b0 e0       	ldi	r27, 0x00	; 0
    3e0e:	ef e4       	ldi	r30, 0x4F	; 79
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	80 81       	ld	r24, Z
    3e14:	8f 7b       	andi	r24, 0xBF	; 191
    3e16:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3e18:	af e4       	ldi	r26, 0x4F	; 79
    3e1a:	b0 e0       	ldi	r27, 0x00	; 0
    3e1c:	ef e4       	ldi	r30, 0x4F	; 79
    3e1e:	f0 e0       	ldi	r31, 0x00	; 0
    3e20:	80 81       	ld	r24, Z
    3e22:	80 68       	ori	r24, 0x80	; 128
    3e24:	8c 93       	st	X, r24
    3e26:	0e c0       	rjmp	.+28     	; 0x3e44 <TIMER_voidTimer1Enable+0x5c6>
		break;
	case   TIMER1_MODE_CHANNEL_A_SET_OC1A :
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3e28:	af e4       	ldi	r26, 0x4F	; 79
    3e2a:	b0 e0       	ldi	r27, 0x00	; 0
    3e2c:	ef e4       	ldi	r30, 0x4F	; 79
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	80 81       	ld	r24, Z
    3e32:	80 64       	ori	r24, 0x40	; 64
    3e34:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3e36:	af e4       	ldi	r26, 0x4F	; 79
    3e38:	b0 e0       	ldi	r27, 0x00	; 0
    3e3a:	ef e4       	ldi	r30, 0x4F	; 79
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	80 81       	ld	r24, Z
    3e40:	80 68       	ori	r24, 0x80	; 128
    3e42:	8c 93       	st	X, r24
		break;
	}
	/***********************************************************************************************************/
	switch(Copy_u8Timer1ModeChannelB)
    3e44:	8b 81       	ldd	r24, Y+3	; 0x03
    3e46:	28 2f       	mov	r18, r24
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	3d 83       	std	Y+5, r19	; 0x05
    3e4c:	2c 83       	std	Y+4, r18	; 0x04
    3e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e50:	9d 81       	ldd	r25, Y+5	; 0x05
    3e52:	81 30       	cpi	r24, 0x01	; 1
    3e54:	91 05       	cpc	r25, r1
    3e56:	21 f1       	breq	.+72     	; 0x3ea0 <TIMER_voidTimer1Enable+0x622>
    3e58:	2c 81       	ldd	r18, Y+4	; 0x04
    3e5a:	3d 81       	ldd	r19, Y+5	; 0x05
    3e5c:	22 30       	cpi	r18, 0x02	; 2
    3e5e:	31 05       	cpc	r19, r1
    3e60:	2c f4       	brge	.+10     	; 0x3e6c <TIMER_voidTimer1Enable+0x5ee>
    3e62:	8c 81       	ldd	r24, Y+4	; 0x04
    3e64:	9d 81       	ldd	r25, Y+5	; 0x05
    3e66:	00 97       	sbiw	r24, 0x00	; 0
    3e68:	61 f0       	breq	.+24     	; 0x3e82 <TIMER_voidTimer1Enable+0x604>
    3e6a:	46 c0       	rjmp	.+140    	; 0x3ef8 <TIMER_voidTimer1Enable+0x67a>
    3e6c:	2c 81       	ldd	r18, Y+4	; 0x04
    3e6e:	3d 81       	ldd	r19, Y+5	; 0x05
    3e70:	22 30       	cpi	r18, 0x02	; 2
    3e72:	31 05       	cpc	r19, r1
    3e74:	21 f1       	breq	.+72     	; 0x3ebe <TIMER_voidTimer1Enable+0x640>
    3e76:	8c 81       	ldd	r24, Y+4	; 0x04
    3e78:	9d 81       	ldd	r25, Y+5	; 0x05
    3e7a:	83 30       	cpi	r24, 0x03	; 3
    3e7c:	91 05       	cpc	r25, r1
    3e7e:	71 f1       	breq	.+92     	; 0x3edc <TIMER_voidTimer1Enable+0x65e>
    3e80:	3b c0       	rjmp	.+118    	; 0x3ef8 <TIMER_voidTimer1Enable+0x67a>
	{
	case  TIMER1_MODE_CHANNEL_B_NORMAL :
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3e82:	af e4       	ldi	r26, 0x4F	; 79
    3e84:	b0 e0       	ldi	r27, 0x00	; 0
    3e86:	ef e4       	ldi	r30, 0x4F	; 79
    3e88:	f0 e0       	ldi	r31, 0x00	; 0
    3e8a:	80 81       	ld	r24, Z
    3e8c:	8f 7e       	andi	r24, 0xEF	; 239
    3e8e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3e90:	af e4       	ldi	r26, 0x4F	; 79
    3e92:	b0 e0       	ldi	r27, 0x00	; 0
    3e94:	ef e4       	ldi	r30, 0x4F	; 79
    3e96:	f0 e0       	ldi	r31, 0x00	; 0
    3e98:	80 81       	ld	r24, Z
    3e9a:	8f 7d       	andi	r24, 0xDF	; 223
    3e9c:	8c 93       	st	X, r24
    3e9e:	2c c0       	rjmp	.+88     	; 0x3ef8 <TIMER_voidTimer1Enable+0x67a>
		break;
	case    TIMER1_MODE_CHANNEL_B_TOGGLE :
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3ea0:	af e4       	ldi	r26, 0x4F	; 79
    3ea2:	b0 e0       	ldi	r27, 0x00	; 0
    3ea4:	ef e4       	ldi	r30, 0x4F	; 79
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	80 81       	ld	r24, Z
    3eaa:	80 61       	ori	r24, 0x10	; 16
    3eac:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3eae:	af e4       	ldi	r26, 0x4F	; 79
    3eb0:	b0 e0       	ldi	r27, 0x00	; 0
    3eb2:	ef e4       	ldi	r30, 0x4F	; 79
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	80 81       	ld	r24, Z
    3eb8:	8f 7d       	andi	r24, 0xDF	; 223
    3eba:	8c 93       	st	X, r24
    3ebc:	1d c0       	rjmp	.+58     	; 0x3ef8 <TIMER_voidTimer1Enable+0x67a>
		break;
	case    TIMER1_MODE_CHANNEL_B_CLEAR_OC1B :
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3ebe:	af e4       	ldi	r26, 0x4F	; 79
    3ec0:	b0 e0       	ldi	r27, 0x00	; 0
    3ec2:	ef e4       	ldi	r30, 0x4F	; 79
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	80 81       	ld	r24, Z
    3ec8:	8f 7e       	andi	r24, 0xEF	; 239
    3eca:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3ecc:	af e4       	ldi	r26, 0x4F	; 79
    3ece:	b0 e0       	ldi	r27, 0x00	; 0
    3ed0:	ef e4       	ldi	r30, 0x4F	; 79
    3ed2:	f0 e0       	ldi	r31, 0x00	; 0
    3ed4:	80 81       	ld	r24, Z
    3ed6:	80 62       	ori	r24, 0x20	; 32
    3ed8:	8c 93       	st	X, r24
    3eda:	0e c0       	rjmp	.+28     	; 0x3ef8 <TIMER_voidTimer1Enable+0x67a>
		break;
	case    TIMER1_MODE_CHANNEL_B_SET_OC1B :
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3edc:	af e4       	ldi	r26, 0x4F	; 79
    3ede:	b0 e0       	ldi	r27, 0x00	; 0
    3ee0:	ef e4       	ldi	r30, 0x4F	; 79
    3ee2:	f0 e0       	ldi	r31, 0x00	; 0
    3ee4:	80 81       	ld	r24, Z
    3ee6:	80 61       	ori	r24, 0x10	; 16
    3ee8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3eea:	af e4       	ldi	r26, 0x4F	; 79
    3eec:	b0 e0       	ldi	r27, 0x00	; 0
    3eee:	ef e4       	ldi	r30, 0x4F	; 79
    3ef0:	f0 e0       	ldi	r31, 0x00	; 0
    3ef2:	80 81       	ld	r24, Z
    3ef4:	80 62       	ori	r24, 0x20	; 32
    3ef6:	8c 93       	st	X, r24
#elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_256
	CLR_BIT(TCCR1B,TCCR1B_CS10);
	CLR_BIT(TCCR1B,TCCR1B_CS11);
	SET_BIT(TCCR1B,TCCR1B_CS12);
#elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_1024
	SET_BIT(TCCR1B,TCCR1B_CS10);
    3ef8:	ae e4       	ldi	r26, 0x4E	; 78
    3efa:	b0 e0       	ldi	r27, 0x00	; 0
    3efc:	ee e4       	ldi	r30, 0x4E	; 78
    3efe:	f0 e0       	ldi	r31, 0x00	; 0
    3f00:	80 81       	ld	r24, Z
    3f02:	81 60       	ori	r24, 0x01	; 1
    3f04:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    3f06:	ae e4       	ldi	r26, 0x4E	; 78
    3f08:	b0 e0       	ldi	r27, 0x00	; 0
    3f0a:	ee e4       	ldi	r30, 0x4E	; 78
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	80 81       	ld	r24, Z
    3f10:	8d 7f       	andi	r24, 0xFD	; 253
    3f12:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS12);
    3f14:	ae e4       	ldi	r26, 0x4E	; 78
    3f16:	b0 e0       	ldi	r27, 0x00	; 0
    3f18:	ee e4       	ldi	r30, 0x4E	; 78
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	80 81       	ld	r24, Z
    3f1e:	84 60       	ori	r24, 0x04	; 4
    3f20:	8c 93       	st	X, r24
#elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_EXIT_CLK_T0_RISING
	SET_BIT(TCCR1B,TCCR1B_CS10);
	SET_BIT(TCCR1B,TCCR1B_CS11);
	SET_BIT(TCCR1B,TCCR1B_CS12);
#endif
}
    3f22:	29 96       	adiw	r28, 0x09	; 9
    3f24:	0f b6       	in	r0, 0x3f	; 63
    3f26:	f8 94       	cli
    3f28:	de bf       	out	0x3e, r29	; 62
    3f2a:	0f be       	out	0x3f, r0	; 63
    3f2c:	cd bf       	out	0x3d, r28	; 61
    3f2e:	cf 91       	pop	r28
    3f30:	df 91       	pop	r29
    3f32:	08 95       	ret

00003f34 <TIMER_voidTimer1GeneratePWMOCR1A>:
/*******************************************************************************************************/
void TIMER_voidTimer1GeneratePWMOCR1A(u8 Copy_u8Intensity)
{
    3f34:	df 93       	push	r29
    3f36:	cf 93       	push	r28
    3f38:	00 d0       	rcall	.+0      	; 0x3f3a <TIMER_voidTimer1GeneratePWMOCR1A+0x6>
    3f3a:	00 d0       	rcall	.+0      	; 0x3f3c <TIMER_voidTimer1GeneratePWMOCR1A+0x8>
    3f3c:	0f 92       	push	r0
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1AValue;
	switch(TIMER1_u8MODEPWM)
    3f44:	80 91 a2 01 	lds	r24, 0x01A2
    3f48:	28 2f       	mov	r18, r24
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	3d 83       	std	Y+5, r19	; 0x05
    3f4e:	2c 83       	std	Y+4, r18	; 0x04
    3f50:	4c 81       	ldd	r20, Y+4	; 0x04
    3f52:	5d 81       	ldd	r21, Y+5	; 0x05
    3f54:	43 30       	cpi	r20, 0x03	; 3
    3f56:	51 05       	cpc	r21, r1
    3f58:	09 f4       	brne	.+2      	; 0x3f5c <TIMER_voidTimer1GeneratePWMOCR1A+0x28>
    3f5a:	5b c0       	rjmp	.+182    	; 0x4012 <TIMER_voidTimer1GeneratePWMOCR1A+0xde>
    3f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f60:	84 30       	cpi	r24, 0x04	; 4
    3f62:	91 05       	cpc	r25, r1
    3f64:	5c f4       	brge	.+22     	; 0x3f7c <TIMER_voidTimer1GeneratePWMOCR1A+0x48>
    3f66:	2c 81       	ldd	r18, Y+4	; 0x04
    3f68:	3d 81       	ldd	r19, Y+5	; 0x05
    3f6a:	21 30       	cpi	r18, 0x01	; 1
    3f6c:	31 05       	cpc	r19, r1
    3f6e:	c9 f0       	breq	.+50     	; 0x3fa2 <TIMER_voidTimer1GeneratePWMOCR1A+0x6e>
    3f70:	4c 81       	ldd	r20, Y+4	; 0x04
    3f72:	5d 81       	ldd	r21, Y+5	; 0x05
    3f74:	42 30       	cpi	r20, 0x02	; 2
    3f76:	51 05       	cpc	r21, r1
    3f78:	81 f1       	breq	.+96     	; 0x3fda <TIMER_voidTimer1GeneratePWMOCR1A+0xa6>
    3f7a:	ab c0       	rjmp	.+342    	; 0x40d2 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
    3f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f80:	86 30       	cpi	r24, 0x06	; 6
    3f82:	91 05       	cpc	r25, r1
    3f84:	09 f4       	brne	.+2      	; 0x3f88 <TIMER_voidTimer1GeneratePWMOCR1A+0x54>
    3f86:	75 c0       	rjmp	.+234    	; 0x4072 <TIMER_voidTimer1GeneratePWMOCR1A+0x13e>
    3f88:	2c 81       	ldd	r18, Y+4	; 0x04
    3f8a:	3d 81       	ldd	r19, Y+5	; 0x05
    3f8c:	27 30       	cpi	r18, 0x07	; 7
    3f8e:	31 05       	cpc	r19, r1
    3f90:	09 f4       	brne	.+2      	; 0x3f94 <TIMER_voidTimer1GeneratePWMOCR1A+0x60>
    3f92:	84 c0       	rjmp	.+264    	; 0x409c <TIMER_voidTimer1GeneratePWMOCR1A+0x168>
    3f94:	4c 81       	ldd	r20, Y+4	; 0x04
    3f96:	5d 81       	ldd	r21, Y+5	; 0x05
    3f98:	45 30       	cpi	r20, 0x05	; 5
    3f9a:	51 05       	cpc	r21, r1
    3f9c:	09 f4       	brne	.+2      	; 0x3fa0 <TIMER_voidTimer1GeneratePWMOCR1A+0x6c>
    3f9e:	55 c0       	rjmp	.+170    	; 0x404a <TIMER_voidTimer1GeneratePWMOCR1A+0x116>
    3fa0:	98 c0       	rjmp	.+304    	; 0x40d2 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	{
	case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
		Copy_u16OCR1AValue=((u16)510*Copy_u8Intensity/100);
    3fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa4:	28 2f       	mov	r18, r24
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	8e ef       	ldi	r24, 0xFE	; 254
    3faa:	91 e0       	ldi	r25, 0x01	; 1
    3fac:	ac 01       	movw	r20, r24
    3fae:	24 9f       	mul	r18, r20
    3fb0:	c0 01       	movw	r24, r0
    3fb2:	25 9f       	mul	r18, r21
    3fb4:	90 0d       	add	r25, r0
    3fb6:	34 9f       	mul	r19, r20
    3fb8:	90 0d       	add	r25, r0
    3fba:	11 24       	eor	r1, r1
    3fbc:	24 e6       	ldi	r18, 0x64	; 100
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	b9 01       	movw	r22, r18
    3fc2:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodhi4>
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	9a 83       	std	Y+2, r25	; 0x02
    3fca:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    3fcc:	ea e4       	ldi	r30, 0x4A	; 74
    3fce:	f0 e0       	ldi	r31, 0x00	; 0
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd4:	91 83       	std	Z+1, r25	; 0x01
    3fd6:	80 83       	st	Z, r24
    3fd8:	7c c0       	rjmp	.+248    	; 0x40d2 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
		Copy_u16OCR1AValue=((u16)1022*Copy_u8Intensity/100);
    3fda:	8b 81       	ldd	r24, Y+3	; 0x03
    3fdc:	28 2f       	mov	r18, r24
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	8e ef       	ldi	r24, 0xFE	; 254
    3fe2:	93 e0       	ldi	r25, 0x03	; 3
    3fe4:	ac 01       	movw	r20, r24
    3fe6:	24 9f       	mul	r18, r20
    3fe8:	c0 01       	movw	r24, r0
    3fea:	25 9f       	mul	r18, r21
    3fec:	90 0d       	add	r25, r0
    3fee:	34 9f       	mul	r19, r20
    3ff0:	90 0d       	add	r25, r0
    3ff2:	11 24       	eor	r1, r1
    3ff4:	24 e6       	ldi	r18, 0x64	; 100
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	b9 01       	movw	r22, r18
    3ffa:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodhi4>
    3ffe:	cb 01       	movw	r24, r22
    4000:	9a 83       	std	Y+2, r25	; 0x02
    4002:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    4004:	ea e4       	ldi	r30, 0x4A	; 74
    4006:	f0 e0       	ldi	r31, 0x00	; 0
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	9a 81       	ldd	r25, Y+2	; 0x02
    400c:	91 83       	std	Z+1, r25	; 0x01
    400e:	80 83       	st	Z, r24
    4010:	60 c0       	rjmp	.+192    	; 0x40d2 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
		Copy_u16OCR1AValue=((u16)2046*Copy_u8Intensity/100);
    4012:	8b 81       	ldd	r24, Y+3	; 0x03
    4014:	28 2f       	mov	r18, r24
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	8e ef       	ldi	r24, 0xFE	; 254
    401a:	97 e0       	ldi	r25, 0x07	; 7
    401c:	ac 01       	movw	r20, r24
    401e:	24 9f       	mul	r18, r20
    4020:	c0 01       	movw	r24, r0
    4022:	25 9f       	mul	r18, r21
    4024:	90 0d       	add	r25, r0
    4026:	34 9f       	mul	r19, r20
    4028:	90 0d       	add	r25, r0
    402a:	11 24       	eor	r1, r1
    402c:	24 e6       	ldi	r18, 0x64	; 100
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	b9 01       	movw	r22, r18
    4032:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodhi4>
    4036:	cb 01       	movw	r24, r22
    4038:	9a 83       	std	Y+2, r25	; 0x02
    403a:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    403c:	ea e4       	ldi	r30, 0x4A	; 74
    403e:	f0 e0       	ldi	r31, 0x00	; 0
    4040:	89 81       	ldd	r24, Y+1	; 0x01
    4042:	9a 81       	ldd	r25, Y+2	; 0x02
    4044:	91 83       	std	Z+1, r25	; 0x01
    4046:	80 83       	st	Z, r24
    4048:	44 c0       	rjmp	.+136    	; 0x40d2 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;

	case TIMER1_MODE_FAST_PWM_8 :
		Copy_u16OCR1AValue=(256*Copy_u8Intensity/100);
    404a:	8b 81       	ldd	r24, Y+3	; 0x03
    404c:	88 2f       	mov	r24, r24
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	98 2f       	mov	r25, r24
    4052:	88 27       	eor	r24, r24
    4054:	24 e6       	ldi	r18, 0x64	; 100
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	b9 01       	movw	r22, r18
    405a:	0e 94 31 23 	call	0x4662	; 0x4662 <__divmodhi4>
    405e:	cb 01       	movw	r24, r22
    4060:	9a 83       	std	Y+2, r25	; 0x02
    4062:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    4064:	ea e4       	ldi	r30, 0x4A	; 74
    4066:	f0 e0       	ldi	r31, 0x00	; 0
    4068:	89 81       	ldd	r24, Y+1	; 0x01
    406a:	9a 81       	ldd	r25, Y+2	; 0x02
    406c:	91 83       	std	Z+1, r25	; 0x01
    406e:	80 83       	st	Z, r24
    4070:	30 c0       	rjmp	.+96     	; 0x40d2 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_9 :
		Copy_u16OCR1AValue=(512*Copy_u8Intensity/100);
    4072:	8b 81       	ldd	r24, Y+3	; 0x03
    4074:	88 2f       	mov	r24, r24
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	98 2f       	mov	r25, r24
    407a:	88 27       	eor	r24, r24
    407c:	99 0f       	add	r25, r25
    407e:	24 e6       	ldi	r18, 0x64	; 100
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	b9 01       	movw	r22, r18
    4084:	0e 94 31 23 	call	0x4662	; 0x4662 <__divmodhi4>
    4088:	cb 01       	movw	r24, r22
    408a:	9a 83       	std	Y+2, r25	; 0x02
    408c:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    408e:	ea e4       	ldi	r30, 0x4A	; 74
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	9a 81       	ldd	r25, Y+2	; 0x02
    4096:	91 83       	std	Z+1, r25	; 0x01
    4098:	80 83       	st	Z, r24
    409a:	1b c0       	rjmp	.+54     	; 0x40d2 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_10 :
		Copy_u16OCR1AValue=((u16)1023*Copy_u8Intensity/100);
    409c:	8b 81       	ldd	r24, Y+3	; 0x03
    409e:	28 2f       	mov	r18, r24
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	8f ef       	ldi	r24, 0xFF	; 255
    40a4:	93 e0       	ldi	r25, 0x03	; 3
    40a6:	ac 01       	movw	r20, r24
    40a8:	24 9f       	mul	r18, r20
    40aa:	c0 01       	movw	r24, r0
    40ac:	25 9f       	mul	r18, r21
    40ae:	90 0d       	add	r25, r0
    40b0:	34 9f       	mul	r19, r20
    40b2:	90 0d       	add	r25, r0
    40b4:	11 24       	eor	r1, r1
    40b6:	24 e6       	ldi	r18, 0x64	; 100
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	b9 01       	movw	r22, r18
    40bc:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodhi4>
    40c0:	cb 01       	movw	r24, r22
    40c2:	9a 83       	std	Y+2, r25	; 0x02
    40c4:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    40c6:	ea e4       	ldi	r30, 0x4A	; 74
    40c8:	f0 e0       	ldi	r31, 0x00	; 0
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
    40cc:	9a 81       	ldd	r25, Y+2	; 0x02
    40ce:	91 83       	std	Z+1, r25	; 0x01
    40d0:	80 83       	st	Z, r24
		break;
	}
}
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	0f 90       	pop	r0
    40dc:	cf 91       	pop	r28
    40de:	df 91       	pop	r29
    40e0:	08 95       	ret

000040e2 <TIMER_voidTimer1GeneratePWMOCR1B>:
void TIMER_voidTimer1GeneratePWMOCR1B(u8 Copy_u8Intensity)
{
    40e2:	df 93       	push	r29
    40e4:	cf 93       	push	r28
    40e6:	00 d0       	rcall	.+0      	; 0x40e8 <TIMER_voidTimer1GeneratePWMOCR1B+0x6>
    40e8:	00 d0       	rcall	.+0      	; 0x40ea <TIMER_voidTimer1GeneratePWMOCR1B+0x8>
    40ea:	0f 92       	push	r0
    40ec:	cd b7       	in	r28, 0x3d	; 61
    40ee:	de b7       	in	r29, 0x3e	; 62
    40f0:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1BValue;
	switch(TIMER1_u8MODEPWM)
    40f2:	80 91 a2 01 	lds	r24, 0x01A2
    40f6:	28 2f       	mov	r18, r24
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	3d 83       	std	Y+5, r19	; 0x05
    40fc:	2c 83       	std	Y+4, r18	; 0x04
    40fe:	4c 81       	ldd	r20, Y+4	; 0x04
    4100:	5d 81       	ldd	r21, Y+5	; 0x05
    4102:	43 30       	cpi	r20, 0x03	; 3
    4104:	51 05       	cpc	r21, r1
    4106:	09 f4       	brne	.+2      	; 0x410a <TIMER_voidTimer1GeneratePWMOCR1B+0x28>
    4108:	5b c0       	rjmp	.+182    	; 0x41c0 <TIMER_voidTimer1GeneratePWMOCR1B+0xde>
    410a:	8c 81       	ldd	r24, Y+4	; 0x04
    410c:	9d 81       	ldd	r25, Y+5	; 0x05
    410e:	84 30       	cpi	r24, 0x04	; 4
    4110:	91 05       	cpc	r25, r1
    4112:	5c f4       	brge	.+22     	; 0x412a <TIMER_voidTimer1GeneratePWMOCR1B+0x48>
    4114:	2c 81       	ldd	r18, Y+4	; 0x04
    4116:	3d 81       	ldd	r19, Y+5	; 0x05
    4118:	21 30       	cpi	r18, 0x01	; 1
    411a:	31 05       	cpc	r19, r1
    411c:	c9 f0       	breq	.+50     	; 0x4150 <TIMER_voidTimer1GeneratePWMOCR1B+0x6e>
    411e:	4c 81       	ldd	r20, Y+4	; 0x04
    4120:	5d 81       	ldd	r21, Y+5	; 0x05
    4122:	42 30       	cpi	r20, 0x02	; 2
    4124:	51 05       	cpc	r21, r1
    4126:	81 f1       	breq	.+96     	; 0x4188 <TIMER_voidTimer1GeneratePWMOCR1B+0xa6>
    4128:	ab c0       	rjmp	.+342    	; 0x4280 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
    412a:	8c 81       	ldd	r24, Y+4	; 0x04
    412c:	9d 81       	ldd	r25, Y+5	; 0x05
    412e:	86 30       	cpi	r24, 0x06	; 6
    4130:	91 05       	cpc	r25, r1
    4132:	09 f4       	brne	.+2      	; 0x4136 <TIMER_voidTimer1GeneratePWMOCR1B+0x54>
    4134:	75 c0       	rjmp	.+234    	; 0x4220 <TIMER_voidTimer1GeneratePWMOCR1B+0x13e>
    4136:	2c 81       	ldd	r18, Y+4	; 0x04
    4138:	3d 81       	ldd	r19, Y+5	; 0x05
    413a:	27 30       	cpi	r18, 0x07	; 7
    413c:	31 05       	cpc	r19, r1
    413e:	09 f4       	brne	.+2      	; 0x4142 <TIMER_voidTimer1GeneratePWMOCR1B+0x60>
    4140:	84 c0       	rjmp	.+264    	; 0x424a <TIMER_voidTimer1GeneratePWMOCR1B+0x168>
    4142:	4c 81       	ldd	r20, Y+4	; 0x04
    4144:	5d 81       	ldd	r21, Y+5	; 0x05
    4146:	45 30       	cpi	r20, 0x05	; 5
    4148:	51 05       	cpc	r21, r1
    414a:	09 f4       	brne	.+2      	; 0x414e <TIMER_voidTimer1GeneratePWMOCR1B+0x6c>
    414c:	55 c0       	rjmp	.+170    	; 0x41f8 <TIMER_voidTimer1GeneratePWMOCR1B+0x116>
    414e:	98 c0       	rjmp	.+304    	; 0x4280 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	{
	case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
		Copy_u16OCR1BValue=((u16)510*Copy_u8Intensity/100);
    4150:	8b 81       	ldd	r24, Y+3	; 0x03
    4152:	28 2f       	mov	r18, r24
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	8e ef       	ldi	r24, 0xFE	; 254
    4158:	91 e0       	ldi	r25, 0x01	; 1
    415a:	ac 01       	movw	r20, r24
    415c:	24 9f       	mul	r18, r20
    415e:	c0 01       	movw	r24, r0
    4160:	25 9f       	mul	r18, r21
    4162:	90 0d       	add	r25, r0
    4164:	34 9f       	mul	r19, r20
    4166:	90 0d       	add	r25, r0
    4168:	11 24       	eor	r1, r1
    416a:	24 e6       	ldi	r18, 0x64	; 100
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	b9 01       	movw	r22, r18
    4170:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodhi4>
    4174:	cb 01       	movw	r24, r22
    4176:	9a 83       	std	Y+2, r25	; 0x02
    4178:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    417a:	e8 e4       	ldi	r30, 0x48	; 72
    417c:	f0 e0       	ldi	r31, 0x00	; 0
    417e:	89 81       	ldd	r24, Y+1	; 0x01
    4180:	9a 81       	ldd	r25, Y+2	; 0x02
    4182:	91 83       	std	Z+1, r25	; 0x01
    4184:	80 83       	st	Z, r24
    4186:	7c c0       	rjmp	.+248    	; 0x4280 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
		Copy_u16OCR1BValue=((u16)1022*Copy_u8Intensity/100);
    4188:	8b 81       	ldd	r24, Y+3	; 0x03
    418a:	28 2f       	mov	r18, r24
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	8e ef       	ldi	r24, 0xFE	; 254
    4190:	93 e0       	ldi	r25, 0x03	; 3
    4192:	ac 01       	movw	r20, r24
    4194:	24 9f       	mul	r18, r20
    4196:	c0 01       	movw	r24, r0
    4198:	25 9f       	mul	r18, r21
    419a:	90 0d       	add	r25, r0
    419c:	34 9f       	mul	r19, r20
    419e:	90 0d       	add	r25, r0
    41a0:	11 24       	eor	r1, r1
    41a2:	24 e6       	ldi	r18, 0x64	; 100
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	b9 01       	movw	r22, r18
    41a8:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodhi4>
    41ac:	cb 01       	movw	r24, r22
    41ae:	9a 83       	std	Y+2, r25	; 0x02
    41b0:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    41b2:	e8 e4       	ldi	r30, 0x48	; 72
    41b4:	f0 e0       	ldi	r31, 0x00	; 0
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ba:	91 83       	std	Z+1, r25	; 0x01
    41bc:	80 83       	st	Z, r24
    41be:	60 c0       	rjmp	.+192    	; 0x4280 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
		Copy_u16OCR1BValue=((u16)2046*Copy_u8Intensity/100);
    41c0:	8b 81       	ldd	r24, Y+3	; 0x03
    41c2:	28 2f       	mov	r18, r24
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	8e ef       	ldi	r24, 0xFE	; 254
    41c8:	97 e0       	ldi	r25, 0x07	; 7
    41ca:	ac 01       	movw	r20, r24
    41cc:	24 9f       	mul	r18, r20
    41ce:	c0 01       	movw	r24, r0
    41d0:	25 9f       	mul	r18, r21
    41d2:	90 0d       	add	r25, r0
    41d4:	34 9f       	mul	r19, r20
    41d6:	90 0d       	add	r25, r0
    41d8:	11 24       	eor	r1, r1
    41da:	24 e6       	ldi	r18, 0x64	; 100
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	b9 01       	movw	r22, r18
    41e0:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodhi4>
    41e4:	cb 01       	movw	r24, r22
    41e6:	9a 83       	std	Y+2, r25	; 0x02
    41e8:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    41ea:	e8 e4       	ldi	r30, 0x48	; 72
    41ec:	f0 e0       	ldi	r31, 0x00	; 0
    41ee:	89 81       	ldd	r24, Y+1	; 0x01
    41f0:	9a 81       	ldd	r25, Y+2	; 0x02
    41f2:	91 83       	std	Z+1, r25	; 0x01
    41f4:	80 83       	st	Z, r24
    41f6:	44 c0       	rjmp	.+136    	; 0x4280 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;

	case TIMER1_MODE_FAST_PWM_8 :
		Copy_u16OCR1BValue=(256*Copy_u8Intensity/100);
    41f8:	8b 81       	ldd	r24, Y+3	; 0x03
    41fa:	88 2f       	mov	r24, r24
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	98 2f       	mov	r25, r24
    4200:	88 27       	eor	r24, r24
    4202:	24 e6       	ldi	r18, 0x64	; 100
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	b9 01       	movw	r22, r18
    4208:	0e 94 31 23 	call	0x4662	; 0x4662 <__divmodhi4>
    420c:	cb 01       	movw	r24, r22
    420e:	9a 83       	std	Y+2, r25	; 0x02
    4210:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    4212:	e8 e4       	ldi	r30, 0x48	; 72
    4214:	f0 e0       	ldi	r31, 0x00	; 0
    4216:	89 81       	ldd	r24, Y+1	; 0x01
    4218:	9a 81       	ldd	r25, Y+2	; 0x02
    421a:	91 83       	std	Z+1, r25	; 0x01
    421c:	80 83       	st	Z, r24
    421e:	30 c0       	rjmp	.+96     	; 0x4280 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_9 :
		Copy_u16OCR1BValue=(512*Copy_u8Intensity/100);
    4220:	8b 81       	ldd	r24, Y+3	; 0x03
    4222:	88 2f       	mov	r24, r24
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	98 2f       	mov	r25, r24
    4228:	88 27       	eor	r24, r24
    422a:	99 0f       	add	r25, r25
    422c:	24 e6       	ldi	r18, 0x64	; 100
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	b9 01       	movw	r22, r18
    4232:	0e 94 31 23 	call	0x4662	; 0x4662 <__divmodhi4>
    4236:	cb 01       	movw	r24, r22
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    423c:	e8 e4       	ldi	r30, 0x48	; 72
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	89 81       	ldd	r24, Y+1	; 0x01
    4242:	9a 81       	ldd	r25, Y+2	; 0x02
    4244:	91 83       	std	Z+1, r25	; 0x01
    4246:	80 83       	st	Z, r24
    4248:	1b c0       	rjmp	.+54     	; 0x4280 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_10 :
		Copy_u16OCR1BValue=((u16)1023*Copy_u8Intensity/100);
    424a:	8b 81       	ldd	r24, Y+3	; 0x03
    424c:	28 2f       	mov	r18, r24
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	8f ef       	ldi	r24, 0xFF	; 255
    4252:	93 e0       	ldi	r25, 0x03	; 3
    4254:	ac 01       	movw	r20, r24
    4256:	24 9f       	mul	r18, r20
    4258:	c0 01       	movw	r24, r0
    425a:	25 9f       	mul	r18, r21
    425c:	90 0d       	add	r25, r0
    425e:	34 9f       	mul	r19, r20
    4260:	90 0d       	add	r25, r0
    4262:	11 24       	eor	r1, r1
    4264:	24 e6       	ldi	r18, 0x64	; 100
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	b9 01       	movw	r22, r18
    426a:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodhi4>
    426e:	cb 01       	movw	r24, r22
    4270:	9a 83       	std	Y+2, r25	; 0x02
    4272:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    4274:	e8 e4       	ldi	r30, 0x48	; 72
    4276:	f0 e0       	ldi	r31, 0x00	; 0
    4278:	89 81       	ldd	r24, Y+1	; 0x01
    427a:	9a 81       	ldd	r25, Y+2	; 0x02
    427c:	91 83       	std	Z+1, r25	; 0x01
    427e:	80 83       	st	Z, r24
		break;
	}
}
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	cf 91       	pop	r28
    428c:	df 91       	pop	r29
    428e:	08 95       	ret

00004290 <TIMER_voidTimer1SetOCR1A>:

/*************************************************************************************************************/
void TIMER_voidTimer1SetOCR1A(u16 Copy_u16OCR1A)
{
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	00 d0       	rcall	.+0      	; 0x4296 <TIMER_voidTimer1SetOCR1A+0x6>
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
    429a:	9a 83       	std	Y+2, r25	; 0x02
    429c:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH = (u8)(Copy_u16OCR1A>>8);
    429e:	eb e4       	ldi	r30, 0x4B	; 75
    42a0:	f0 e0       	ldi	r31, 0x00	; 0
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	9a 81       	ldd	r25, Y+2	; 0x02
    42a6:	89 2f       	mov	r24, r25
    42a8:	99 27       	eor	r25, r25
    42aa:	80 83       	st	Z, r24
	OCR1AL = (u8)(Copy_u16OCR1A);
    42ac:	ea e4       	ldi	r30, 0x4A	; 74
    42ae:	f0 e0       	ldi	r31, 0x00	; 0
    42b0:	89 81       	ldd	r24, Y+1	; 0x01
    42b2:	80 83       	st	Z, r24
}
    42b4:	0f 90       	pop	r0
    42b6:	0f 90       	pop	r0
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	08 95       	ret

000042be <TIMER_voidTimer1SetOCR1B>:
void TIMER_voidTimer1SetOCR1B(u16 Copy_u16OCR1B)
{
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	00 d0       	rcall	.+0      	; 0x42c4 <TIMER_voidTimer1SetOCR1B+0x6>
    42c4:	cd b7       	in	r28, 0x3d	; 61
    42c6:	de b7       	in	r29, 0x3e	; 62
    42c8:	9a 83       	std	Y+2, r25	; 0x02
    42ca:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH = (u8)(Copy_u16OCR1B>>8);
    42cc:	e9 e4       	ldi	r30, 0x49	; 73
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	9a 81       	ldd	r25, Y+2	; 0x02
    42d4:	89 2f       	mov	r24, r25
    42d6:	99 27       	eor	r25, r25
    42d8:	80 83       	st	Z, r24
	OCR1BL = (u8)(Copy_u16OCR1B);
    42da:	e8 e4       	ldi	r30, 0x48	; 72
    42dc:	f0 e0       	ldi	r31, 0x00	; 0
    42de:	89 81       	ldd	r24, Y+1	; 0x01
    42e0:	80 83       	st	Z, r24
}
    42e2:	0f 90       	pop	r0
    42e4:	0f 90       	pop	r0
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <TIMER_voidTimer1SetICR1>:
void TIMER_voidTimer1SetICR1(u16 Copy_u16ICR1)
{
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	00 d0       	rcall	.+0      	; 0x42f2 <TIMER_voidTimer1SetICR1+0x6>
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62
    42f6:	9a 83       	std	Y+2, r25	; 0x02
    42f8:	89 83       	std	Y+1, r24	; 0x01
	ICR1H = (u8)(Copy_u16ICR1>>8);
    42fa:	e7 e4       	ldi	r30, 0x47	; 71
    42fc:	f0 e0       	ldi	r31, 0x00	; 0
    42fe:	89 81       	ldd	r24, Y+1	; 0x01
    4300:	9a 81       	ldd	r25, Y+2	; 0x02
    4302:	89 2f       	mov	r24, r25
    4304:	99 27       	eor	r25, r25
    4306:	80 83       	st	Z, r24
	ICR1L = (u8)(Copy_u16ICR1);
    4308:	e6 e4       	ldi	r30, 0x46	; 70
    430a:	f0 e0       	ldi	r31, 0x00	; 0
    430c:	89 81       	ldd	r24, Y+1	; 0x01
    430e:	80 83       	st	Z, r24
}
    4310:	0f 90       	pop	r0
    4312:	0f 90       	pop	r0
    4314:	cf 91       	pop	r28
    4316:	df 91       	pop	r29
    4318:	08 95       	ret

0000431a <TIMER_voidTimer1Stop>:

void TIMER_voidTimer1Stop(void)
{
    431a:	df 93       	push	r29
    431c:	cf 93       	push	r28
    431e:	cd b7       	in	r28, 0x3d	; 61
    4320:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    4322:	ae e4       	ldi	r26, 0x4E	; 78
    4324:	b0 e0       	ldi	r27, 0x00	; 0
    4326:	ee e4       	ldi	r30, 0x4E	; 78
    4328:	f0 e0       	ldi	r31, 0x00	; 0
    432a:	80 81       	ld	r24, Z
    432c:	8b 7f       	andi	r24, 0xFB	; 251
    432e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    4330:	ae e4       	ldi	r26, 0x4E	; 78
    4332:	b0 e0       	ldi	r27, 0x00	; 0
    4334:	ee e4       	ldi	r30, 0x4E	; 78
    4336:	f0 e0       	ldi	r31, 0x00	; 0
    4338:	80 81       	ld	r24, Z
    433a:	8d 7f       	andi	r24, 0xFD	; 253
    433c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    433e:	ae e4       	ldi	r26, 0x4E	; 78
    4340:	b0 e0       	ldi	r27, 0x00	; 0
    4342:	ee e4       	ldi	r30, 0x4E	; 78
    4344:	f0 e0       	ldi	r31, 0x00	; 0
    4346:	80 81       	ld	r24, Z
    4348:	8e 7f       	andi	r24, 0xFE	; 254
    434a:	8c 93       	st	X, r24
}
    434c:	cf 91       	pop	r28
    434e:	df 91       	pop	r29
    4350:	08 95       	ret

00004352 <TIMER_voidTimer1Continue>:
void TIMER_voidTimer1Continue(void)
{
    4352:	df 93       	push	r29
    4354:	cf 93       	push	r28
    4356:	cd b7       	in	r28, 0x3d	; 61
    4358:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,TCCR1B_CS12);
    435a:	ae e4       	ldi	r26, 0x4E	; 78
    435c:	b0 e0       	ldi	r27, 0x00	; 0
    435e:	ee e4       	ldi	r30, 0x4E	; 78
    4360:	f0 e0       	ldi	r31, 0x00	; 0
    4362:	80 81       	ld	r24, Z
    4364:	84 60       	ori	r24, 0x04	; 4
    4366:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS10);
    4368:	ae e4       	ldi	r26, 0x4E	; 78
    436a:	b0 e0       	ldi	r27, 0x00	; 0
    436c:	ee e4       	ldi	r30, 0x4E	; 78
    436e:	f0 e0       	ldi	r31, 0x00	; 0
    4370:	80 81       	ld	r24, Z
    4372:	81 60       	ori	r24, 0x01	; 1
    4374:	8c 93       	st	X, r24
}
    4376:	cf 91       	pop	r28
    4378:	df 91       	pop	r29
    437a:	08 95       	ret

0000437c <TIMER_voidTimer1SetCallBack>:
void TIMER_voidTimer1SetCallBack(void (*Copy_pFun) (void))
{
    437c:	df 93       	push	r29
    437e:	cf 93       	push	r28
    4380:	00 d0       	rcall	.+0      	; 0x4382 <TIMER_voidTimer1SetCallBack+0x6>
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
    4386:	9a 83       	std	Y+2, r25	; 0x02
    4388:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_pSetCallBack = Copy_pFun;
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	9a 81       	ldd	r25, Y+2	; 0x02
    438e:	90 93 9d 01 	sts	0x019D, r25
    4392:	80 93 9c 01 	sts	0x019C, r24
}
    4396:	0f 90       	pop	r0
    4398:	0f 90       	pop	r0
    439a:	cf 91       	pop	r28
    439c:	df 91       	pop	r29
    439e:	08 95       	ret

000043a0 <TIMER_voidTimer1ICUInit>:
 *                                                           ICU Timer 1                                                             *
 **************************************************************************************************************************************/
static void(*Timer1_pICUSetCallBack)(void);
/************************************************************************************************************************************/
void TIMER_voidTimer1ICUInit(void)
{
    43a0:	df 93       	push	r29
    43a2:	cf 93       	push	r28
    43a4:	cd b7       	in	r28, 0x3d	; 61
    43a6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    43a8:	ae e4       	ldi	r26, 0x4E	; 78
    43aa:	b0 e0       	ldi	r27, 0x00	; 0
    43ac:	ee e4       	ldi	r30, 0x4E	; 78
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	80 81       	ld	r24, Z
    43b2:	80 64       	ori	r24, 0x40	; 64
    43b4:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TIMSK_TICIE1);
    43b6:	a9 e5       	ldi	r26, 0x59	; 89
    43b8:	b0 e0       	ldi	r27, 0x00	; 0
    43ba:	e9 e5       	ldi	r30, 0x59	; 89
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	80 81       	ld	r24, Z
    43c0:	80 62       	ori	r24, 0x20	; 32
    43c2:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B,TCCR1B_CS10);
    43c4:	ae e4       	ldi	r26, 0x4E	; 78
    43c6:	b0 e0       	ldi	r27, 0x00	; 0
    43c8:	ee e4       	ldi	r30, 0x4E	; 78
    43ca:	f0 e0       	ldi	r31, 0x00	; 0
    43cc:	80 81       	ld	r24, Z
    43ce:	8e 7f       	andi	r24, 0xFE	; 254
    43d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    43d2:	ae e4       	ldi	r26, 0x4E	; 78
    43d4:	b0 e0       	ldi	r27, 0x00	; 0
    43d6:	ee e4       	ldi	r30, 0x4E	; 78
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	80 81       	ld	r24, Z
    43dc:	82 60       	ori	r24, 0x02	; 2
    43de:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    43e0:	ae e4       	ldi	r26, 0x4E	; 78
    43e2:	b0 e0       	ldi	r27, 0x00	; 0
    43e4:	ee e4       	ldi	r30, 0x4E	; 78
    43e6:	f0 e0       	ldi	r31, 0x00	; 0
    43e8:	80 81       	ld	r24, Z
    43ea:	8b 7f       	andi	r24, 0xFB	; 251
    43ec:	8c 93       	st	X, r24

	TCNT1 = 0;
    43ee:	ec e4       	ldi	r30, 0x4C	; 76
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	11 82       	std	Z+1, r1	; 0x01
    43f4:	10 82       	st	Z, r1
	ICR1 = 0;
    43f6:	e6 e4       	ldi	r30, 0x46	; 70
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	11 82       	std	Z+1, r1	; 0x01
    43fc:	10 82       	st	Z, r1
}
    43fe:	cf 91       	pop	r28
    4400:	df 91       	pop	r29
    4402:	08 95       	ret

00004404 <TIMER_voidTimer1ICUSetTriggerEdge>:
void TIMER_voidTimer1ICUSetTriggerEdge(u8 Copy_u8ICUEdgeType)
{
    4404:	df 93       	push	r29
    4406:	cf 93       	push	r28
    4408:	0f 92       	push	r0
    440a:	cd b7       	in	r28, 0x3d	; 61
    440c:	de b7       	in	r29, 0x3e	; 62
    440e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8ICUEdgeType==TIMER1_ICU_RISING_EDGY_TYPE_MODE)
    4410:	89 81       	ldd	r24, Y+1	; 0x01
    4412:	81 30       	cpi	r24, 0x01	; 1
    4414:	41 f4       	brne	.+16     	; 0x4426 <TIMER_voidTimer1ICUSetTriggerEdge+0x22>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4416:	ae e4       	ldi	r26, 0x4E	; 78
    4418:	b0 e0       	ldi	r27, 0x00	; 0
    441a:	ee e4       	ldi	r30, 0x4E	; 78
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	80 81       	ld	r24, Z
    4420:	80 64       	ori	r24, 0x40	; 64
    4422:	8c 93       	st	X, r24
    4424:	0a c0       	rjmp	.+20     	; 0x443a <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
	}
	else if(Copy_u8ICUEdgeType==TIMER1_ICU_FALLING_EDGY_TYPE_MODE)
    4426:	89 81       	ldd	r24, Y+1	; 0x01
    4428:	88 23       	and	r24, r24
    442a:	39 f4       	brne	.+14     	; 0x443a <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    442c:	ae e4       	ldi	r26, 0x4E	; 78
    442e:	b0 e0       	ldi	r27, 0x00	; 0
    4430:	ee e4       	ldi	r30, 0x4E	; 78
    4432:	f0 e0       	ldi	r31, 0x00	; 0
    4434:	80 81       	ld	r24, Z
    4436:	8f 7b       	andi	r24, 0xBF	; 191
    4438:	8c 93       	st	X, r24
	}
}
    443a:	0f 90       	pop	r0
    443c:	cf 91       	pop	r28
    443e:	df 91       	pop	r29
    4440:	08 95       	ret

00004442 <TIMER_voidTimer1ICUGetInputCaptureValue>:
u16 TIMER_voidTimer1ICUGetInputCaptureValue(void)
{
    4442:	df 93       	push	r29
    4444:	cf 93       	push	r28
    4446:	cd b7       	in	r28, 0x3d	; 61
    4448:	de b7       	in	r29, 0x3e	; 62
	return TIMER_u16_ICR1;
    444a:	e6 e4       	ldi	r30, 0x46	; 70
    444c:	f0 e0       	ldi	r31, 0x00	; 0
    444e:	80 81       	ld	r24, Z
    4450:	91 81       	ldd	r25, Z+1	; 0x01
}
    4452:	cf 91       	pop	r28
    4454:	df 91       	pop	r29
    4456:	08 95       	ret

00004458 <TIMER_voidTimer1ICUSetCallBack>:
void TIMER_voidTimer1ICUSetCallBack(void (*Copy_pFun) (void))
{
    4458:	df 93       	push	r29
    445a:	cf 93       	push	r28
    445c:	00 d0       	rcall	.+0      	; 0x445e <TIMER_voidTimer1ICUSetCallBack+0x6>
    445e:	cd b7       	in	r28, 0x3d	; 61
    4460:	de b7       	in	r29, 0x3e	; 62
    4462:	9a 83       	std	Y+2, r25	; 0x02
    4464:	89 83       	std	Y+1, r24	; 0x01
	Timer1_pICUSetCallBack = Copy_pFun;
    4466:	89 81       	ldd	r24, Y+1	; 0x01
    4468:	9a 81       	ldd	r25, Y+2	; 0x02
    446a:	90 93 a1 01 	sts	0x01A1, r25
    446e:	80 93 a0 01 	sts	0x01A0, r24
}
    4472:	0f 90       	pop	r0
    4474:	0f 90       	pop	r0
    4476:	cf 91       	pop	r28
    4478:	df 91       	pop	r29
    447a:	08 95       	ret

0000447c <TIMER_voidClearTimer1Value>:
void TIMER_voidClearTimer1Value(void)
{
    447c:	df 93       	push	r29
    447e:	cf 93       	push	r28
    4480:	cd b7       	in	r28, 0x3d	; 61
    4482:	de b7       	in	r29, 0x3e	; 62
	TIMER_u16_TCNT1 = 0;
    4484:	ec e4       	ldi	r30, 0x4C	; 76
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	11 82       	std	Z+1, r1	; 0x01
    448a:	10 82       	st	Z, r1
}
    448c:	cf 91       	pop	r28
    448e:	df 91       	pop	r29
    4490:	08 95       	ret

00004492 <__vector_5>:

void __vector_5 (void)
{
    4492:	1f 92       	push	r1
    4494:	0f 92       	push	r0
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	0f 92       	push	r0
    449a:	11 24       	eor	r1, r1
    449c:	2f 93       	push	r18
    449e:	3f 93       	push	r19
    44a0:	4f 93       	push	r20
    44a2:	5f 93       	push	r21
    44a4:	6f 93       	push	r22
    44a6:	7f 93       	push	r23
    44a8:	8f 93       	push	r24
    44aa:	9f 93       	push	r25
    44ac:	af 93       	push	r26
    44ae:	bf 93       	push	r27
    44b0:	ef 93       	push	r30
    44b2:	ff 93       	push	r31
    44b4:	df 93       	push	r29
    44b6:	cf 93       	push	r28
    44b8:	cd b7       	in	r28, 0x3d	; 61
    44ba:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_pICUSetCallBack!=NULL)
    44bc:	80 91 a0 01 	lds	r24, 0x01A0
    44c0:	90 91 a1 01 	lds	r25, 0x01A1
    44c4:	00 97       	sbiw	r24, 0x00	; 0
    44c6:	29 f0       	breq	.+10     	; 0x44d2 <__vector_5+0x40>
	{
		Timer1_pICUSetCallBack();
    44c8:	e0 91 a0 01 	lds	r30, 0x01A0
    44cc:	f0 91 a1 01 	lds	r31, 0x01A1
    44d0:	09 95       	icall
	}
}
    44d2:	cf 91       	pop	r28
    44d4:	df 91       	pop	r29
    44d6:	ff 91       	pop	r31
    44d8:	ef 91       	pop	r30
    44da:	bf 91       	pop	r27
    44dc:	af 91       	pop	r26
    44de:	9f 91       	pop	r25
    44e0:	8f 91       	pop	r24
    44e2:	7f 91       	pop	r23
    44e4:	6f 91       	pop	r22
    44e6:	5f 91       	pop	r21
    44e8:	4f 91       	pop	r20
    44ea:	3f 91       	pop	r19
    44ec:	2f 91       	pop	r18
    44ee:	0f 90       	pop	r0
    44f0:	0f be       	out	0x3f, r0	; 63
    44f2:	0f 90       	pop	r0
    44f4:	1f 90       	pop	r1
    44f6:	18 95       	reti

000044f8 <__vector_6>:

void __vector_6 (void)
{
    44f8:	1f 92       	push	r1
    44fa:	0f 92       	push	r0
    44fc:	0f b6       	in	r0, 0x3f	; 63
    44fe:	0f 92       	push	r0
    4500:	11 24       	eor	r1, r1
    4502:	2f 93       	push	r18
    4504:	3f 93       	push	r19
    4506:	4f 93       	push	r20
    4508:	5f 93       	push	r21
    450a:	6f 93       	push	r22
    450c:	7f 93       	push	r23
    450e:	8f 93       	push	r24
    4510:	9f 93       	push	r25
    4512:	af 93       	push	r26
    4514:	bf 93       	push	r27
    4516:	ef 93       	push	r30
    4518:	ff 93       	push	r31
    451a:	df 93       	push	r29
    451c:	cf 93       	push	r28
    451e:	cd b7       	in	r28, 0x3d	; 61
    4520:	de b7       	in	r29, 0x3e	; 62
	if (TIMER1_pSetCallBack!=NULL)
    4522:	80 91 9c 01 	lds	r24, 0x019C
    4526:	90 91 9d 01 	lds	r25, 0x019D
    452a:	00 97       	sbiw	r24, 0x00	; 0
    452c:	29 f0       	breq	.+10     	; 0x4538 <__vector_6+0x40>
	{
		TIMER1_pSetCallBack();
    452e:	e0 91 9c 01 	lds	r30, 0x019C
    4532:	f0 91 9d 01 	lds	r31, 0x019D
    4536:	09 95       	icall
	}
}
    4538:	cf 91       	pop	r28
    453a:	df 91       	pop	r29
    453c:	ff 91       	pop	r31
    453e:	ef 91       	pop	r30
    4540:	bf 91       	pop	r27
    4542:	af 91       	pop	r26
    4544:	9f 91       	pop	r25
    4546:	8f 91       	pop	r24
    4548:	7f 91       	pop	r23
    454a:	6f 91       	pop	r22
    454c:	5f 91       	pop	r21
    454e:	4f 91       	pop	r20
    4550:	3f 91       	pop	r19
    4552:	2f 91       	pop	r18
    4554:	0f 90       	pop	r0
    4556:	0f be       	out	0x3f, r0	; 63
    4558:	0f 90       	pop	r0
    455a:	1f 90       	pop	r1
    455c:	18 95       	reti

0000455e <main>:
#include "DCM_interface.h"
#include "CLCD_interface.h"
#include "LM35_interface.h"

void main(void)
{
    455e:	df 93       	push	r29
    4560:	cf 93       	push	r28
    4562:	0f 92       	push	r0
    4564:	cd b7       	in	r28, 0x3d	; 61
    4566:	de b7       	in	r29, 0x3e	; 62
	u8 Local_TempValue;

	/* Initiate LM35 */
	LM35_voidInit();
    4568:	0e 94 a0 19 	call	0x3340	; 0x3340 <LM35_voidInit>

	/* Initiate DC Motor */
	DCM_voidInit();
    456c:	0e 94 29 14 	call	0x2852	; 0x2852 <DCM_voidInit>

	/* Initiate Character LCD */
	CLCD_voidInit();
    4570:	0e 94 14 12 	call	0x2428	; 0x2428 <CLCD_voidInit>

	CLCD_voidSendStringGoToXY(0, 3, "FAN is ");
    4574:	20 e6       	ldi	r18, 0x60	; 96
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	80 e0       	ldi	r24, 0x00	; 0
    457a:	63 e0       	ldi	r22, 0x03	; 3
    457c:	a9 01       	movw	r20, r18
    457e:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidSendStringGoToXY>

	CLCD_voidSendStringGoToXY(1, 3, "Temp =    C");
    4582:	28 e6       	ldi	r18, 0x68	; 104
    4584:	30 e0       	ldi	r19, 0x00	; 0
    4586:	81 e0       	ldi	r24, 0x01	; 1
    4588:	63 e0       	ldi	r22, 0x03	; 3
    458a:	a9 01       	movw	r20, r18
    458c:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidSendStringGoToXY>

	for(;;)
	{
		/* Get LM35 Temperature Sensor Value */
		Local_TempValue = LM35_u8GetTempValue();
    4590:	0e 94 ae 19 	call	0x335c	; 0x335c <LM35_u8GetTempValue>
    4594:	89 83       	std	Y+1, r24	; 0x01

		/* Display Sensor value On LCD */
		CLCD_voidGoToXY(1,10);
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	6a e0       	ldi	r22, 0x0A	; 10
    459a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <CLCD_voidGoToXY>

		if(Local_TempValue>=100)
    459e:	89 81       	ldd	r24, Y+1	; 0x01
    45a0:	84 36       	cpi	r24, 0x64	; 100
    45a2:	20 f0       	brcs	.+8      	; 0x45ac <main+0x4e>
		{
			CLCD_voidIntegerToString(Local_TempValue);
    45a4:	89 81       	ldd	r24, Y+1	; 0x01
    45a6:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <CLCD_voidIntegerToString>
    45aa:	06 c0       	rjmp	.+12     	; 0x45b8 <main+0x5a>
		}
		else
		{
			CLCD_voidIntegerToString(Local_TempValue);
    45ac:	89 81       	ldd	r24, Y+1	; 0x01
    45ae:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <CLCD_voidIntegerToString>
			CLCD_voidSendData(' ');
    45b2:	80 e2       	ldi	r24, 0x20	; 32
    45b4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <CLCD_voidSendData>
		}

		/* Set speed of the DC Motor */
		if(Local_TempValue<30)
    45b8:	89 81       	ldd	r24, Y+1	; 0x01
    45ba:	8e 31       	cpi	r24, 0x1E	; 30
    45bc:	40 f4       	brcc	.+16     	; 0x45ce <main+0x70>
		{
			//DCM_voidRotate(STOP_STATE , 0);
			CLCD_voidSendStringGoToXY(0, 10, "OFF");
    45be:	24 e7       	ldi	r18, 0x74	; 116
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	80 e0       	ldi	r24, 0x00	; 0
    45c4:	6a e0       	ldi	r22, 0x0A	; 10
    45c6:	a9 01       	movw	r20, r18
    45c8:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidSendStringGoToXY>
    45cc:	e1 cf       	rjmp	.-62     	; 0x4590 <main+0x32>
		}

		else if ((Local_TempValue>=30) && (Local_TempValue<60))
    45ce:	89 81       	ldd	r24, Y+1	; 0x01
    45d0:	8e 31       	cpi	r24, 0x1E	; 30
    45d2:	58 f0       	brcs	.+22     	; 0x45ea <main+0x8c>
    45d4:	89 81       	ldd	r24, Y+1	; 0x01
    45d6:	8c 33       	cpi	r24, 0x3C	; 60
    45d8:	40 f4       	brcc	.+16     	; 0x45ea <main+0x8c>
		{
			CLCD_voidSendStringGoToXY(0, 10, "ON ");
    45da:	28 e7       	ldi	r18, 0x78	; 120
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	6a e0       	ldi	r22, 0x0A	; 10
    45e2:	a9 01       	movw	r20, r18
    45e4:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidSendStringGoToXY>
    45e8:	d3 cf       	rjmp	.-90     	; 0x4590 <main+0x32>

		}

		else if ((Local_TempValue>=60) && (Local_TempValue<90))
    45ea:	89 81       	ldd	r24, Y+1	; 0x01
    45ec:	8c 33       	cpi	r24, 0x3C	; 60
    45ee:	58 f0       	brcs	.+22     	; 0x4606 <main+0xa8>
    45f0:	89 81       	ldd	r24, Y+1	; 0x01
    45f2:	8a 35       	cpi	r24, 0x5A	; 90
    45f4:	40 f4       	brcc	.+16     	; 0x4606 <main+0xa8>
		{
			CLCD_voidSendStringGoToXY(0, 10, "ON ");
    45f6:	28 e7       	ldi	r18, 0x78	; 120
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	6a e0       	ldi	r22, 0x0A	; 10
    45fe:	a9 01       	movw	r20, r18
    4600:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidSendStringGoToXY>
    4604:	c5 cf       	rjmp	.-118    	; 0x4590 <main+0x32>

		}
		else if ((Local_TempValue>=90) && (Local_TempValue<120))
    4606:	89 81       	ldd	r24, Y+1	; 0x01
    4608:	8a 35       	cpi	r24, 0x5A	; 90
    460a:	58 f0       	brcs	.+22     	; 0x4622 <main+0xc4>
    460c:	89 81       	ldd	r24, Y+1	; 0x01
    460e:	88 37       	cpi	r24, 0x78	; 120
    4610:	40 f4       	brcc	.+16     	; 0x4622 <main+0xc4>
		{
			CLCD_voidSendStringGoToXY(0, 10, "ON ");
    4612:	28 e7       	ldi	r18, 0x78	; 120
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	80 e0       	ldi	r24, 0x00	; 0
    4618:	6a e0       	ldi	r22, 0x0A	; 10
    461a:	a9 01       	movw	r20, r18
    461c:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidSendStringGoToXY>
    4620:	b7 cf       	rjmp	.-146    	; 0x4590 <main+0x32>

		}
		else if (Local_TempValue>=120)
    4622:	89 81       	ldd	r24, Y+1	; 0x01
    4624:	88 37       	cpi	r24, 0x78	; 120
    4626:	08 f4       	brcc	.+2      	; 0x462a <main+0xcc>
    4628:	b3 cf       	rjmp	.-154    	; 0x4590 <main+0x32>
		{
			CLCD_voidSendStringGoToXY(0, 10, "ON ");
    462a:	28 e7       	ldi	r18, 0x78	; 120
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	6a e0       	ldi	r22, 0x0A	; 10
    4632:	a9 01       	movw	r20, r18
    4634:	0e 94 34 13 	call	0x2668	; 0x2668 <CLCD_voidSendStringGoToXY>
    4638:	ab cf       	rjmp	.-170    	; 0x4590 <main+0x32>

0000463a <__udivmodhi4>:
    463a:	aa 1b       	sub	r26, r26
    463c:	bb 1b       	sub	r27, r27
    463e:	51 e1       	ldi	r21, 0x11	; 17
    4640:	07 c0       	rjmp	.+14     	; 0x4650 <__udivmodhi4_ep>

00004642 <__udivmodhi4_loop>:
    4642:	aa 1f       	adc	r26, r26
    4644:	bb 1f       	adc	r27, r27
    4646:	a6 17       	cp	r26, r22
    4648:	b7 07       	cpc	r27, r23
    464a:	10 f0       	brcs	.+4      	; 0x4650 <__udivmodhi4_ep>
    464c:	a6 1b       	sub	r26, r22
    464e:	b7 0b       	sbc	r27, r23

00004650 <__udivmodhi4_ep>:
    4650:	88 1f       	adc	r24, r24
    4652:	99 1f       	adc	r25, r25
    4654:	5a 95       	dec	r21
    4656:	a9 f7       	brne	.-22     	; 0x4642 <__udivmodhi4_loop>
    4658:	80 95       	com	r24
    465a:	90 95       	com	r25
    465c:	bc 01       	movw	r22, r24
    465e:	cd 01       	movw	r24, r26
    4660:	08 95       	ret

00004662 <__divmodhi4>:
    4662:	97 fb       	bst	r25, 7
    4664:	09 2e       	mov	r0, r25
    4666:	07 26       	eor	r0, r23
    4668:	0a d0       	rcall	.+20     	; 0x467e <__divmodhi4_neg1>
    466a:	77 fd       	sbrc	r23, 7
    466c:	04 d0       	rcall	.+8      	; 0x4676 <__divmodhi4_neg2>
    466e:	e5 df       	rcall	.-54     	; 0x463a <__udivmodhi4>
    4670:	06 d0       	rcall	.+12     	; 0x467e <__divmodhi4_neg1>
    4672:	00 20       	and	r0, r0
    4674:	1a f4       	brpl	.+6      	; 0x467c <__divmodhi4_exit>

00004676 <__divmodhi4_neg2>:
    4676:	70 95       	com	r23
    4678:	61 95       	neg	r22
    467a:	7f 4f       	sbci	r23, 0xFF	; 255

0000467c <__divmodhi4_exit>:
    467c:	08 95       	ret

0000467e <__divmodhi4_neg1>:
    467e:	f6 f7       	brtc	.-4      	; 0x467c <__divmodhi4_exit>
    4680:	90 95       	com	r25
    4682:	81 95       	neg	r24
    4684:	9f 4f       	sbci	r25, 0xFF	; 255
    4686:	08 95       	ret

00004688 <__udivmodsi4>:
    4688:	a1 e2       	ldi	r26, 0x21	; 33
    468a:	1a 2e       	mov	r1, r26
    468c:	aa 1b       	sub	r26, r26
    468e:	bb 1b       	sub	r27, r27
    4690:	fd 01       	movw	r30, r26
    4692:	0d c0       	rjmp	.+26     	; 0x46ae <__udivmodsi4_ep>

00004694 <__udivmodsi4_loop>:
    4694:	aa 1f       	adc	r26, r26
    4696:	bb 1f       	adc	r27, r27
    4698:	ee 1f       	adc	r30, r30
    469a:	ff 1f       	adc	r31, r31
    469c:	a2 17       	cp	r26, r18
    469e:	b3 07       	cpc	r27, r19
    46a0:	e4 07       	cpc	r30, r20
    46a2:	f5 07       	cpc	r31, r21
    46a4:	20 f0       	brcs	.+8      	; 0x46ae <__udivmodsi4_ep>
    46a6:	a2 1b       	sub	r26, r18
    46a8:	b3 0b       	sbc	r27, r19
    46aa:	e4 0b       	sbc	r30, r20
    46ac:	f5 0b       	sbc	r31, r21

000046ae <__udivmodsi4_ep>:
    46ae:	66 1f       	adc	r22, r22
    46b0:	77 1f       	adc	r23, r23
    46b2:	88 1f       	adc	r24, r24
    46b4:	99 1f       	adc	r25, r25
    46b6:	1a 94       	dec	r1
    46b8:	69 f7       	brne	.-38     	; 0x4694 <__udivmodsi4_loop>
    46ba:	60 95       	com	r22
    46bc:	70 95       	com	r23
    46be:	80 95       	com	r24
    46c0:	90 95       	com	r25
    46c2:	9b 01       	movw	r18, r22
    46c4:	ac 01       	movw	r20, r24
    46c6:	bd 01       	movw	r22, r26
    46c8:	cf 01       	movw	r24, r30
    46ca:	08 95       	ret

000046cc <__prologue_saves__>:
    46cc:	2f 92       	push	r2
    46ce:	3f 92       	push	r3
    46d0:	4f 92       	push	r4
    46d2:	5f 92       	push	r5
    46d4:	6f 92       	push	r6
    46d6:	7f 92       	push	r7
    46d8:	8f 92       	push	r8
    46da:	9f 92       	push	r9
    46dc:	af 92       	push	r10
    46de:	bf 92       	push	r11
    46e0:	cf 92       	push	r12
    46e2:	df 92       	push	r13
    46e4:	ef 92       	push	r14
    46e6:	ff 92       	push	r15
    46e8:	0f 93       	push	r16
    46ea:	1f 93       	push	r17
    46ec:	cf 93       	push	r28
    46ee:	df 93       	push	r29
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
    46f4:	ca 1b       	sub	r28, r26
    46f6:	db 0b       	sbc	r29, r27
    46f8:	0f b6       	in	r0, 0x3f	; 63
    46fa:	f8 94       	cli
    46fc:	de bf       	out	0x3e, r29	; 62
    46fe:	0f be       	out	0x3f, r0	; 63
    4700:	cd bf       	out	0x3d, r28	; 61
    4702:	09 94       	ijmp

00004704 <__epilogue_restores__>:
    4704:	2a 88       	ldd	r2, Y+18	; 0x12
    4706:	39 88       	ldd	r3, Y+17	; 0x11
    4708:	48 88       	ldd	r4, Y+16	; 0x10
    470a:	5f 84       	ldd	r5, Y+15	; 0x0f
    470c:	6e 84       	ldd	r6, Y+14	; 0x0e
    470e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4710:	8c 84       	ldd	r8, Y+12	; 0x0c
    4712:	9b 84       	ldd	r9, Y+11	; 0x0b
    4714:	aa 84       	ldd	r10, Y+10	; 0x0a
    4716:	b9 84       	ldd	r11, Y+9	; 0x09
    4718:	c8 84       	ldd	r12, Y+8	; 0x08
    471a:	df 80       	ldd	r13, Y+7	; 0x07
    471c:	ee 80       	ldd	r14, Y+6	; 0x06
    471e:	fd 80       	ldd	r15, Y+5	; 0x05
    4720:	0c 81       	ldd	r16, Y+4	; 0x04
    4722:	1b 81       	ldd	r17, Y+3	; 0x03
    4724:	aa 81       	ldd	r26, Y+2	; 0x02
    4726:	b9 81       	ldd	r27, Y+1	; 0x01
    4728:	ce 0f       	add	r28, r30
    472a:	d1 1d       	adc	r29, r1
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	f8 94       	cli
    4730:	de bf       	out	0x3e, r29	; 62
    4732:	0f be       	out	0x3f, r0	; 63
    4734:	cd bf       	out	0x3d, r28	; 61
    4736:	ed 01       	movw	r28, r26
    4738:	08 95       	ret

0000473a <itoa>:
    473a:	fb 01       	movw	r30, r22
    473c:	9f 01       	movw	r18, r30
    473e:	e8 94       	clt
    4740:	42 30       	cpi	r20, 0x02	; 2
    4742:	c4 f0       	brlt	.+48     	; 0x4774 <itoa+0x3a>
    4744:	45 32       	cpi	r20, 0x25	; 37
    4746:	b4 f4       	brge	.+44     	; 0x4774 <itoa+0x3a>
    4748:	4a 30       	cpi	r20, 0x0A	; 10
    474a:	29 f4       	brne	.+10     	; 0x4756 <itoa+0x1c>
    474c:	97 fb       	bst	r25, 7
    474e:	1e f4       	brtc	.+6      	; 0x4756 <itoa+0x1c>
    4750:	90 95       	com	r25
    4752:	81 95       	neg	r24
    4754:	9f 4f       	sbci	r25, 0xFF	; 255
    4756:	64 2f       	mov	r22, r20
    4758:	77 27       	eor	r23, r23
    475a:	0e 94 1d 23 	call	0x463a	; 0x463a <__udivmodhi4>
    475e:	80 5d       	subi	r24, 0xD0	; 208
    4760:	8a 33       	cpi	r24, 0x3A	; 58
    4762:	0c f0       	brlt	.+2      	; 0x4766 <itoa+0x2c>
    4764:	89 5d       	subi	r24, 0xD9	; 217
    4766:	81 93       	st	Z+, r24
    4768:	cb 01       	movw	r24, r22
    476a:	00 97       	sbiw	r24, 0x00	; 0
    476c:	a1 f7       	brne	.-24     	; 0x4756 <itoa+0x1c>
    476e:	16 f4       	brtc	.+4      	; 0x4774 <itoa+0x3a>
    4770:	5d e2       	ldi	r21, 0x2D	; 45
    4772:	51 93       	st	Z+, r21
    4774:	10 82       	st	Z, r1
    4776:	c9 01       	movw	r24, r18
    4778:	0c 94 be 23 	jmp	0x477c	; 0x477c <strrev>

0000477c <strrev>:
    477c:	dc 01       	movw	r26, r24
    477e:	fc 01       	movw	r30, r24
    4780:	67 2f       	mov	r22, r23
    4782:	71 91       	ld	r23, Z+
    4784:	77 23       	and	r23, r23
    4786:	e1 f7       	brne	.-8      	; 0x4780 <strrev+0x4>
    4788:	32 97       	sbiw	r30, 0x02	; 2
    478a:	04 c0       	rjmp	.+8      	; 0x4794 <strrev+0x18>
    478c:	7c 91       	ld	r23, X
    478e:	6d 93       	st	X+, r22
    4790:	70 83       	st	Z, r23
    4792:	62 91       	ld	r22, -Z
    4794:	ae 17       	cp	r26, r30
    4796:	bf 07       	cpc	r27, r31
    4798:	c8 f3       	brcs	.-14     	; 0x478c <strrev+0x10>
    479a:	08 95       	ret

0000479c <_exit>:
    479c:	f8 94       	cli

0000479e <__stop_program>:
    479e:	ff cf       	rjmp	.-2      	; 0x479e <__stop_program>
